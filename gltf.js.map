{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external \"gloperate\"","webpack:///../node_modules/gl-matrix/src/gl-matrix/common.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/mat2.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/mat2d.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/mat3.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/mat4.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/vec3.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/vec4.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/quat.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/vec2.js","webpack:///../node_modules/gl-matrix/src/gl-matrix.js","webpack:///./gltf/aabb3.ts","webpack:///./camera-navigation/cube.ts","webpack:///./gltf/pbrshader.ts","webpack:///./gltf/material.ts","webpack:///./camera-navigation/skybox.frag","webpack:///./camera-navigation/skybox.vert","webpack:///./camera-navigation/skybox.ts","webpack:///../node_modules/gltf-loader-ts/lib/gltf-loader.js","webpack:///./gltf/gltfrenderer.ts","webpack:///./gltf/node.ts","webpack:///./gltf/scene.ts","webpack:///./gltf/primitive.ts","webpack:///./gltf/mesh.ts","webpack:///./gltf/shaders/pbr-frag.glsl","webpack:///./gltf/shaders/pbr-vert.glsl","webpack:///./gltf/asset.ts","webpack:///./gltf/example.ts"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","equals","b","abs","max","create","out","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","sin","cos","mat2_scale","v","v0","v1","fromRotation","fromScaling","str","frob","sqrt","pow","LDU","L","D","U","add","subtract","exactEquals","mat2_equals","multiplyScalar","multiplyScalarAndAdd","scale","mul","sub","mat2d_create","mat2d_clone","mat2d_copy","mat2d_identity","mat2d_fromValues","tx","ty","mat2d_set","mat2d_invert","aa","ab","ac","ad","atx","aty","mat2d_determinant","mat2d_multiply","a4","a5","b4","b5","mat2d_rotate","mat2d_scale","translate","mat2d_fromRotation","mat2d_fromScaling","fromTranslation","mat2d_str","mat2d_frob","mat2d_add","mat2d_subtract","mat2d_multiplyScalar","mat2d_multiplyScalarAndAdd","mat2d_exactEquals","mat2d_equals","mat2d_mul","mat2d_sub","mat3_create","fromMat4","mat3_clone","mat3_copy","mat3_fromValues","m02","m12","m20","m21","m22","mat3_set","mat3_identity","mat3_transpose","a01","a02","a12","mat3_invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","mat3_adjoint","mat3_determinant","mat3_multiply","b00","b02","b10","b12","b20","b22","mat3_translate","x","y","mat3_rotate","mat3_scale","mat3_fromTranslation","mat3_fromRotation","mat3_fromScaling","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","mat3_str","mat3_frob","mat3_add","mat3_subtract","mat3_multiplyScalar","mat3_multiplyScalarAndAdd","mat3_exactEquals","mat3_equals","a6","a7","a8","b6","b7","b8","mat3_mul","mat3_sub","mat4_create","mat4_clone","mat4_copy","mat4_fromValues","m03","m13","m23","m30","m31","m32","m33","mat4_set","mat4_identity","mat4_transpose","mat4_invert","mat4_adjoint","mat4_determinant","mat4_multiply","mat4_translate","mat4_scale","mat4_rotate","axis","t","len","rotateX","rotateY","rotateZ","mat4_fromTranslation","mat4_fromScaling","mat4_fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","mat4_fromQuat","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","mat4_str","mat4_frob","mat4_add","mat4_subtract","mat4_multiplyScalar","mat4_multiplyScalarAndAdd","mat4_exactEquals","mat4_equals","a9","a14","a15","b9","b13","b14","b15","mat4_mul","mat4_sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","min","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","vec3_dot","cross","ax","ay","az","bx","by","bz","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","ix","iy","iz","iw","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","forEach","vec","stride","offset","count","fn","arg","length","vec4_create","vec4_clone","vec4_fromValues","vec4_copy","vec4_set","vec4_add","vec4_subtract","vec4_multiply","vec4_divide","vec4_ceil","vec4_floor","vec4_min","vec4_max","vec4_round","vec4_scale","vec4_scaleAndAdd","vec4_distance","vec4_squaredDistance","vec4_length","vec4_squaredLength","vec4_negate","vec4_inverse","vec4_normalize","vec4_dot","vec4_lerp","aw","vec4_random","vectorScale","vec4_transformMat4","vec4_transformQuat","vec4_str","vec4_exactEquals","vec4_equals","vec4_sub","vec4_mul","vec4_div","vec4_dist","vec4_sqrDist","vec4_len","vec4_sqrLen","vec4_forEach","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","bw","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_invert","dot","invDot","conjugate","fromMat3","fRoot","fTrace","j","k","fromEuler","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","view","vec2_create","vec2_clone","vec2_fromValues","vec2_copy","vec2_set","vec2_add","vec2_subtract","vec2_multiply","vec2_divide","vec2_ceil","vec2_floor","vec2_min","vec2_max","vec2_round","vec2_scale","vec2_scaleAndAdd","vec2_distance","vec2_squaredDistance","vec2_length","vec2_squaredLength","vec2_negate","vec2_inverse","vec2_normalize","vec2_dot","vec2_cross","vec2_lerp","vec2_random","transformMat2","transformMat2d","vec2_transformMat3","vec2_transformMat4","vec2_str","vec2_exactEquals","vec2_equals","vec2_len","vec2_sub","vec2_mul","vec2_div","vec2_dist","vec2_sqrDist","vec2_sqrLen","vec2_forEach","__webpack_exports__","vec4_namespaceObject","gl_matrix_1","Aabb3","[object Object]","vec3","Infinity","this","matrix","newMin","newMax","point","transformPoint","size","other","gloperate","Cube","Geometry","context","identifier","super","undefined","constructor","vertexVBO","Buffer","indexBuffer","_buffers","push","indices","attribEnable","gl","FLOAT","bind","attribDisable","unbind","aVertex","valid","initialize","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","auxiliaries","assert","WebGLBuffer","data","VERTICES","STATIC_DRAW","INDICES","drawElements","TRIANGLE_STRIP","UNSIGNED_BYTE","Uint8Array","webgl_operate_1","attribName","semantic","toLowerCase","ATTRIB_LOCATIONS","POSITION","NORMAL","TANGENT","TEXCOORD_0","TEXCOORD_1","COLOR_0","JOINTS_0","WEIGHTS_0","ShaderFlags","PbrUniformLocations","program","u_ViewProjection","u_ModelMatrix","u_NormalMatrix","u_Camera","u_LightDirection","u_LightColor","u_BaseColorSampler","u_BaseColorFactor","u_NormalSampler","u_NormalScale","u_EmissiveSampler","u_EmissiveFactor","u_MetallicRoughnessSampler","u_MetallicRoughnessValues","u_OcclusionSampler","u_OcclusionStrength","u_AlphaBlend","u_AlphaCutoff","u_PbrFlags","uniform","endsWith","console","warn","uniform1i","uniform3f","PbrShader","attribLocations","isWebGL1","supportsShaderTextureLOD","Error","shaderTextureLOD","supportsStandardDerivatives","standardDerivatives","vert","Shader","VERTEX_SHADER","frag","FRAGMENT_SHADER","Program","isWebGL2","assign","keys","attrib","attribute","uniforms","uninitialize","pbrshader_1","AlphaMode","Material","baseColorFactor","vec4","metallicFactor","roughnessFactor","emissiveFactor","alphaCutoff","alphaMode","OPAQUE","doubleSided","materialIndex","asset","gMaterial","gAsset","gltf","materials","toString","pbr","pbrMetallicRoughness","texPromises","baseColorTexture","metallicRoghnessTexture","normalTexture","occlusionTexture","emissiveTexture","apply","loadTexture","metallicRoughnessTexture","normalTexInfo","normalScale","occTexInfo","occlusionStrength","strength","Promise","all","values","key","texInfo","texCoord","textures","index","texture","image","imageData","source","sampler","samplers","tex2","Texture2","RGBA","wrap","wrapS","REPEAT","wrapT","mag","magFilter","LINEAR","minFilter","LINEAR_MIPMAP_LINEAR","filter","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","generateMipmap","TEXTURE_2D","shaderFlags","flags","HAS_BASECOLORMAP","HAS_NORMALMAP","HAS_EMISSIVEMAP","HAS_METALROUGHNESSMAP","HAS_OCCLUSIONMAP","shader","disable","CULL_FACE","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","uniform1f","MASK","uniform4fv","TEXTURE0","TEXTURE1","TEXTURE2","uniform3fv","TEXTURE3","uniform2f","TEXTURE4","cube_1","Skybox","camera","_context","_camera","_texture","_program","_uTransform","_uEye","_uBackground","_cube","cullFace","FRONT","DEPTH_TEST","depthMask","depthFunc","LEQUAL","uniformMatrix4fv","GL_FALSE","viewProjection","draw","LESS","BACK","e","default","LoadingManager","urlModifier","onStart","onProgress","onLoad","onError","isLoading","itemsLoaded","itemsTotal","__awaiter","u","next","throw","done","then","GLTF_COMPONENT_TYPE_ARRAYS","5120","Int8Array","5121","5122","Int16Array","5123","Uint16Array","5125","Uint32Array","5126","GLTF_ELEMENTS_PER_TYPE","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","GltfAsset","glbData","bufferData","bufferViews","buffer","byteLength","byteOffset","accessors","bufferView","bufferViewData","componentType","BYTES_PER_ELEMENT","sparse","h","preFetchAll","bufferCache","baseUri","manager","loader","FileLoader","responseType","buffers","uri","binaryChunk","load","map","BufferData","crossOrigin","imageCache","images","Blob","mimeType","URL","createObjectURL","resolveURL","Image","onerror","itemEnd","itemError","onload","revokeObjectURL","src","itemStart","test","ImageData","LoaderUtils","TextDecoder","decode","String","fromCharCode","decodeURIComponent","escape","split","pop","join","runningRequests","path","XMLHttpRequest","open","response","status","statusText","onprogress","withCredentials","overrideMimeType","requestHeaders","setRequestHeader","send","BINARY_HEADER_MAGIC","GLTFBinaryData","DataView","decodeText","getUint32","json","GltfLoader","extractUrlBase","parse","match","replace","has","JSON","version","skybox_1","GltfRenderer","Renderer","scene","_scene","_sceneChanged","setCameraFromBounds","invalidate","callback","mouseEventProvider","gl2facade","pbrShader","Camera","_navigation","Navigation","_defaultFBO","DefaultFramebuffer","_colorRenderTexture","RGBA8","_depthRenderbuffer","Renderbuffer","DEPTH_COMPONENT16","_intermediateFBO","Framebuffer","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","_blit","BlitPass","framebuffer","readBuffer","drawBuffer","internalFormatAndType","Wizard","queryInternalTextureFormat","RGB","_cubeMap","TextureCube","_skyBox","positiveX","negativeX","positiveY","negativeY","positiveZ","negativeZ","setTimeout","clearColor","_altered","frameSize","resize","_frameSize","viewport","canvasSize","_canvasSize","_clearColor","update","altered","any","_cubeMapChanged","reset","frameNumber","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","frame","bounds","aabb3_1","Node","children","finalTransform","mat4","normalMatrix","mat3","gNode","node","translation","rotation","quat","mesh","getMesh","fromGltf","nodes","parentTransform","updateTransform","transform","updateBounds","union","material_1","node_1","Scene","batchesByMaterial","Map","gScene","rootNodes","rootTransform","rootNode","stack","primitive","primitives","material","batches","from","opaqueMaterials","transparentMaterials","sortedMaterials","concat","FALSE","uniformMatrix3fv","gltf_loader_ts_1","VertexAttribute","normalized","accessor","byteStride","Primitive","attributes","vertexArray","VertexArray","gPrimitive","prim","mode","buffersByView","accessorIndex","numVertices","bufferViewIndex","accessorData","HAS_NORMALS","HAS_TANGENTS","HAS_UV","HAS_COLORS","indexAccessor","indexBufferData","numIndices","indexByteOffset","indexType","UNSIGNED_INT","supportsElementIndexUint","elementIndexUint","getMaterial","location","args","drawCall","drawArrays","bindBuffers","unbindBuffers","initialized","primitive_1","Mesh","meshIndex","gMesh","meshes","gPrim","mesh_1","scene_1","Asset","scenes","asset_1","gltfrenderer_1","BASE_MODEL_URI","setupSampleDropdown","renderer","selectedModel","variant","samples","fetch","select","document","getElementById","sample","variants","op","Option","getSampleUrl","text","selected","options","onchange","option","selectedOptions","loadScene","history","pushState","onpopstate","event","modelUrl","state","time","timeEnd","cycleModels","delayMs","log","error","delay","ms","resolve","baseUrl","getScene","getQueryParam","param","re","RegExp","search","canvas","Canvas","model","element","addEventListener","viewer","Fullscreen","toggle","readyState"],"mappings":"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","file":"gltf.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"gloperate\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"gloperate\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"gloperate\")) : factory(root[\"gloperate\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\n/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nexport const EPSILON = 0.000001;\r\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\r\nexport const RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nexport function setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nconst degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nexport function toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}\r\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\nimport * as glMatrix from \"./common.js\"\r\n\r\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\r\n\r\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\nexport function create() {\r\n  let out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {mat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\nexport function clone(a) {\r\n  let out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\r\nexport function fromValues(m00, m01, m10, m11) {\r\n  let out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m10;\r\n  out[3] = m11;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\r\nexport function set(out, m00, m01, m10, m11) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m10;\r\n  out[3] = m11;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache\r\n  // some values\r\n  if (out === a) {\r\n    let a1 = a[1];\r\n    out[1] = a[2];\r\n    out[2] = a1;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[2];\r\n    out[2] = a[1];\r\n    out[3] = a[3];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function invert(out, a) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\r\n\r\n  // Calculate the determinant\r\n  let det = a0 * a3 - a2 * a1;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] =  a3 * det;\r\n  out[1] = -a1 * det;\r\n  out[2] = -a2 * det;\r\n  out[3] =  a0 * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function adjoint(out, a) {\r\n  // Caching this value is nessecary if out == a\r\n  let a0 = a[0];\r\n  out[0] =  a[3];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] =  a0;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  return a[0] * a[3] - a[2] * a[1];\r\n}\r\n\r\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\r\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n  out[0] = a0 *  c + a2 * s;\r\n  out[1] = a1 *  c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\r\n  let v0 = v[0], v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = -s;\r\n  out[3] = c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = v[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {mat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\r\n}\r\n\r\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\r\n\r\nexport function LDU(L, D, U, a) {\r\n  L[2] = a[2]/a[0];\r\n  U[0] = a[0];\r\n  U[1] = a[1];\r\n  U[3] = a[3] - L[2] * U[1];\r\n  return [L, D, U];\r\n}\r\n\r\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\r\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + (b[0] * scale);\r\n  out[1] = a[1] + (b[1] * scale);\r\n  out[2] = a[2] + (b[2] * scale);\r\n  out[3] = a[3] + (b[3] * scale);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\r\nexport const mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\r\nexport const sub = subtract;\r\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\nimport * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n *\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty,\r\n *  0, 0, 1]\r\n * </pre>\r\n * The last row is ignored so the array is shorter and operations are faster.\r\n */\r\n\r\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\r\nexport function create() {\r\n  let out = new glMatrix.ARRAY_TYPE(6);\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {mat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\r\nexport function clone(a) {\r\n  let out = new glMatrix.ARRAY_TYPE(6);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\r\nexport function fromValues(a, b, c, d, tx, ty) {\r\n  let out = new glMatrix.ARRAY_TYPE(6);\r\n  out[0] = a;\r\n  out[1] = b;\r\n  out[2] = c;\r\n  out[3] = d;\r\n  out[4] = tx;\r\n  out[5] = ty;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\r\nexport function set(out, a, b, c, d, tx, ty) {\r\n  out[0] = a;\r\n  out[1] = b;\r\n  out[2] = c;\r\n  out[3] = d;\r\n  out[4] = tx;\r\n  out[5] = ty;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\r\nexport function invert(out, a) {\r\n  let aa = a[0], ab = a[1], ac = a[2], ad = a[3];\r\n  let atx = a[4], aty = a[5];\r\n\r\n  let det = aa * ad - ab * ac;\r\n  if(!det){\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = ad * det;\r\n  out[1] = -ab * det;\r\n  out[2] = -ac * det;\r\n  out[3] = aa * det;\r\n  out[4] = (ac * aty - ad * atx) * det;\r\n  out[5] = (ab * atx - aa * aty) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {mat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  return a[0] * a[3] - a[1] * a[2];\r\n}\r\n\r\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\r\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  out[4] = a0 * b4 + a2 * b5 + a4;\r\n  out[5] = a1 * b4 + a3 * b5 + a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n  out[0] = a0 *  c + a2 * s;\r\n  out[1] = a1 *  c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  out[4] = a4;\r\n  out[5] = a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\r\n  let v0 = v[0], v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  out[4] = a4;\r\n  out[5] = a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\r\nexport function translate(out, a, v) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\r\n  let v0 = v[0], v1 = v[1];\r\n  out[0] = a0;\r\n  out[1] = a1;\r\n  out[2] = a2;\r\n  out[3] = a3;\r\n  out[4] = a0 * v0 + a2 * v1 + a4;\r\n  out[5] = a1 * v0 + a3 * v1 + a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  let s = Math.sin(rad), c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = -s;\r\n  out[3] = c;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = v[1];\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = v[0];\r\n  out[5] = v[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {mat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\r\n          a[3] + ', ' + a[4] + ', ' + a[5] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {mat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\r\n}\r\n\r\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + (b[0] * scale);\r\n  out[1] = a[1] + (b[1] * scale);\r\n  out[2] = a[2] + (b[2] * scale);\r\n  out[3] = a[3] + (b[3] * scale);\r\n  out[4] = a[4] + (b[4] * scale);\r\n  out[5] = a[5] + (b[5] * scale);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\r\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\r\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\r\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\r\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\r\nexport const mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\r\nexport const sub = subtract;\r\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\nimport * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function create() {\r\n  let out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nexport function fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function clone(a) {\r\n  let out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  let out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    let a01 = a[1], a02 = a[2], a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function invert(out, a) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2];\r\n  let a10 = a[3], a11 = a[4], a12 = a[5];\r\n  let a20 = a[6], a21 = a[7], a22 = a[8];\r\n\r\n  let b01 = a22 * a11 - a12 * a21;\r\n  let b11 = -a22 * a10 + a12 * a20;\r\n  let b21 = a21 * a10 - a11 * a20;\r\n\r\n  // Calculate the determinant\r\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function adjoint(out, a) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2];\r\n  let a10 = a[3], a11 = a[4], a12 = a[5];\r\n  let a20 = a[6], a21 = a[7], a22 = a[8];\r\n\r\n  out[0] = (a11 * a22 - a12 * a21);\r\n  out[1] = (a02 * a21 - a01 * a22);\r\n  out[2] = (a01 * a12 - a02 * a11);\r\n  out[3] = (a12 * a20 - a10 * a22);\r\n  out[4] = (a00 * a22 - a02 * a20);\r\n  out[5] = (a02 * a10 - a00 * a12);\r\n  out[6] = (a10 * a21 - a11 * a20);\r\n  out[7] = (a01 * a20 - a00 * a21);\r\n  out[8] = (a00 * a11 - a01 * a10);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2];\r\n  let a10 = a[3], a11 = a[4], a12 = a[5];\r\n  let a20 = a[6], a21 = a[7], a22 = a[8];\r\n\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2];\r\n  let a10 = a[3], a11 = a[4], a12 = a[5];\r\n  let a20 = a[6], a21 = a[7], a22 = a[8];\r\n\r\n  let b00 = b[0], b01 = b[1], b02 = b[2];\r\n  let b10 = b[3], b11 = b[4], b12 = b[5];\r\n  let b20 = b[6], b21 = b[7], b22 = b[8];\r\n\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nexport function translate(out, a, v) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2],\r\n    a10 = a[3], a11 = a[4], a12 = a[5],\r\n    a20 = a[6], a21 = a[7], a22 = a[8],\r\n    x = v[0], y = v[1];\r\n\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2],\r\n    a10 = a[3], a11 = a[4], a12 = a[5],\r\n    a20 = a[6], a21 = a[7], a22 = a[8],\r\n\r\n    s = Math.sin(rad),\r\n    c = Math.cos(rad);\r\n\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  let x = v[0], y = v[1];\r\n\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  let s = Math.sin(rad), c = Math.cos(rad);\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\nexport function fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function fromQuat(out, q) {\r\n  let x = q[0], y = q[1], z = q[2], w = q[3];\r\n  let x2 = x + x;\r\n  let y2 = y + y;\r\n  let z2 = z + z;\r\n\r\n  let xx = x * x2;\r\n  let yx = y * x2;\r\n  let yy = y * y2;\r\n  let zx = z * x2;\r\n  let zy = z * y2;\r\n  let zz = z * z2;\r\n  let wx = w * x2;\r\n  let wy = w * y2;\r\n  let wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function normalFromMat4(out, a) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\r\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\r\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\r\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n\r\n  let b00 = a00 * a11 - a01 * a10;\r\n  let b01 = a00 * a12 - a02 * a10;\r\n  let b02 = a00 * a13 - a03 * a10;\r\n  let b03 = a01 * a12 - a02 * a11;\r\n  let b04 = a01 * a13 - a03 * a11;\r\n  let b05 = a02 * a13 - a03 * a12;\r\n  let b06 = a20 * a31 - a21 * a30;\r\n  let b07 = a20 * a32 - a22 * a30;\r\n  let b08 = a20 * a33 - a23 * a30;\r\n  let b09 = a21 * a32 - a22 * a31;\r\n  let b10 = a21 * a33 - a23 * a31;\r\n  let b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nexport function projection(out, width, height) {\r\n    out[0] = 2 / width;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = -2 / height;\r\n    out[5] = 0;\r\n    out[6] = -1;\r\n    out[7] = 1;\r\n    out[8] = 1;\r\n    return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\r\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\r\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + (b[0] * scale);\r\n  out[1] = a[1] + (b[1] * scale);\r\n  out[2] = a[2] + (b[2] * scale);\r\n  out[3] = a[3] + (b[3] * scale);\r\n  out[4] = a[4] + (b[4] * scale);\r\n  out[5] = a[5] + (b[5] * scale);\r\n  out[6] = a[6] + (b[6] * scale);\r\n  out[7] = a[7] + (b[7] * scale);\r\n  out[8] = a[8] + (b[8] * scale);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\r\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\r\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\r\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\r\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\r\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\r\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\r\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\r\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\r\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\nexport const mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\nexport const sub = subtract;\r\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\nimport * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4x4 Matrix\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function create() {\r\n  let out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function clone(a) {\r\n  let out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  let out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    let a01 = a[1], a02 = a[2], a03 = a[3];\r\n    let a12 = a[6], a13 = a[7];\r\n    let a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\r\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\r\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\r\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n\r\n  let b00 = a00 * a11 - a01 * a10;\r\n  let b01 = a00 * a12 - a02 * a10;\r\n  let b02 = a00 * a13 - a03 * a10;\r\n  let b03 = a01 * a12 - a02 * a11;\r\n  let b04 = a01 * a13 - a03 * a11;\r\n  let b05 = a02 * a13 - a03 * a12;\r\n  let b06 = a20 * a31 - a21 * a30;\r\n  let b07 = a20 * a32 - a22 * a30;\r\n  let b08 = a20 * a33 - a23 * a30;\r\n  let b09 = a21 * a32 - a22 * a31;\r\n  let b10 = a21 * a33 - a23 * a31;\r\n  let b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function adjoint(out, a) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\r\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\r\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\r\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n\r\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\r\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\r\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\r\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\r\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\r\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\r\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\r\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\r\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n\r\n  let b00 = a00 * a11 - a01 * a10;\r\n  let b01 = a00 * a12 - a02 * a10;\r\n  let b02 = a00 * a13 - a03 * a10;\r\n  let b03 = a01 * a12 - a02 * a11;\r\n  let b04 = a01 * a13 - a03 * a11;\r\n  let b05 = a02 * a13 - a03 * a12;\r\n  let b06 = a20 * a31 - a21 * a30;\r\n  let b07 = a20 * a32 - a22 * a30;\r\n  let b08 = a20 * a33 - a23 * a30;\r\n  let b09 = a21 * a32 - a22 * a31;\r\n  let b10 = a21 * a33 - a23 * a31;\r\n  let b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\r\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\r\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\r\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\r\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\r\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\r\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\r\n\r\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\r\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\r\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\r\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\r\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\r\n\r\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\r\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\r\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\r\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\r\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\r\n\r\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\r\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\r\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\r\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\r\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n  let x = v[0], y = v[1], z = v[2];\r\n  let a00, a01, a02, a03;\r\n  let a10, a11, a12, a13;\r\n  let a20, a21, a22, a23;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\r\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\r\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\r\n\r\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\r\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\r\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  let x = v[0], y = v[1], z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n  let x = axis[0], y = axis[1], z = axis[2];\r\n  let len = Math.sqrt(x * x + y * y + z * z);\r\n  let s, c, t;\r\n  let a00, a01, a02, a03;\r\n  let a10, a11, a12, a13;\r\n  let a20, a21, a22, a23;\r\n  let b00, b01, b02;\r\n  let b10, b11, b12;\r\n  let b20, b21, b22;\r\n\r\n  if (Math.abs(len) < glMatrix.EPSILON) { return null; }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\r\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\r\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n  let a10 = a[4];\r\n  let a11 = a[5];\r\n  let a12 = a[6];\r\n  let a13 = a[7];\r\n  let a20 = a[8];\r\n  let a21 = a[9];\r\n  let a22 = a[10];\r\n  let a23 = a[11];\r\n\r\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\r\n    out[0]  = a[0];\r\n    out[1]  = a[1];\r\n    out[2]  = a[2];\r\n    out[3]  = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n  let a00 = a[0];\r\n  let a01 = a[1];\r\n  let a02 = a[2];\r\n  let a03 = a[3];\r\n  let a20 = a[8];\r\n  let a21 = a[9];\r\n  let a22 = a[10];\r\n  let a23 = a[11];\r\n\r\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\r\n    out[4]  = a[4];\r\n    out[5]  = a[5];\r\n    out[6]  = a[6];\r\n    out[7]  = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n  let a00 = a[0];\r\n  let a01 = a[1];\r\n  let a02 = a[2];\r\n  let a03 = a[3];\r\n  let a10 = a[4];\r\n  let a11 = a[5];\r\n  let a12 = a[6];\r\n  let a13 = a[7];\r\n\r\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\r\n    out[8]  = a[8];\r\n    out[9]  = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotation(out, rad, axis) {\r\n  let x = axis[0], y = axis[1], z = axis[2];\r\n  let len = Math.sqrt(x * x + y * y + z * z);\r\n  let s, c, t;\r\n\r\n  if (Math.abs(len) < glMatrix.EPSILON) { return null; }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromXRotation(out, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0]  = 1;\r\n  out[1]  = 0;\r\n  out[2]  = 0;\r\n  out[3]  = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromYRotation(out, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0]  = c;\r\n  out[1]  = 0;\r\n  out[2]  = -s;\r\n  out[3]  = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromZRotation(out, rad) {\r\n  let s = Math.sin(rad);\r\n  let c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0]  = c;\r\n  out[1]  = s;\r\n  out[2]  = 0;\r\n  out[3]  = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  let x = q[0], y = q[1], z = q[2], w = q[3];\r\n  let x2 = x + x;\r\n  let y2 = y + y;\r\n  let z2 = z + z;\r\n\r\n  let xx = x * x2;\r\n  let xy = x * y2;\r\n  let xz = x * z2;\r\n  let yy = y * y2;\r\n  let yz = y * z2;\r\n  let zz = z * z2;\r\n  let wx = w * x2;\r\n  let wy = w * y2;\r\n  let wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n  let m11 = mat[0];\r\n  let m12 = mat[1];\r\n  let m13 = mat[2];\r\n  let m21 = mat[4];\r\n  let m22 = mat[5];\r\n  let m23 = mat[6];\r\n  let m31 = mat[8];\r\n  let m32 = mat[9];\r\n  let m33 = mat[10];\r\n\r\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport function getRotation(out, mat) {\r\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n  let trace = mat[0] + mat[5] + mat[10];\r\n  let S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (mat[6] - mat[9]) / S;\r\n    out[1] = (mat[8] - mat[2]) / S;\r\n    out[2] = (mat[1] - mat[4]) / S;\r\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\r\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n    out[3] = (mat[6] - mat[9]) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (mat[1] + mat[4]) / S;\r\n    out[2] = (mat[8] + mat[2]) / S;\r\n  } else if (mat[5] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n    out[3] = (mat[8] - mat[2]) / S;\r\n    out[0] = (mat[1] + mat[4]) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (mat[6] + mat[9]) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n    out[3] = (mat[1] - mat[4]) / S;\r\n    out[0] = (mat[8] + mat[2]) / S;\r\n    out[1] = (mat[6] + mat[9]) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  let x = q[0], y = q[1], z = q[2], w = q[3];\r\n  let x2 = x + x;\r\n  let y2 = y + y;\r\n  let z2 = z + z;\r\n\r\n  let xx = x * x2;\r\n  let xy = x * y2;\r\n  let xz = x * z2;\r\n  let yy = y * y2;\r\n  let yz = y * z2;\r\n  let zz = z * z2;\r\n  let wx = w * x2;\r\n  let wy = w * y2;\r\n  let wz = w * z2;\r\n  let sx = s[0];\r\n  let sy = s[1];\r\n  let sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  let x = q[0], y = q[1], z = q[2], w = q[3];\r\n  let x2 = x + x;\r\n  let y2 = y + y;\r\n  let z2 = z + z;\r\n\r\n  let xx = x * x2;\r\n  let xy = x * y2;\r\n  let xz = x * z2;\r\n  let yy = y * y2;\r\n  let yz = y * z2;\r\n  let zz = z * z2;\r\n  let wx = w * x2;\r\n  let wy = w * y2;\r\n  let wz = w * z2;\r\n\r\n  let sx = s[0];\r\n  let sy = s[1];\r\n  let sz = s[2];\r\n\r\n  let ox = o[0];\r\n  let oy = o[1];\r\n  let oz = o[2];\r\n\r\n  let out0 = (1 - (yy + zz)) * sx;\r\n  let out1 = (xy + wz) * sx;\r\n  let out2 = (xz - wy) * sx;\r\n  let out4 = (xy - wz) * sy;\r\n  let out5 = (1 - (xx + zz)) * sy;\r\n  let out6 = (yz + wx) * sy;\r\n  let out8 = (xz + wy) * sz;\r\n  let out9 = (yz - wx) * sz;\r\n  let out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n  let x = q[0], y = q[1], z = q[2], w = q[3];\r\n  let x2 = x + x;\r\n  let y2 = y + y;\r\n  let z2 = z + z;\r\n\r\n  let xx = x * x2;\r\n  let yx = y * x2;\r\n  let yy = y * y2;\r\n  let zx = z * x2;\r\n  let zy = z * y2;\r\n  let zz = z * z2;\r\n  let wx = w * x2;\r\n  let wy = w * y2;\r\n  let wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function frustum(out, left, right, bottom, top, near, far) {\r\n  let rl = 1 / (right - left);\r\n  let tb = 1 / (top - bottom);\r\n  let nf = 1 / (near - far);\r\n  out[0] = (near * 2) * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = (near * 2) * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = (far * near * 2) * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n  let f = 1.0 / Math.tan(fovy / 2);\r\n  let nf = 1 / (near - far);\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = (2 * far * near) * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\r\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\r\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\r\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\r\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\r\n  let xScale = 2.0 / (leftTan + rightTan);\r\n  let yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = ((upTan - downTan) * yScale * 0.5);\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = (far * near) / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n  let lr = 1 / (left - right);\r\n  let bt = 1 / (bottom - top);\r\n  let nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis. \r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function lookAt(out, eye, center, up) {\r\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\r\n  let eyex = eye[0];\r\n  let eyey = eye[1];\r\n  let eyez = eye[2];\r\n  let upx = up[0];\r\n  let upy = up[1];\r\n  let upz = up[2];\r\n  let centerx = center[0];\r\n  let centery = center[1];\r\n  let centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\r\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\r\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n  let eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n\r\n  let z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n\r\n  let len = z0*z0 + z1*z1 + z2*z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  let x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0*x0 + x1*x1 + x2*x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\r\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\r\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\r\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + (b[0] * scale);\r\n  out[1] = a[1] + (b[1] * scale);\r\n  out[2] = a[2] + (b[2] * scale);\r\n  out[3] = a[3] + (b[3] * scale);\r\n  out[4] = a[4] + (b[4] * scale);\r\n  out[5] = a[5] + (b[5] * scale);\r\n  out[6] = a[6] + (b[6] * scale);\r\n  out[7] = a[7] + (b[7] * scale);\r\n  out[8] = a[8] + (b[8] * scale);\r\n  out[9] = a[9] + (b[9] * scale);\r\n  out[10] = a[10] + (b[10] * scale);\r\n  out[11] = a[11] + (b[11] * scale);\r\n  out[12] = a[12] + (b[12] * scale);\r\n  out[13] = a[13] + (b[13] * scale);\r\n  out[14] = a[14] + (b[14] * scale);\r\n  out[15] = a[15] + (b[15] * scale);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\r\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\r\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\r\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\r\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\r\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\r\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\r\n\r\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\r\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\r\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\r\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\r\n\r\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\r\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\r\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\r\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\r\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\r\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\r\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\r\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\r\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\r\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\r\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\r\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\r\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nexport const mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nexport const sub = subtract;\r\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\nimport * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function create() {\r\n  let out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  let z = a[2];\r\n  return Math.sqrt(x*x + y*y + z*z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function fromValues(x, y, z) {\r\n  let out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + (b[0] * scale);\r\n  out[1] = a[1] + (b[1] * scale);\r\n  out[2] = a[2] + (b[2] * scale);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  let x = b[0] - a[0];\r\n  let y = b[1] - a[1];\r\n  let z = b[2] - a[2];\r\n  return Math.sqrt(x*x + y*y + z*z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  let x = b[0] - a[0];\r\n  let y = b[1] - a[1];\r\n  let z = b[2] - a[2];\r\n  return x*x + y*y + z*z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  let z = a[2];\r\n  return x*x + y*y + z*z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  let z = a[2];\r\n  let len = x*x + y*y + z*z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  let ax = a[0], ay = a[1], az = a[2];\r\n  let bx = b[0], by = b[1], bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  let ax = a[0];\r\n  let ay = a[1];\r\n  let az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function hermite(out, a, b, c, d, t) {\r\n  let factorTimes2 = t * t;\r\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  let factor2 = factorTimes2 * (t - 2) + t;\r\n  let factor3 = factorTimes2 * (t - 1);\r\n  let factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function bezier(out, a, b, c, d, t) {\r\n  let inverseFactor = 1 - t;\r\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  let factorTimes2 = t * t;\r\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  let factor2 = 3 * t * inverseFactorTimesTwo;\r\n  let factor3 = 3 * factorTimes2 * inverseFactor;\r\n  let factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\r\n  let zScale = Math.sqrt(1.0-z*z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  let x = a[0], y = a[1], z = a[2];\r\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  let x = a[0], y = a[1], z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\r\n\r\n  let x = a[0], y = a[1], z = a[2];\r\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  let ix = qw * x + qy * z - qz * y;\r\n  let iy = qw * y + qz * x - qx * z;\r\n  let iz = qw * z + qx * y - qy * x;\r\n  let iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateX(out, a, b, c){\r\n  let p = [], r=[];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\r\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateY(out, a, b, c){\r\n  let p = [], r=[];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateZ(out, a, b, c){\r\n  let p = [], r=[];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\r\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  let tempA = fromValues(a[0], a[1], a[2]);\r\n  let tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  let cosine = dot(tempA, tempB);\r\n\r\n  if(cosine > 1.0) {\r\n    return 0;\r\n  }\r\n  else if(cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2];\r\n  let b0 = b[0], b1 = b[1], b2 = b[2];\r\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nexport const sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nexport const mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nexport const div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nexport const dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nexport const sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nexport const len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nexport const sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport const forEach = (function() {\r\n  let vec = create();\r\n\r\n  return function(a, stride, offset, count, fn, arg) {\r\n    let i, l;\r\n    if(!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if(!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if(count) {\r\n      l = Math.min((count * stride) + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for(i = offset; i < l; i += stride) {\r\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n})();\r\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\nimport * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function create() {\r\n  let out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function clone(a) {\r\n  let out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function fromValues(x, y, z, w) {\r\n  let out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + (b[0] * scale);\r\n  out[1] = a[1] + (b[1] * scale);\r\n  out[2] = a[2] + (b[2] * scale);\r\n  out[3] = a[3] + (b[3] * scale);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  let x = b[0] - a[0];\r\n  let y = b[1] - a[1];\r\n  let z = b[2] - a[2];\r\n  let w = b[3] - a[3];\r\n  return Math.sqrt(x*x + y*y + z*z + w*w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  let x = b[0] - a[0];\r\n  let y = b[1] - a[1];\r\n  let z = b[2] - a[2];\r\n  let w = b[3] - a[3];\r\n  return x*x + y*y + z*z + w*w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  let z = a[2];\r\n  let w = a[3];\r\n  return Math.sqrt(x*x + y*y + z*z + w*w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  let z = a[2];\r\n  let w = a[3];\r\n  return x*x + y*y + z*z + w*w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  let z = a[2];\r\n  let w = a[3];\r\n  let len = x*x + y*y + z*z + w*w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  let ax = a[0];\r\n  let ay = a[1];\r\n  let az = a[2];\r\n  let aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nexport function random(out, vectorScale) {\r\n  vectorScale = vectorScale || 1.0;\r\n\r\n  //TODO: This is a pretty awful way of doing this. Find something better.\r\n  out[0] = glMatrix.RANDOM();\r\n  out[1] = glMatrix.RANDOM();\r\n  out[2] = glMatrix.RANDOM();\r\n  out[3] = glMatrix.RANDOM();\r\n  normalize(out, out);\r\n  scale(out, out, vectorScale);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  let x = a[0], y = a[1], z = a[2], w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  let x = a[0], y = a[1], z = a[2];\r\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  let ix = qw * x + qy * z - qz * y;\r\n  let iy = qw * y + qz * x - qx * z;\r\n  let iz = qw * z + qx * y - qy * x;\r\n  let iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\r\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\r\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\r\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\r\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nexport const sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nexport const mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nexport const div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nexport const dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nexport const sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nexport const len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nexport const sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport const forEach = (function() {\r\n  let vec = create();\r\n\r\n  return function(a, stride, offset, count, fn, arg) {\r\n    let i, l;\r\n    if(!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if(!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if(count) {\r\n      l = Math.min((count * stride) + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for(i = offset; i < l; i += stride) {\r\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n})();\r\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\nimport * as glMatrix from \"./common.js\"\r\nimport * as mat3 from \"./mat3.js\"\r\nimport * as vec3 from \"./vec3.js\"\r\nimport * as vec4 from \"./vec4.js\"\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nexport function create() {\r\n  let out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nexport function setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  let s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\nexport function getAxisAngle(out_axis, q) {\r\n  let rad = Math.acos(q[3]) * 2.0;\r\n  let s = Math.sin(rad / 2.0);\r\n  if (s != 0.0) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n  return rad;\r\n}\r\n\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\r\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\r\n\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\r\n  let bx = Math.sin(rad), bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\r\n  let by = Math.sin(rad), bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\r\n  let bz = Math.sin(rad), bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\nexport function calculateW(out, a) {\r\n  let x = a[0], y = a[1], z = a[2];\r\n\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport function slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\r\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\r\n\r\n  let omega, cosom, sinom, scale0, scale1;\r\n\r\n  // calc cosine\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n  // adjust signs (if necessary)\r\n  if ( cosom < 0.0 ) {\r\n    cosom = -cosom;\r\n    bx = - bx;\r\n    by = - by;\r\n    bz = - bz;\r\n    bw = - bw;\r\n  }\r\n  // calculate coefficients\r\n  if ( (1.0 - cosom) > 0.000001 ) {\r\n    // standard case (slerp)\r\n    omega  = Math.acos(cosom);\r\n    sinom  = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  }\r\n  // calculate final values\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nexport function invert(out, a) {\r\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\r\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\r\n  let invDot = dot ? 1.0/dot : 0;\r\n\r\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0*invDot;\r\n  out[1] = -a1*invDot;\r\n  out[2] = -a2*invDot;\r\n  out[3] = a3*invDot;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  let fTrace = m[0] + m[4] + m[8];\r\n  let fRoot;\r\n\r\n  if ( fTrace > 0.0 ) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5/fRoot;  // 1/(4w)\r\n    out[0] = (m[5]-m[7])*fRoot;\r\n    out[1] = (m[6]-m[2])*fRoot;\r\n    out[2] = (m[1]-m[3])*fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    let i = 0;\r\n    if ( m[4] > m[0] )\r\n      i = 1;\r\n    if ( m[8] > m[i*3+i] )\r\n      i = 2;\r\n    let j = (i+1)%3;\r\n    let k = (i+2)%3;\r\n\r\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\r\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\r\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromEuler(out, x, y, z) {\r\n    let halfToRad = 0.5 * Math.PI / 180.0;\r\n    x *= halfToRad;\r\n    y *= halfToRad;\r\n    z *= halfToRad;\r\n\r\n    let sx = Math.sin(x);\r\n    let cx = Math.cos(x);\r\n    let sy = Math.sin(y);\r\n    let cy = Math.cos(y);\r\n    let sz = Math.sin(z);\r\n    let cz = Math.cos(z);\r\n\r\n    out[0] = sx * cy * cz - cx * sy * sz;\r\n    out[1] = cx * sy * cz + sx * cy * sz;\r\n    out[2] = cx * cy * sz - sx * sy * cz;\r\n    out[3] = cx * cy * cz + sx * sy * sz;\r\n\r\n    return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport const clone = vec4.clone;\r\n\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport const fromValues = vec4.fromValues;\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const copy = vec4.copy;\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const set = vec4.set;\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const add = vec4.add;\r\n\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\nexport const mul = multiply;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const scale = vec4.scale;\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport const dot = vec4.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const lerp = vec4.lerp;\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport const length = vec4.length;\r\n\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\nexport const len = length;\r\n\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport const squaredLength = vec4.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\nexport const sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport const normalize = vec4.normalize;\r\n\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport const exactEquals = vec4.exactEquals;\r\n\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport const equals = vec4.equals;\r\n\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\nexport const rotationTo = (function() {\r\n  let tmpvec3 = vec3.create();\r\n  let xUnitVec3 = vec3.fromValues(1,0,0);\r\n  let yUnitVec3 = vec3.fromValues(0,1,0);\r\n\r\n  return function(out, a, b) {\r\n    let dot = vec3.dot(a, b);\r\n    if (dot < -0.999999) {\r\n      vec3.cross(tmpvec3, xUnitVec3, a);\r\n      if (vec3.len(tmpvec3) < 0.000001)\r\n        vec3.cross(tmpvec3, yUnitVec3, a);\r\n      vec3.normalize(tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      vec3.cross(tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n})();\r\n\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount\r\n * @returns {quat} out\r\n */\r\nexport const sqlerp = (function () {\r\n  let temp1 = create();\r\n  let temp2 = create();\r\n\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  };\r\n}());\r\n\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\nexport const setAxes = (function() {\r\n  let matr = mat3.create();\r\n\r\n  return function(out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n})();\r\n","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n\r\nimport * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\r\nexport function create() {\r\n  let out = new glMatrix.ARRAY_TYPE(2);\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\r\nexport function clone(a) {\r\n  let out = new glMatrix.ARRAY_TYPE(2);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\r\nexport function fromValues(x, y) {\r\n  let out = new glMatrix.ARRAY_TYPE(2);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\r\nexport function set(out, x, y) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  return out;\r\n};\r\n\r\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  return out;\r\n};\r\n\r\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  return out;\r\n};\r\n\r\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  return out;\r\n};\r\n\r\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\r\nexport function round (out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + (b[0] * scale);\r\n  out[1] = a[1] + (b[1] * scale);\r\n  return out;\r\n};\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0],\r\n    y = b[1] - a[1];\r\n  return Math.sqrt(x*x + y*y);\r\n};\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0],\r\n    y = b[1] - a[1];\r\n  return x*x + y*y;\r\n};\r\n\r\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0],\r\n    y = a[1];\r\n  return Math.sqrt(x*x + y*y);\r\n};\r\n\r\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength (a) {\r\n  var x = a[0],\r\n    y = a[1];\r\n  return x*x + y*y;\r\n};\r\n\r\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  return out;\r\n};\r\n\r\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0],\r\n    y = a[1];\r\n  var len = x*x + y*y;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n  }\r\n  return out;\r\n};\r\n\r\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1];\r\n};\r\n\r\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var z = a[0] * b[1] - a[1] * b[0];\r\n  out[0] = out[1] = 0;\r\n  out[2] = z;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount between the two inputs\r\n * @returns {vec2} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0],\r\n    ay = a[1];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  return out;\r\n};\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  out[0] = Math.cos(r) * scale;\r\n  out[1] = Math.sin(r) * scale;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat2(out, a, m) {\r\n  var x = a[0],\r\n    y = a[1];\r\n  out[0] = m[0] * x + m[2] * y;\r\n  out[1] = m[1] * x + m[3] * y;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat2d(out, a, m) {\r\n  var x = a[0],\r\n    y = a[1];\r\n  out[0] = m[0] * x + m[2] * y + m[4];\r\n  out[1] = m[1] * x + m[3] * y + m[5];\r\n  return out;\r\n};\r\n\r\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n    y = a[1];\r\n  out[0] = m[0] * x + m[3] * y + m[6];\r\n  out[1] = m[1] * x + m[4] * y + m[7];\r\n  return out;\r\n};\r\n\r\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  let x = a[0];\r\n  let y = a[1];\r\n  out[0] = m[0] * x + m[4] * y + m[12];\r\n  out[1] = m[1] * x + m[5] * y + m[13];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  let a0 = a[0], a1 = a[1];\r\n  let b0 = b[0], b1 = b[1];\r\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\r\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\r\nexport const len = length;\r\n\r\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\r\nexport const sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\r\nexport const mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\r\nexport const div = divide;\r\n\r\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\r\nexport const dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\r\nexport const sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\r\nexport const sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport const forEach = (function() {\r\n  let vec = create();\r\n\r\n  return function(a, stride, offset, count, fn, arg) {\r\n    let i, l;\r\n    if(!stride) {\r\n      stride = 2;\r\n    }\r\n\r\n    if(!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if(count) {\r\n      l = Math.min((count * stride) + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for(i = offset; i < l; i += stride) {\r\n      vec[0] = a[i]; vec[1] = a[i+1];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0]; a[i+1] = vec[1];\r\n    }\r\n\r\n    return a;\r\n  };\r\n})();\r\n","/**\r\n * @fileoverview gl-matrix - High performance matrix and vector operations\r\n * @author Brandon Jones\r\n * @author Colin MacKenzie IV\r\n * @version 2.4.0\r\n */\r\n\r\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE. */\r\n// END HEADER\r\n\r\nimport * as glMatrix from \"./gl-matrix/common.js\";\r\nimport * as mat2 from \"./gl-matrix/mat2.js\";\r\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\r\nimport * as mat3 from \"./gl-matrix/mat3.js\";\r\nimport * as mat4 from \"./gl-matrix/mat4.js\";\r\nimport * as quat from \"./gl-matrix/quat.js\";\r\nimport * as vec2 from \"./gl-matrix/vec2.js\";\r\nimport * as vec3 from \"./gl-matrix/vec3.js\";\r\nimport * as vec4 from \"./gl-matrix/vec4.js\";\r\n\r\nexport {\r\n  glMatrix,\r\n  mat2, mat2d, mat3, mat4,\r\n  quat,\r\n  vec2, vec3, vec4,\r\n};","import { mat4, vec3 } from 'gl-matrix';\n\n/** An axis aligned bounding box */\nexport class Aabb3 {\n    /**\n     * Note: Aabb3 may change the arguments later.\n     * Clone them before to avoid unintended side-effects.\n     */\n    constructor(\n        public min: vec3 = vec3.fromValues(+Infinity, +Infinity, +Infinity),\n        public max: vec3 = vec3.fromValues(-Infinity, -Infinity, -Infinity)) {\n    }\n\n    /** Transforms this bounding box in place. */\n    transform(matrix: mat4) {\n        const newMin = vec3.fromValues(+Infinity, +Infinity, +Infinity);\n        const newMax = vec3.fromValues(-Infinity, -Infinity, -Infinity);\n        const point = vec3.create();\n\n        const transformPoint = (matrix: mat4) => {\n            vec3.transformMat4(point, point, matrix);\n            vec3.min(newMin, newMin, point);\n            vec3.max(newMax, newMax, point);\n        };\n\n        vec3.set(point, this.min[0], this.min[1], this.min[2]), // 000\n        transformPoint(matrix);\n        vec3.set(point, this.min[0], this.min[1], this.max[2]), // 001\n        transformPoint(matrix);\n        vec3.set(point, this.min[0], this.max[1], this.min[2]), // 010\n        transformPoint(matrix);\n        vec3.set(point, this.min[0], this.max[1], this.max[2]), // 011\n        transformPoint(matrix);\n        vec3.set(point, this.max[0], this.min[1], this.min[2]), // 100\n        transformPoint(matrix);\n        vec3.set(point, this.max[0], this.min[1], this.max[2]), // 101\n        transformPoint(matrix);\n        vec3.set(point, this.max[0], this.max[1], this.min[2]), // 110\n        transformPoint(matrix);\n        vec3.set(point, this.max[0], this.max[1], this.max[2]), // 111\n        transformPoint(matrix);\n\n        this.min = newMin;\n        this.max = newMax;\n    }\n\n    /** The width, height and depth of this box. */\n    get size(): vec3 {\n        return vec3.sub(vec3.create(), this.max, this.min);\n    }\n\n    get center(): vec3 {\n        const center = vec3.create();\n        vec3.add(center, this.min, this.max);\n        return vec3.scale(center, center, 0.5);\n    }\n\n    /** Make this box the union of `this` and `other` and returns `this`  */\n    union(other: Aabb3): Aabb3 {\n        vec3.min(this.min, this.min, other.min);\n        vec3.max(this.max, this.max, other.max);\n        return this;\n    }\n\n    clone() {\n        return new Aabb3(vec3.clone(this.min), vec3.clone(this.max));\n    }\n}\n","\nimport * as gloperate from 'webgl-operate';\n\n\nexport class Cube extends gloperate.Geometry {\n\n    protected static readonly VERTICES = new Float32Array([\n        -1.0, -1.0, +1.0,\n        +1.0, -1.0, +1.0,\n        -1.0, +1.0, +1.0,\n        +1.0, +1.0, +1.0,\n        -1.0, -1.0, -1.0,\n        +1.0, -1.0, -1.0,\n        -1.0, +1.0, -1.0,\n        +1.0, +1.0, -1.0,\n    ]);\n\n    protected static readonly INDICES = new Uint8Array([0, 1, 2, 3, 7, 1, 5, 4, 7, 6, 2, 4, 0, 1]);\n\n\n    /**\n     * Object constructor, requires a context and an identifier.\n     * @param context - Valid context to create the object for.\n     * @param identifier - Meaningful name for identification of this instance.\n     */\n    constructor(context: gloperate.Context, identifier?: string) {\n        super(context, identifier);\n\n        /* Generate identifier from constructor name if none given. */\n        identifier = identifier !== undefined && identifier !== `` ? identifier : this.constructor.name;\n\n        const vertexVBO = new gloperate.Buffer(context, identifier + 'VBO');\n        const indexBuffer = new gloperate.Buffer(context, identifier + 'IndexBuffer');\n        this._buffers.push(vertexVBO);\n        this._buffers.push(indexBuffer);\n    }\n\n\n    /**\n     * Binds the vertex buffer object (VBO) to an attribute binding point of a given, pre-defined index.\n     */\n    protected bindBuffers(indices: Array<GLuint>): void {\n        /* Please note the implicit bind in attribEnable */\n        this._buffers[0].attribEnable(indices[0], 3, this.context.gl.FLOAT, false, 0, 0, true, false);\n        this._buffers[1].bind();\n    }\n\n    /**\n     * Unbinds the vertex buffer object (VBO) and disables the binding point.\n     */\n    protected unbindBuffers(indices: Array<GLuint>): void {\n        /* Please note the implicit unbind in attribEnable is skipped */\n        this._buffers[0].attribDisable(indices[0], true, true);\n        this._buffers[1].unbind();\n    }\n\n\n    /**\n     * Creates the vertex buffer object (VBO) and creates and initializes the buffer's data store.\n     * @param aVertex - Attribute binding point for vertices.\n     */\n    initialize(aVertex: GLuint): boolean {\n        const gl = this.context.gl;\n\n        // TODO: do not bind index to location 4\n        const valid = super.initialize([gl.ARRAY_BUFFER, gl.ELEMENT_ARRAY_BUFFER], [aVertex, 8]);\n\n        gloperate.auxiliaries.assert(this._buffers[0] !== undefined && this._buffers[0].object instanceof WebGLBuffer,\n            `expected valid WebGLBuffer`);\n\n        gloperate.auxiliaries.assert(this._buffers[1] !== undefined && this._buffers[1].object instanceof WebGLBuffer,\n            `expected valid WebGLBuffer`);\n\n        this._buffers[0].data(Cube.VERTICES, gl.STATIC_DRAW);\n        this._buffers[1].data(Cube.INDICES, gl.STATIC_DRAW);\n\n        return valid;\n    }\n\n    /**\n     * Specifies/invokes the draw of this cube.\n     */\n    draw(): void {\n        const gl = this.context.gl;\n        gl.drawElements(gl.TRIANGLE_STRIP, Cube.INDICES.length, gl.UNSIGNED_BYTE, 0);\n    }\n\n}\n","import { Context, Program, Shader } from 'webgl-operate';\n\n/** Standard vertex attrib locations for all semantics in the spec (for WebGL2) */\nexport const ATTRIB_LOCATIONS: { [semantic: string]: number } = {\n    POSITION: 0,\n    NORMAL: 1,\n    TANGENT: 2,\n    TEXCOORD_0: 3,\n    TEXCOORD_1: 4,\n    COLOR_0: 5,\n    JOINTS_0: 6,\n    WEIGHTS_0: 7,\n};\n\n/**\n * Converts a GLTF attribute semantic to the corresponding attribute\n * in the shader\n */\nexport function attribName(semantic: string): string {\n    return `a_${semantic.toLowerCase()}`;\n}\n\nexport enum ShaderFlags {\n    // vertex shader + fragment shader\n    HAS_NORMALS           = 1,\n    HAS_TANGENTS          = 1 << 1,\n    HAS_UV                = 1 << 2,\n    HAS_COLORS            = 1 << 3,\n\n    // fragment shader only\n    USE_IBL               = 1 << 4,\n    HAS_BASECOLORMAP      = 1 << 5,\n    HAS_NORMALMAP         = 1 << 6,\n    HAS_EMISSIVEMAP       = 1 << 7,\n    HAS_METALROUGHNESSMAP = 1 << 8,\n    HAS_OCCLUSIONMAP      = 1 << 9,\n    USE_TEX_LOD           = 1 << 10,\n}\n\n// tslint:disable:variable-name\n// tslint:disable:no-null-keyword\nclass PbrUniformLocations {\n    u_ViewProjection: WebGLUniformLocation | null = null;\n    u_ModelMatrix: WebGLUniformLocation | null = null;\n    u_NormalMatrix: WebGLUniformLocation | null = null;\n    u_Camera: WebGLUniformLocation | null = null;\n\n    u_LightDirection: WebGLUniformLocation | null = null;\n    u_LightColor: WebGLUniformLocation | null = null;\n\n    // TODO!?: ambient light\n    // u_AmbientLightColor: WebGLUniformLocation | null = null;\n    // u_AmbientLightIntensity: WebGLUniformLocation | null = null;\n\n    // TODO!: set when integrating IBL (unused now)\n    // u_DiffuseEnvSampler: WebGLUniformLocation | null = null;\n    // u_SpecularEnvSampler: WebGLUniformLocation | null = null;\n    // u_brdfLUT: WebGLUniformLocation | null = null;\n\n    ///\n\n    u_BaseColorSampler: WebGLUniformLocation | null = null;\n    u_BaseColorFactor: WebGLUniformLocation | null = null;\n\n    u_NormalSampler: WebGLUniformLocation | null = null;\n    u_NormalScale: WebGLUniformLocation | null = null;\n\n    u_EmissiveSampler: WebGLUniformLocation | null = null;\n    u_EmissiveFactor: WebGLUniformLocation | null = null;\n\n    u_MetallicRoughnessSampler: WebGLUniformLocation | null = null;\n    u_MetallicRoughnessValues: WebGLUniformLocation | null = null;\n\n    u_OcclusionSampler: WebGLUniformLocation | null = null;\n    u_OcclusionStrength: WebGLUniformLocation | null = null;\n\n    u_AlphaBlend: WebGLUniformLocation | null = null;\n    u_AlphaCutoff: WebGLUniformLocation | null = null;\n\n    u_PbrFlags: WebGLUniformLocation | null = null;\n\n    // TODO!: use/remove debugging uniforms\n    // debugging flags used for shader output of intermediate PBR variables\n    // u_ScaleDiffBaseMR: WebGLUniformLocation | null = null;\n    // u_ScaleFGDSpec: WebGLUniformLocation | null = null;\n    // u_ScaleIBLAmbient: WebGLUniformLocation | null = null;\n\n    constructor(program: Program) {\n        for (const uniform in this) {\n           (this as any)[uniform] = program.uniform(uniform);\n           if (this[uniform] === null && !uniform.endsWith('Sampler')) {\n               console.warn('Failed to get uniform location for ' + uniform);\n           }\n        }\n\n        program.bind();\n        const gl = program.context.gl;\n        // TODO!: chrome warnings 'there is no texture bound to the unit 1' mostly disappear without the uniform calls..\n        gl.uniform1i(this.u_BaseColorSampler, 0);\n        gl.uniform1i(this.u_NormalSampler, 1);\n        gl.uniform1i(this.u_EmissiveSampler, 2);\n        gl.uniform1i(this.u_MetallicRoughnessSampler, 3);\n        gl.uniform1i(this.u_OcclusionSampler, 4);\n\n        gl.uniform3f(this.u_LightColor, 4.0, 4.0, 4.0);\n        gl.uniform3f(this.u_LightDirection, 0.0, 0.5, 0.5);\n\n        // gl.uniform3f(this.u_AmbientLightColor, 1.0, 1.0, 1.0);\n        // gl.uniformf(this.u_AmbientLightIntensity, 0.2);\n    }\n}\n\n// tslint:disable:max-classes-per-file\nexport class PbrShader {\n    program: Program;\n    /**\n     * WebGL Attrib locations. Equal to `ATTRIB_LOCATIONS` for WebGL2.\n     */\n    attribLocations: {[attr: string]: number} = {};\n\n    uniforms: PbrUniformLocations;\n\n    constructor(context: Context) {\n        const gl = context.gl;\n\n        if (context.isWebGL1) {\n            if (context.supportsShaderTextureLOD) {\n                const _ = context.shaderTextureLOD;\n            } else {\n                throw new Error(`PBR shader needs unsupported extension GL_EXT_shader_texture_lod`);\n            }\n            if (context.supportsStandardDerivatives) {\n                const _ = context.standardDerivatives;\n            } else {\n                throw new Error(`PBR shader needs unsupported extension GL_OES_standard_derivatives`);\n            }\n        }\n\n        const vert = new Shader(context, gl.VERTEX_SHADER, 'pbr-vert.glsl');\n        vert.initialize(require('./shaders/pbr-vert.glsl'));\n        const frag = new Shader(context, gl.FRAGMENT_SHADER, 'pbr-frag.glsl');\n        frag.initialize(require('./shaders/pbr-frag.glsl'));\n        this.program = new Program(context);\n        this.program.initialize([vert, frag]);\n\n        if (context.isWebGL2) {\n            Object.assign(this.attribLocations, ATTRIB_LOCATIONS);\n        } else { // WebGL1\n            for (const semantic of Object.keys(ATTRIB_LOCATIONS)) {\n                const attrib = attribName(semantic);\n                this.attribLocations[semantic] = this.program.attribute(attrib);\n            }\n        }\n\n        this.uniforms = new PbrUniformLocations(this.program);\n    }\n\n    bind() {\n        this.program.bind();\n    }\n    unbind() {\n        this.program.unbind();\n    }\n\n    uninitialize() {\n        this.program.uninitialize();\n    }\n}\n","import { vec3, vec4 } from 'gl-matrix';\nimport { gltf as GLTF } from 'gltf-loader-ts';\nimport { Context, Texture2 } from 'webgl-operate';\nimport { Asset } from './asset';\nimport { PbrShader, ShaderFlags } from './pbrshader';\n\nexport enum AlphaMode { OPAQUE, MASK, BLEND }\n\nexport class Material {\n    context: Context;\n    /** Material name (if none: GLTF index) */\n    name: string;\n\n    // NOTE: all defaults are from the spec\n\n    // pbr_metallic_roughness properties\n    baseColorFactor: vec4 = vec4.fromValues(1, 1, 1, 1);\n    baseColorTexture: Texture2;\n    metallicFactor = 1;\n    roughnessFactor = 1;\n    metallicRoughnessTexture: Texture2;\n\n    normalTexture: Texture2;\n    normalScale: number;\n\n    occlusionTexture: Texture2;\n    occlusionStrength: number;\n    emissiveFactor: vec3 = vec3.fromValues(0, 0, 0);\n    emissiveTexture: Texture2;\n\n    alphaCutoff = 0.5;\n    alphaMode: AlphaMode = AlphaMode.OPAQUE;\n\n    doubleSided = false;\n\n    static async fromGltf(materialIndex: GLTF.GlTfId, asset: Asset): Promise<Material> {\n        const gMaterial = asset.gAsset.gltf.materials![materialIndex];\n        const mat = new Material(asset.context);\n        mat.name = gMaterial.name || materialIndex.toString();\n        const pbr = gMaterial.pbrMetallicRoughness;\n        const texPromises: { [key: string]: Promise<Texture2> | undefined } = {\n            baseColorTexture: undefined,\n            metallicRoghnessTexture: undefined,\n            normalTexture: undefined,\n            occlusionTexture: undefined,\n            emissiveTexture: undefined,\n        };\n        if (pbr) {\n            if (pbr.baseColorFactor) {\n                mat.baseColorFactor = vec4.fromValues.apply(undefined, pbr.baseColorFactor);\n            }\n            if (pbr.baseColorTexture) {\n                texPromises.baseColorTexture = this.loadTexture(pbr.baseColorTexture, asset,\n                    `mat_${mat.name}_baseColorTexture`);\n            }\n            if (pbr.metallicFactor !== undefined) { mat.metallicFactor = pbr.metallicFactor; }\n            if (pbr.roughnessFactor !== undefined) { mat.roughnessFactor = pbr.roughnessFactor; }\n            if (pbr.metallicRoughnessTexture) {\n                texPromises.metallicRoughnessTexture = this.loadTexture(pbr.metallicRoughnessTexture, asset,\n                    `mat_${mat.name}_metallicRoughnessTexture`);\n            }\n        }\n\n        const normalTexInfo = gMaterial.normalTexture;\n        if (normalTexInfo) {\n            texPromises.normalTexture = this.loadTexture(normalTexInfo, asset,\n                `mat_${mat.name}_normalTexture`);\n            mat.normalScale = normalTexInfo.scale || 1;\n        }\n\n        const occTexInfo = gMaterial.occlusionTexture;\n        if (occTexInfo) {\n            texPromises.occlusionTexture = this.loadTexture(occTexInfo, asset,\n                `mat_${mat.name}_occlusionTexture`);\n            mat.occlusionStrength = occTexInfo.strength || 1;\n        }\n\n        if (gMaterial.emissiveTexture) {\n            texPromises.emissiveTexture = this.loadTexture(gMaterial.emissiveTexture, asset,\n                `mat_${mat.name}_emissiveTexture`);\n        }\n        if (gMaterial.emissiveFactor) {\n            mat.emissiveFactor = vec3.fromValues.apply(undefined, gMaterial.emissiveFactor);\n        }\n\n        if (gMaterial.alphaCutoff !== undefined) { mat.alphaCutoff = gMaterial.alphaCutoff; }\n        if (gMaterial.alphaMode) {\n            mat.alphaMode = (AlphaMode as any)[gMaterial.alphaMode];\n        }\n\n        if (gMaterial.doubleSided !== undefined) { mat.doubleSided = gMaterial.doubleSided; }\n\n        await Promise.all((Object as any).values(texPromises));\n        for (const key in texPromises) {\n            (mat as any)[key] = await texPromises[key]; // actually synchronous due to Promise.all above\n        }\n\n        return mat;\n    }\n\n    static async loadTexture(texInfo: GLTF.TextureInfo | GLTF.MaterialNormalTextureInfo,\n            asset: Asset, identifier: string): Promise<Texture2> {\n        const gl = asset.context.gl;\n        const gltf = asset.gAsset.gltf;\n        const texCoord = texInfo.texCoord || 0; // TODO!!: use/handle\n\n        if (asset.textures[texInfo.index]) {\n            return asset.textures[texInfo.index];\n        }\n\n        const texture = gltf.textures![texInfo.index];\n\n        // NOTE: spec allows texture.source to be undefined, unclear why\n        const image = await asset.gAsset.imageData.get(texture.source!);\n        // spec: when undefined, a sampler with repeat wrapping and auto filtering should be used.\n        const sampler: GLTF.Sampler = texture.sampler !== undefined ?\n            gltf.samplers![texture.sampler] :\n            {};\n\n        const tex2 = new Texture2(asset.context, identifier);\n        tex2.initialize(image.width, image.height, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE);\n        tex2.wrap(sampler.wrapS || gl.REPEAT, sampler.wrapT || gl.REPEAT, true, false);\n\n        // **Default Filtering Implementation Note:** When filtering options are defined,\n        // runtime must use them. Otherwise, it is free to adapt filtering to performance or quality goals.\n        const mag = sampler.magFilter || gl.LINEAR;\n        const min = sampler.minFilter || gl.LINEAR_MIPMAP_LINEAR;\n        tex2.filter(mag, min, false, false);\n\n        tex2.data(image, false, false);\n\n        // **Mipmapping Implementation Note**: When a sampler's minification filter (`minFilter`)\n        // uses mipmapping (`NEAREST_MIPMAP_NEAREST`, `NEAREST_MIPMAP_LINEAR`, `LINEAR_MIPMAP_NEAREST`,\n        // or `LINEAR_MIPMAP_LINEAR`), any texture referencing the sampler needs to have mipmaps,\n        // e.g., by calling GL's `generateMipmap()` function.\n        const mipMaps =\n            min === gl.LINEAR_MIPMAP_LINEAR ||\n            min === gl.LINEAR_MIPMAP_NEAREST ||\n            min === gl.NEAREST_MIPMAP_LINEAR ||\n            min === gl.NEAREST_MIPMAP_NEAREST;\n        if (mipMaps) {\n            // TODO!!: fails on WebGL1 for NPOT textures\n            gl.generateMipmap(gl.TEXTURE_2D);\n        }\n\n        // TODO!!: NPOT handling:\n        // **Non-Power-Of-Two Texture Implementation Note**: glTF does not guarantee that a texture's\n        // dimensions are a power-of-two.  At runtime, if a texture's width or height is not a\n        // power-of-two, the texture needs to be resized so its dimensions are powers-of-two if the\n        // `sampler` the texture references\n        // * Has a wrapping mode (either `wrapS` or `wrapT`) equal to `REPEAT` or `MIRRORED_REPEAT`, or\n        // * Has a minification filter (`minFilter`) that uses mipmapping (`NEAREST_MIPMAP_NEAREST`, \\\\\n        //   `NEAREST_MIPMAP_LINEAR`, `LINEAR_MIPMAP_NEAREST`, or `LINEAR_MIPMAP_LINEAR`).\n\n        tex2.unbind();\n\n        asset.textures[texInfo.index] = tex2;\n\n        return tex2;\n    }\n\n    constructor(context: Context) {\n        this.context = context;\n    }\n\n    get shaderFlags(): ShaderFlags {\n        let flags = 0;\n        if (this.baseColorTexture) { flags |= ShaderFlags.HAS_BASECOLORMAP; }\n        if (this.normalTexture) { flags |= ShaderFlags.HAS_NORMALMAP; }\n        if (this.emissiveTexture) { flags |= ShaderFlags.HAS_EMISSIVEMAP; }\n        if (this.metallicRoughnessTexture) { flags |= ShaderFlags.HAS_METALROUGHNESSMAP; }\n        if (this.occlusionTexture) { flags |= ShaderFlags.HAS_OCCLUSIONMAP; }\n\n        return flags;\n    }\n\n    bind(shader: PbrShader) {\n        const gl = this.context.gl;\n        const uniforms = shader.uniforms;\n\n        if (this.doubleSided) {\n            gl.disable(gl.CULL_FACE);\n        } else {\n            gl.enable(gl.CULL_FACE);\n        }\n\n        if (this.alphaMode !== AlphaMode.OPAQUE) {\n            // BLEND + MASK\n            gl.enable(gl.BLEND);\n            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n            gl.uniform1f(uniforms.u_AlphaBlend, 1.0);\n\n            if (this.alphaMode === AlphaMode.MASK) {\n                gl.uniform1f(uniforms.u_AlphaCutoff, this.alphaCutoff);\n            }\n        }\n\n        // TODO!: UBO for 'factors', normalScale?\n        // NOTE: for sampler numbers, see also PbrShader constructor\n        gl.uniform4fv(uniforms.u_BaseColorFactor!, this.baseColorFactor);\n        if (this.baseColorTexture) {\n            this.baseColorTexture.bind(gl.TEXTURE0);\n        }\n        if (this.normalTexture) {\n            this.normalTexture.bind(gl.TEXTURE1);\n            gl.uniform1f(uniforms.u_NormalScale, this.normalScale);\n        }\n        if (this.emissiveTexture) {\n            this.emissiveTexture.bind(gl.TEXTURE2);\n            gl.uniform3fv(uniforms.u_EmissiveFactor!, this.emissiveFactor);\n        }\n        if (this.metallicRoughnessTexture) {\n            this.metallicRoughnessTexture.bind(gl.TEXTURE3);\n        }\n        gl.uniform2f(uniforms.u_MetallicRoughnessValues, this.metallicFactor, this.roughnessFactor);\n        if (this.occlusionTexture) {\n            this.occlusionTexture.bind(gl.TEXTURE4);\n            gl.uniform1f(uniforms.u_OcclusionStrength, this.occlusionStrength);\n        }\n    }\n\n    unbind(shader: PbrShader) {\n        // TODO! what to unbind?\n\n        const gl = this.context.gl;\n        if (this.alphaMode !== AlphaMode.OPAQUE) {\n            gl.disable(gl.BLEND);\n            gl.uniform1f(shader.uniforms.u_AlphaBlend, 0.0);\n            if (this.alphaMode === AlphaMode.MASK) {\n                gl.uniform1f(shader.uniforms.u_AlphaCutoff, 0);\n            }\n        }\n    }\n}\n","module.exports = \"\\nprecision lowp float;\\n\\n\\n#if __VERSION__ == 100\\n    #define texture(sampler, coord) texture2D(sampler, coord)\\n#else \\n    #define varying in\\n#endif\\n\\n\\n\\n#if __VERSION__ == 100\\n    #define fragColor gl_FragColor\\n#else \\n    layout(location = 0) out vec4 fragColor;\\n#endif\\n\\n\\nuniform samplerCube u_background;\\n\\nvarying vec3 v_uv;\\n\\n\\nvoid main(void)\\n{\\n    vec3 uv = (v_uv);\\n    /*\\n    vec3 w3 = abs(fwidth(uv));\\n    float density = sqrt(w3.x * w3.x + w3.y * w3.y + w3.z * w3.z);\\n    density *= 100.0;\\n    vec3 color = texture(background, uv).rgb;\\n    out_color = vec4(mix(vec3(0,0,0), vec3(1,0,0), density), 1.0);\\n    */\\n\\n#if __VERSION__ == 100\\n    vec3 color = textureCube(u_background, normalize(v_uv)).rgb;\\n#else\\n    vec3 color = texture(u_background, normalize(v_uv)).rgb;\\n#endif\\n\\n    fragColor = vec4(color, 1.0);\\n}\\n\"","module.exports = \"\\nprecision lowp float;\\n\\n\\n#if __VERSION__ == 100\\n#else \\n    #define varying out\\n#endif\\n\\n\\n\\n#if __VERSION__ == 100\\n    attribute vec3 a_vertex;\\n#else \\n    layout(location = 0) in vec3 a_vertex;\\n#endif\\n\\n\\nuniform mat4 u_transform;\\nuniform vec3 u_eye;\\n\\nvarying vec3 v_uv;\\n\\n\\nvoid main(void)\\n{\\n    v_uv = a_vertex;\\n\\n    vec4 vertex = u_transform * vec4(a_vertex + u_eye, 1.0);\\n    gl_Position = vertex.xyww;    \\n}\\n\"","\nimport * as gloperate from 'webgl-operate';\n\nimport { Cube } from './cube';\n\n\nexport class Skybox {\n\n    protected _context: gloperate.Context;\n    protected _camera: gloperate.Camera;\n\n    protected _cube: Cube;\n    protected _texture: gloperate.TextureCube;\n\n    protected _program: gloperate.Program;\n    protected _uTransform: WebGLUniformLocation;\n    protected _uEye: WebGLUniformLocation;\n    protected _uBackground: WebGLUniformLocation;\n\n\n    initialize(context: gloperate.Context, camera: gloperate.Camera, texture: gloperate.TextureCube): void {\n        this._context = context;\n        this._camera = camera;\n        this._texture = texture;\n\n        const gl = this._context.gl;\n\n        const vert = new gloperate.Shader(this._context, gl.VERTEX_SHADER, 'skybox.vert');\n        vert.initialize(require('./skybox.vert'));\n        const frag = new gloperate.Shader(this._context, gl.FRAGMENT_SHADER, 'skybox.frag');\n        frag.initialize(require('./skybox.frag'));\n\n        this._program = new gloperate.Program(context);\n        this._program.initialize([vert, frag]);\n\n        this._uTransform = this._program.uniform('u_transform');\n        this._uEye = this._program.uniform('u_eye');\n        this._uBackground = this._program.uniform('u_background');\n\n        this._cube = new Cube(this._context);\n        const aVertex = this._program.attribute('a_vertex', 0);\n        this._cube.initialize(aVertex);\n    }\n\n    uninitialize(): void {\n        this._uTransform = -1;\n        this._uEye = -1;\n        this._uBackground = -1;\n\n        this._program.uninitialize();\n        this._cube.uninitialize();\n    }\n\n    frame(): void {\n        const gl = this._context.gl;\n\n        gl.enable(gl.CULL_FACE);\n        gl.cullFace(gl.FRONT);\n        gl.enable(gl.DEPTH_TEST);\n        gl.depthMask(false);\n        gl.depthFunc(gl.LEQUAL);\n\n        this._program.bind();\n        gl.uniformMatrix4fv(this._uTransform, gl.GL_FALSE, this._camera.viewProjection);\n        gl.uniform3fv(this._uEye, this._camera.eye);\n        gl.uniform1i(this._uBackground, 0);\n\n        this._texture.bind(0);\n        this._cube.bind();\n        this._cube.draw();\n        this._cube.unbind();\n        this._texture.unbind();\n\n        this._program.unbind();\n\n        gl.depthFunc(gl.LESS);\n        gl.depthMask(true);\n        gl.cullFace(gl.BACK);\n        gl.disable(gl.CULL_FACE);\n    }\n\n}\n","module.exports=function(e){var t={};function r(i){if(t[i])return t[i].exports;var s=t[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:i})},r.r=function(e){Object.defineProperty(e,\"__esModule\",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=7)}([function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});t.LoadingManager=class{constructor(){this.urlModifier=void 0,this.onStart=void 0,this.onProgress=void 0,this.onLoad=void 0,this.onError=void 0,this.isLoading=!1,this.itemsLoaded=0,this.itemsTotal=0}itemStart(e){this.itemsTotal++,!this.isLoading&&this.onStart&&this.onStart(e,this.itemsLoaded,this.itemsTotal),this.isLoading=!0}itemEnd(e){this.itemsLoaded++,this.onProgress&&this.onProgress(e,this.itemsLoaded,this.itemsTotal),this.itemsLoaded===this.itemsTotal&&(this.isLoading=!1,this.onLoad&&this.onLoad())}itemError(e){this.onError&&this.onError(e)}resolveURL(e){return this.urlModifier?this.urlModifier(e):e}}},function(e,t,r){\"use strict\";var i=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))(function(s,n){function o(e){try{u(i.next(e))}catch(e){n(e)}}function a(e){try{u(i.throw(e))}catch(e){n(e)}}function u(e){e.done?s(e.value):new r(function(t){t(e.value)}).then(o,a)}u((i=i.apply(e,t||[])).next())})};Object.defineProperty(t,\"__esModule\",{value:!0});const s=r(3),n=r(0);t.GLTF_COMPONENT_TYPE_ARRAYS={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},t.GLTF_ELEMENTS_PER_TYPE={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16};t.GltfAsset=class{constructor(e,t,r,i=new n.LoadingManager){this.gltf=e,this.glbData=r,this.bufferData=new o(this,t,i),this.imageData=new a(this,t,i)}bufferViewData(e){return i(this,void 0,void 0,function*(){if(!this.gltf.bufferViews)throw new Error(\"No buffer views found.\");const t=this.gltf.bufferViews[e],r=yield this.bufferData.get(t.buffer),i=t.byteLength||0,s=t.byteOffset||0,n=r.buffer,o=r.byteOffset;return new Uint8Array(n,o+s,i)})}accessorData(e){return i(this,void 0,void 0,function*(){if(!this.gltf.accessors)throw new Error(\"No accessors views found.\");const r=this.gltf.accessors[e],i=t.GLTF_ELEMENTS_PER_TYPE[r.type];let s;if(void 0!==r.bufferView)s=yield this.bufferViewData(r.bufferView);else{const e=t.GLTF_COMPONENT_TYPE_ARRAYS[r.componentType].BYTES_PER_ELEMENT*i*r.count;s=new Uint8Array(e)}if(r.sparse){const{count:e,indices:n,values:o}=r.sparse;let a=t.GLTF_COMPONENT_TYPE_ARRAYS[n.componentType],u=yield this.bufferViewData(n.bufferView);const f=new a(u.buffer,u.byteOffset+(n.byteOffset||0),e);a=t.GLTF_COMPONENT_TYPE_ARRAYS[r.componentType],u=yield this.bufferViewData(o.bufferView);const c=new a((yield this.bufferViewData(o.bufferView)).buffer,u.byteOffset+(o.byteOffset||0),e*i);r.bufferView&&(s=new Uint8Array(s));const h=new t.GLTF_COMPONENT_TYPE_ARRAYS[r.componentType](s.buffer);for(let t=0;t<e;t++)for(let e=0;e<i;e++)h[i*f[t]+e]=c[i*t+e]}return s})}preFetchAll(){return i(this,void 0,void 0,function*(){return Promise.all([this.bufferData.preFetchAll(),this.imageData.preFetchAll()])})}};class o{constructor(e,t,r){this.bufferCache=[],this.asset=e,this.baseUri=t,this.manager=r,this.loader=new s.FileLoader(r),this.loader.responseType=\"arraybuffer\"}get(e){return i(this,void 0,void 0,function*(){if(void 0!==this.bufferCache[e])return this.bufferCache[e];const t=this.asset.gltf;if(!t.buffers)throw new Error(\"No buffers found.\");const r=t.buffers[e];if(void 0===r.uri){if(0!==e)throw new Error(\"GLB container is required to be the first buffer\");if(void 0===this.asset.glbData)throw new Error(\"invalid gltf: buffer has no uri nor is there a GLB buffer\");return this.asset.glbData.binaryChunk}const i=u(r.uri,this.baseUri),s=yield this.loader.load(i),n=new Uint8Array(s);return this.bufferCache[e]=n,n})}preFetchAll(){return i(this,void 0,void 0,function*(){const e=this.asset.gltf.buffers;return e?Promise.all(e.map((e,t)=>this.get(t))):[]})}}t.BufferData=o;class a{constructor(e,t,r){this.crossOrigin=\"anonymous\",this.imageCache=[],this.asset=e,this.baseUri=t,this.manager=r}get(e){return i(this,void 0,void 0,function*(){if(void 0!==this.imageCache[e])return this.imageCache[e];const t=this.asset.gltf;if(!t.images)throw new Error(\"No images found.\");const r=t.images[e];let i,s=!1;if(void 0!==r.bufferView){const e=yield this.asset.bufferViewData(r.bufferView);s=!0;const t=new Blob([e],{type:r.mimeType});i=URL.createObjectURL(t)}else{if(void 0===r.uri)throw new Error(\"Invalid glTF: image must either have a `uri` or a `bufferView`\");i=this.manager.resolveURL(u(r.uri,this.baseUri))}const n=new Image;return n.crossOrigin=this.crossOrigin,new Promise((t,r)=>{n.onerror=(()=>{r(`Failed to load ${i}`),this.manager.itemEnd(i),this.manager.itemError(i)}),n.onload=(()=>{s&&URL.revokeObjectURL(i),this.imageCache[e]=n,t(n),this.manager.itemEnd(i)}),n.src=i,this.manager.itemStart(i)})})}preFetchAll(){return i(this,void 0,void 0,function*(){const e=this.asset.gltf.images;return e?Promise.all(e.map((e,t)=>this.get(t))):[]})}}function u(e,t){return\"string\"!=typeof e||\"\"===e?\"\":/^(https?:)?\\/\\//i.test(e)?e:/^data:.*,.*$/i.test(e)?e:/^blob:.*$/i.test(e)?e:t+e}t.ImageData=a,t.resolveURL=u},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});t.LoaderUtils=class{static decodeText(e){if(\"undefined\"!=typeof TextDecoder)return(new TextDecoder).decode(e);let t=\"\";for(const r of e)t+=String.fromCharCode(r);return decodeURIComponent(escape(t))}static extractUrlBase(e){const t=e.split(\"/\");return 1===t.length?\"./\":(t.pop(),t.join(\"/\")+\"/\")}}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});t.FileLoader=class{constructor(e){this.runningRequests={},this.manager=e}load(e,t){if(void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e),this.runningRequests[e])return this.runningRequests[e];const r=new Promise((r,i)=>{const s=new XMLHttpRequest;s.open(\"GET\",e,!0);const n=this;s.onload=function(t){const o=this.response;0===this.status?(console.warn(\"FileLoader: HTTP Status 0 received.\"),r(o),n.manager.itemEnd(e)):200===this.status?(r(o),n.manager.itemEnd(e)):(i({status:this.status,statusText:s.statusText}),n.manager.itemEnd(e),n.manager.itemError(e)),delete n.runningRequests[e]},s.onprogress=(e=>{t&&t(e)}),s.onerror=function(t){i({status:this.status,statusText:s.statusText}),n.manager.itemEnd(e),n.manager.itemError(e),delete n.runningRequests[e]},this.responseType&&(s.responseType=this.responseType),this.withCredentials&&(s.withCredentials=this.withCredentials),this.mimeType&&s.overrideMimeType&&s.overrideMimeType(void 0!==this.mimeType?this.mimeType:\"text/plain\");for(const e in this.requestHeaders)s.setRequestHeader(e,this.requestHeaders[e]);s.send(null),this.manager.itemStart(e)});return this.runningRequests[e]=r,r}setRequestHeader(e,t){return this.requestHeaders[e]=t,this}}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0})},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});const i=r(2);t.BINARY_HEADER_MAGIC=\"glTF\";const s=12,n={JSON:1313821514,BIN:5130562};t.GLTFBinaryData=class{constructor(e){const r=new DataView(e,0,s),o=i.LoaderUtils.decodeText(new Uint8Array(e,0,4)),a=r.getUint32(4,!0);if(r.getUint32(8,!0),o!==t.BINARY_HEADER_MAGIC)throw new Error(\"Unsupported glTF-Binary header.\");if(a<2)throw new Error(\"Unsupported legacy binary file detected.\");const u=new DataView(e,s);let f=0;for(;f<u.byteLength;){const t=u.getUint32(f,!0);f+=4;const r=u.getUint32(f,!0);if(f+=4,r===n.JSON){const r=new Uint8Array(e,s+f,t);this.json=i.LoaderUtils.decodeText(r)}else if(r===n.BIN){const r=s+f;this.binaryChunk=new Uint8Array(e,r,t)}f+=t}if(null===this.json)throw new Error(\"glTF-Binary: JSON content not found.\")}}},function(e,t,r){\"use strict\";var i=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))(function(s,n){function o(e){try{u(i.next(e))}catch(e){n(e)}}function a(e){try{u(i.throw(e))}catch(e){n(e)}}function u(e){e.done?s(e.value):new r(function(t){t(e.value)}).then(o,a)}u((i=i.apply(e,t||[])).next())})};function s(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,\"__esModule\",{value:!0});const n=r(3),o=r(5),a=r(1),u=r(2),f=r(0),c=r(4);t.gltf=c,s(r(1)),s(r(0));t.GltfLoader=class{constructor(e){this.manager=e||new f.LoadingManager}load(e,t){return i(this,void 0,void 0,function*(){const r=u.LoaderUtils.extractUrlBase(e),i=new n.FileLoader(this.manager);i.responseType=\"arraybuffer\";const s=yield i.load(e,t);return yield this.parse(s,r)})}loadFromFiles(e){return i(this,void 0,void 0,function*(){let t,r;for(const[i,s]of e)s.name.match(/\\.(gltf|glb)$/)&&(t=s,r=i.replace(s.name,\"\"));if(!t)throw new Error(\"No .gltf or .glb asset found.\");const i=\"string\"==typeof t?t:URL.createObjectURL(t),s=u.LoaderUtils.extractUrlBase(i),n=[];this.manager.urlModifier=(t=>{const i=r+t.replace(s,\"\").replace(/^(\\.?\\/)/,\"\");if(e.has(i)){const t=e.get(i),r=URL.createObjectURL(t);return n.push(r),r}return t});const o=yield this.load(i);return yield o.preFetchAll(),URL.revokeObjectURL(i),n.forEach(URL.revokeObjectURL),o})}parse(e,t){return i(this,void 0,void 0,function*(){let r,i=void 0;r=\"string\"==typeof e?e:u.LoaderUtils.decodeText(new Uint8Array(e,0,4))===o.BINARY_HEADER_MAGIC?(i=new o.GLTFBinaryData(e)).json:u.LoaderUtils.decodeText(new Uint8Array(e));const s=JSON.parse(r);if(void 0===s.asset||s.asset.version[0]<2)throw new Error(\"Unsupported asset. glTF versions >=2.0 are supported.\");return new a.GltfAsset(s,t,i,this.manager)})}}},function(e,t,r){e.exports=r(6)}]);\n//# sourceMappingURL=gltf-loader.js.map","import { mat4, vec3 } from 'gl-matrix';\nimport { BlitPass, Camera, Context, DefaultFramebuffer,\n    Framebuffer, Invalidate, MouseEventProvider, Navigation, Program,\n    Renderbuffer, Renderer, Shader, Texture2, TextureCube, Wizard } from 'webgl-operate';\nimport { Skybox } from '../camera-navigation/skybox';\nimport { PbrShader } from './pbrshader';\nimport { Scene } from './scene';\n\nexport class GltfRenderer extends Renderer {\n    // FBO and Blit\n    protected _defaultFBO: DefaultFramebuffer;\n    protected _colorRenderTexture: Texture2;\n    protected _depthRenderbuffer: Renderbuffer;\n    protected _intermediateFBO: Framebuffer;\n    protected _blit: BlitPass;\n\n    protected pbrShader: PbrShader;\n\n    // Camera and navigation\n    protected _camera: Camera;\n    protected _navigation: Navigation;\n\n    // SkyBox\n    protected _cubeMap: TextureCube;\n    protected _skyBox: Skybox;\n    protected _cubeMapChanged: boolean;\n\n    protected _scene: Scene;\n    protected _sceneChanged: boolean;\n    set scene(scene: Scene) {\n        if (this._scene) {\n            this._scene.uninitialize();\n        }\n        this._scene = scene;\n        this._sceneChanged = true;\n\n        this.setCameraFromBounds();\n\n        // TODO!!: hack? (_sceneChanged doesn't work...)\n        this.invalidate();\n    }\n\n    get context() {\n        return this._context;\n    }\n\n    protected onInitialize(\n        context: Context,\n        callback: Invalidate,\n        mouseEventProvider: MouseEventProvider): boolean {\n\n        const gl = this._context.gl;\n        const gl2facade = this._context.gl2facade;\n\n        this.pbrShader = new PbrShader(context);\n\n        // Initialize camera\n        this._camera = new Camera();\n        this._camera.center = vec3.fromValues(0.0, 0.0, 0.0);\n        this._camera.up = vec3.fromValues(0.0, 1.0, 0.0);\n        this._camera.eye = vec3.fromValues(0.0, 0.0, 3.0);\n        this._camera.near = 0.1;\n        this._camera.far = 20.0;\n\n        // Initialize navigation\n        this._navigation = new Navigation(callback, mouseEventProvider);\n        this._navigation.camera = this._camera;\n\n        // Initialize FBO & BlitPass\n        this._defaultFBO = new DefaultFramebuffer(this._context, 'DefaultFBO');\n        this._defaultFBO.initialize();\n        this._colorRenderTexture = new Texture2(this._context, 'ColorRenderTexture');\n        this._colorRenderTexture.initialize(480, 270,\n            this._context.isWebGL2 ? gl.RGBA8 : gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE);\n        this._depthRenderbuffer = new Renderbuffer(this._context, 'DepthRenderbuffer');\n        this._depthRenderbuffer.initialize(480, 270, gl.DEPTH_COMPONENT16);\n        this._intermediateFBO = new Framebuffer(this._context, 'IntermediateFBO');\n        this._intermediateFBO.initialize([[gl2facade.COLOR_ATTACHMENT0, this._colorRenderTexture]\n            , [gl.DEPTH_ATTACHMENT, this._depthRenderbuffer]]);\n        this._blit = new BlitPass(this._context);\n        this._blit.initialize();\n        this._blit.framebuffer = this._intermediateFBO;\n        this._blit.readBuffer = gl2facade.COLOR_ATTACHMENT0;\n        this._blit.drawBuffer = gl.BACK;\n        this._blit.target = this._defaultFBO;\n\n        gl.enable(gl.DEPTH_TEST);\n\n        // Initialize skyBox\n\n        const internalFormatAndType = Wizard.queryInternalTextureFormat(this._context, gl.RGB, 'byte');\n        this._cubeMap = new TextureCube(this._context);\n        this._cubeMap.initialize(512, internalFormatAndType[0], gl.RGB, internalFormatAndType[1]);\n\n        this._skyBox = new Skybox();\n        this._skyBox.initialize(this._context, this._camera, this._cubeMap);\n\n        this._cubeMap.load({\n            positiveX: 'data/skybox.px.png', negativeX: 'data/skybox.nx.png',\n            positiveY: 'data/skybox.py.png', negativeY: 'data/skybox.ny.png',\n            positiveZ: 'data/skybox.pz.png', negativeZ: 'data/skybox.nz.png',\n        }).then(() => this.invalidate(true));\n\n        setTimeout(() => {\n            this.clearColor = [0.1, 0.2, 0.3, 1.0];\n        }, 0);\n\n        return true;\n    }\n\n    protected onUninitialize(): void {\n        this._scene.uninitialize();\n        this.pbrShader.uninitialize();\n\n        this._intermediateFBO.uninitialize();\n        this._defaultFBO.uninitialize();\n        this._colorRenderTexture.uninitialize();\n        this._depthRenderbuffer.uninitialize();\n        this._blit.uninitialize();\n\n        this._skyBox.uninitialize();\n    }\n\n    protected onUpdate(): boolean {\n        // Resize\n        if (this._altered.frameSize) {\n            this._intermediateFBO.resize(this._frameSize[0], this._frameSize[1]);\n            this._camera.viewport = [this._frameSize[0], this._frameSize[1]];\n        }\n        if (this._altered.canvasSize) {\n            this._camera.aspect = this._canvasSize[0] / this._canvasSize[1];\n        }\n\n        // Update clear color\n        if (this._altered.clearColor) {\n            this._intermediateFBO.clearColor(this._clearColor);\n        }\n\n        this._navigation.update();\n\n        // Reset state\n        const altered = this._altered.any ||\n            this._camera.altered ||\n            this._cubeMapChanged ||\n            this._sceneChanged;\n        this._altered.reset();\n        this._camera.altered = false;\n        this._cubeMapChanged = false;\n        this._sceneChanged = false;\n\n        // If anything has changed, render a new frame\n        return altered;\n    }\n\n    protected onPrepare(): void { }\n\n    protected onFrame(frameNumber: number): void {\n        const gl = this._context.gl;\n\n        // Bind FBO\n        this._intermediateFBO.bind();\n        this._intermediateFBO.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT, false, false);\n\n        // Set viewport\n        gl.viewport(0, 0, this._frameSize[0], this._frameSize[1]);\n\n        this.pbrShader.bind();\n        // TODO!: only set when changed?\n        gl.uniformMatrix4fv(this.pbrShader.uniforms.u_ViewProjection, false, this._camera.viewProjection);\n        gl.uniform3fv(this.pbrShader.uniforms.u_Camera, this._camera.eye);\n\n        if (this._scene) {\n            this._scene.draw(this._camera, this.pbrShader);\n        }\n\n        this.pbrShader.unbind();\n\n        // // Render skybox\n        // this._skyBox.frame();\n\n        // Unbind FBO\n        this._intermediateFBO.unbind();\n    }\n    protected onSwap(): void {\n         // Blit into framebuffer\n         this._blit.frame();\n         this.invalidate(); // TODO!: why?\n    }\n\n    protected setCameraFromBounds() {\n        const bounds = this._scene.bounds;\n        const size = vec3.len(bounds.size);\n        const center = bounds.center;\n\n        this._camera.eye = vec3.fromValues(\n            center[0] + size / 1.5,\n            center[1] + size / 5.0,\n            center[2] + size / 1.5,\n        );\n        this._camera.center = center;\n        this._camera.far = size * 20;\n        this._camera.near = size / 100;\n    }\n}\n","import { mat3, mat4, quat, vec3 } from 'gl-matrix';\nimport { gltf as GLTF } from 'gltf-loader-ts';\nimport { Camera, Context, Program } from 'webgl-operate';\n\nimport { Aabb3 } from './aabb3';\nimport { Asset } from './asset';\nimport { Mesh } from './mesh';\nimport { PbrShader } from './pbrshader';\n\nexport class Node {\n    context: Context;\n    mesh: Mesh | undefined;\n    children: Node[] = [];\n\n    // a node can eiter have a matrix, or T,R,S properties\n    matrix: mat4 | undefined;\n    translation: vec3 | undefined;\n    rotation: quat | undefined;\n    scale: vec3 | undefined;\n    // TODO: weights\n    // TODO!: camera\n    // camera: Camera;\n    name: string ;\n\n    finalTransform: mat4 = mat4.create();\n    normalMatrix: mat3 = mat3.create();\n    bounds: Aabb3;\n\n    static async fromGltf(gNode: GLTF.Node, asset: Asset): Promise<Node> {\n        const node = new Node();\n        node.name = gNode.name;\n        node.context = asset.context;\n\n        if (gNode.matrix !== undefined) {\n            node.matrix = mat4.fromValues.apply(undefined, gNode.matrix);\n        } else if (gNode.translation || gNode.rotation || gNode.scale) {\n            node.translation = gNode.translation ?\n                vec3.fromValues.apply(undefined, gNode.translation) :\n                vec3.create();\n\n            node.rotation = gNode.rotation ?\n                quat.fromValues.apply(undefined, gNode.rotation) :\n                quat.create();\n\n            node.scale = gNode.scale ?\n                vec3.fromValues.apply(undefined, gNode.scale) :\n                vec3.fromValues(1, 1, 1);\n        } else {\n            node.matrix = mat4.create();\n        }\n\n        // NOTE: no waiting on mesh and children in parallel because generally\n        // only one of them exists on a node\n        if (gNode.mesh !== undefined) {\n            node.mesh = await asset.getMesh(gNode.mesh);\n        }\n\n        if (gNode.children) {\n            node.children = await Promise.all(gNode.children.map((i) => {\n                return Node.fromGltf(asset.gAsset.gltf.nodes![i], asset);\n            }));\n        }\n\n        // TODO!!: camera\n\n        return node;\n    }\n\n    updateTransform(parentTransform: mat4) {\n        this.finalTransform = mat4.clone(parentTransform);\n\n        if (this.matrix) {\n            mat4.mul(this.finalTransform, this.finalTransform, this.matrix);\n        } else {\n            const m = mat4.fromRotationTranslationScale(mat4.create(), this.rotation!, this.translation!, this.scale!);\n            mat4.mul(this.finalTransform, this.finalTransform, m);\n        }\n\n        mat3.normalFromMat4(this.normalMatrix, this.finalTransform);\n\n        for (const node of this.children) {\n            node.updateTransform(this.finalTransform);\n        }\n    }\n\n    updateBounds() {\n        if (this.mesh) {\n            this.bounds = this.mesh.bounds.clone();\n            this.bounds.transform(this.finalTransform);\n        } else if (this.children.length === 0) {\n            // Cameras (others?) have neither mesh nor children. Their position is the origin\n            // TODO!: are there other cases? Do bounds matter for cameras?\n            this.bounds = new Aabb3(vec3.fromValues(0, 0, 0), vec3.fromValues(0, 0, 0));\n            this.bounds.transform(this.finalTransform);\n        } else {\n            // TODO!: mesh AND children?\n            this.bounds = new Aabb3();\n            for (const node of this.children) {\n                node.updateBounds();\n                this.bounds.union(node.bounds);\n            }\n        }\n    }\n\n    uninitialize() {\n        if (this.mesh) {\n            this.mesh.uninitialize();\n        }\n        for (const node of this.children) {\n            node.uninitialize();\n        }\n    }\n}\n","import { mat4 } from 'gl-matrix';\nimport { gltf as GLTF } from 'gltf-loader-ts';\nimport { Camera, Context, Program } from 'webgl-operate';\n\nimport { Aabb3 } from './aabb3';\nimport { Asset } from './asset';\nimport { AlphaMode, Material } from './material';\nimport { Node } from './node';\nimport { PbrShader } from './pbrshader';\nimport { Primitive } from './primitive';\n\ninterface RenderBatch {\n    node: Node;\n    primitive: Primitive;\n}\n\nexport class Scene {\n    context: Context;\n    name: string;\n    /** all nodes */\n    nodes: Node[] = [];\n    rootNodes: Node[];\n    batchesByMaterial: Map<Material, RenderBatch[]> = new Map();\n    /** First opaque materials, then (semi)transparent ones */\n    sortedMaterials: Material[];\n    bounds: Aabb3 = new Aabb3();\n\n    static async fromGltf(gScene: GLTF.Scene, asset: Asset): Promise<Scene> {\n        const scene = new Scene();\n        scene.context = asset.context;\n        scene.name = gScene.name;\n        scene.rootNodes = await Promise.all(gScene.nodes!.map((i) => {\n            const gNode = asset.gAsset.gltf.nodes![i];\n            return Node.fromGltf(gNode, asset);\n        }));\n\n        // propagate transforms\n        const rootTransform = mat4.create(); // identity\n        for (const node of scene.rootNodes) {\n            node.updateTransform(rootTransform);\n            node.updateBounds();\n            scene.bounds.union(node.bounds);\n        }\n\n        // gather all nodes\n        for (const rootNode of scene.rootNodes) {\n            scene.nodes.push(rootNode);\n            const stack = [rootNode];\n            while (stack.length > 0) {\n                const node = stack.pop()!;\n                scene.nodes.push(node);\n                stack.push.apply(stack, node.children);\n            }\n        }\n\n        // gather primitives by material for batched drawing\n        for (const node of scene.nodes) {\n            if (node.mesh === undefined) { continue; }\n            for (const primitive of node.mesh.primitives) {\n                const mat = primitive.material;\n                const batches = scene.batchesByMaterial.get(mat) || [];\n                if (batches.length === 0) { scene.batchesByMaterial.set(mat, batches); }\n                batches.push({node, primitive});\n            }\n        }\n\n        const materials = Array.from(scene.batchesByMaterial.keys());\n        const opaqueMaterials = materials.filter((m) => m.alphaMode === AlphaMode.OPAQUE);\n        const transparentMaterials = materials.filter((m) => m.alphaMode !== AlphaMode.OPAQUE);\n        scene.sortedMaterials = opaqueMaterials.concat(transparentMaterials);\n\n        return scene;\n    }\n\n    draw(camera: Camera, shader: PbrShader) {\n        const gl = this.context.gl;\n        shader.bind();\n        for (const material of this.sortedMaterials) {\n            const batches = this.batchesByMaterial.get(material)!;\n            material.bind(shader);\n            for (const {primitive, node} of batches) {\n                gl.uniformMatrix4fv(shader.uniforms.u_ModelMatrix, gl.FALSE, node.finalTransform);\n                gl.uniformMatrix3fv(shader.uniforms.u_NormalMatrix, gl.FALSE, node.normalMatrix);\n                primitive.draw(shader);\n            }\n            material.unbind(shader);\n        }\n        shader.unbind();\n    }\n\n    uninitialize() {\n        for (const node of this.rootNodes) {\n            node.uninitialize();\n        }\n    }\n}\n","import { auxiliaries, Buffer, Context, VertexArray } from 'webgl-operate';\nconst assert = auxiliaries.assert;\n\nimport { vec3 } from 'gl-matrix';\nimport { gltf as GLTF, GLTF_ELEMENTS_PER_TYPE, GltfAsset } from 'gltf-loader-ts';\nimport { Aabb3 } from './aabb3';\nimport { Asset } from './asset';\nimport { Material } from './material';\nimport { ATTRIB_LOCATIONS, PbrShader, ShaderFlags } from './pbrshader';\n// import { Bindable } from 'webgl-operate/lib/bindable';\n// import { Initializable } from 'webgl-operate/lib/initializable';\n\n// tslint:disable:max-classes-per-file\n\n/** Data needed for `gl.vertexAttribPointer` */\nclass VertexAttribute {\n    static fromGltf(accessor: GLTF.Accessor, byteStride: number | undefined, buffer: Buffer) {\n        return new VertexAttribute(\n            buffer,\n            GLTF_ELEMENTS_PER_TYPE[accessor.type],\n            accessor.componentType,\n            accessor.normalized || false,\n            byteStride || 0,\n            accessor.byteOffset || 0,\n        );\n    }\n\n    constructor(\n        public buffer: Buffer,\n        private size: GLint,\n        private type: GLenum,\n        private normalized: boolean,\n        private stride: GLsizei,\n        private offset: GLintptr,\n    ) {}\n\n    enable(index: GLuint) {\n        this.buffer.attribEnable(\n            index,\n            this.size,\n            this.type,\n            this.normalized,\n            this.stride,\n            this.offset,\n            true, // TODO!: param?\n            false,\n        );\n    }\n\n    disable(index: GLuint) {\n        this.buffer.attribDisable(index, true, true); // TODO!: param?\n    }\n}\n\n// TODO!: Initializable, Bindable not exported...\nexport class Primitive /*extends Initializable implements Bindable*/ {\n    private identifier: string;\n    private vertexArray: VertexArray;\n    /** Vertex attributes. Keys match the attribute semantic property names from glTF. */\n    private attributes: { [semantic: string]: VertexAttribute } = {};\n    private numVertices: number;\n\n    private indexBuffer: Buffer;\n    private numIndices: number;\n    private indexType: GLenum;\n    private indexByteOffset: number;\n\n    /** POINTS / LINES / TRIANGLES etc. */\n    private mode: GLenum;\n\n    private shaderFlags: ShaderFlags;\n    /** Currently active shader */\n    private shader: PbrShader | undefined;\n\n    private drawCall: () => void;\n\n    public material: Material;\n    public bounds: Aabb3;\n\n    static async fromGltf(gPrimitive: GLTF.MeshPrimitive, asset: Asset, identifier?: string): Promise<Primitive> {\n        const prim = new Primitive(asset.context, identifier);\n        prim.mode = gPrimitive.mode || 4; // TRIANGLES (= default in spec)\n\n        const context = asset.context;\n        const gl = prim.context.gl;\n        const gAsset = asset.gAsset;\n        const gltf = gAsset.gltf;\n        assert(gPrimitive.attributes.POSITION !== undefined, 'primitives must have the POSITION attribute');\n        if (gltf.bufferViews === undefined) { throw new Error('invalid gltf'); }\n\n        const buffersByView: {[bufferView: number]: Buffer} = {};\n        for (const semantic in gPrimitive.attributes) {\n            const accessorIndex = gPrimitive.attributes[semantic];\n            const accessor = gltf.accessors![accessorIndex];\n            prim.numVertices = accessor.count;\n            const bufferViewIndex = accessor.bufferView;\n\n            let buffer;\n            let byteStride;\n            if (bufferViewIndex !== undefined && bufferViewIndex in buffersByView) {\n                buffer = buffersByView[bufferViewIndex];\n                byteStride = gltf.bufferViews[bufferViewIndex].byteStride;\n            } else {\n                const bufferViewData = await gAsset.accessorData(accessorIndex);\n                buffer = new Buffer(prim.context, `${prim.identifier}_VBO_${Object.keys(buffersByView).length}`);\n                buffer.initialize(gl.ARRAY_BUFFER);\n                buffer.data(bufferViewData, gl.STATIC_DRAW);\n                if (bufferViewIndex !== undefined) {\n                    buffersByView[bufferViewIndex] = buffer;\n                    byteStride = gltf.bufferViews[bufferViewIndex].byteStride;\n                }\n            }\n\n            prim.attributes[semantic] = VertexAttribute.fromGltf(accessor, byteStride, buffer);\n            if (semantic === 'POSITION') {\n                prim.bounds = new Aabb3(\n                    vec3.fromValues.apply(undefined, accessor.min!),\n                    vec3.fromValues.apply(undefined, accessor.max!),\n                );\n            }\n        }\n\n        let shaderFlags: ShaderFlags = 0;\n        if (gPrimitive.attributes.NORMAL !== undefined) { shaderFlags |= ShaderFlags.HAS_NORMALS; }\n        if (gPrimitive.attributes.TANGENT !== undefined) { shaderFlags |= ShaderFlags.HAS_TANGENTS; }\n        if (gPrimitive.attributes.TEXCOORD_0 !== undefined) { shaderFlags |= ShaderFlags.HAS_UV; }\n        if (gPrimitive.attributes.COLOR_0 !== undefined) { shaderFlags |= ShaderFlags.HAS_COLORS; }\n\n        if (gPrimitive.indices !== undefined) {\n            const indexAccessor = gltf.accessors![gPrimitive.indices];\n            const indexBufferData = await gAsset.accessorData(gPrimitive.indices);\n            prim.indexBuffer = new Buffer(prim.context, `${prim.identifier}_EBO`);\n            prim.numIndices = indexAccessor.count;\n            prim.indexByteOffset = indexAccessor.byteOffset || 0;\n            prim.indexType = indexAccessor.componentType;\n            if (prim.indexType === gl.UNSIGNED_INT && context.isWebGL1) {\n                if (context.supportsElementIndexUint) {\n                    const _ = context.elementIndexUint; // activate extension\n                } else {\n                    throw new Error(`Primitive ${prim.identifier} needs unsupported extension OES_element_index_uint`);\n                }\n            }\n\n            prim.indexBuffer.initialize(gl.ELEMENT_ARRAY_BUFFER);\n            prim.indexBuffer.data(indexBufferData, gl.STATIC_DRAW);\n\n            auxiliaries.assert(prim.indexBuffer !== undefined &&\n                prim.indexBuffer.object instanceof WebGLBuffer,\n                `expected valid WebGLBuffer`);\n        }\n\n        if (gPrimitive.material === undefined) {\n            // The default material, used when a mesh does not specify a material,\n            // is defined to be a material with no properties specified.\n            // All the default values of material apply.\n            prim.material = new Material(context);\n            prim.material.name = 'DefaultMaterial';\n        } else {\n            prim.material = await asset.getMaterial(gPrimitive.material);\n        }\n        prim.shaderFlags = shaderFlags | prim.material.shaderFlags;\n        prim.initialize();\n        return prim;\n    }\n\n    constructor(context: Context, identifier: string | undefined = 'Primitive') {\n        // super();\n\n        this.identifier = identifier;\n        this.vertexArray = new VertexArray(context, identifier + '_VAO');\n    }\n\n    protected bindBuffers(): void {\n        for (const semantic in this.attributes) {\n            const location = this.shader!.attribLocations[semantic];\n            if (location === undefined || location === -1) { continue; }\n            this.attributes[semantic].enable(location);\n        }\n\n        if (this.numIndices) { this.indexBuffer.bind(); }\n    }\n\n    protected unbindBuffers(): void {\n        for (const semantic in this.attributes) {\n            const location = this.shader!.attribLocations[semantic];\n            if (location === undefined || location === -1) { continue; }\n            this.attributes[semantic].disable(location);\n        }\n        if (this.numIndices) { this.indexBuffer.unbind(); }\n    }\n\n    public initialize(...args: any[]): boolean {\n        const gl = this.context.gl;\n        if (this.numIndices) {\n            this.drawCall = () => {\n                gl.drawElements(this.mode, this.numIndices, this.indexType, this.indexByteOffset);\n            };\n        } else {\n            this.drawCall = () => {\n                gl.drawArrays(this.mode, 0, this.numVertices);\n            };\n        }\n\n        this.vertexArray.initialize(() => this.bindBuffers(), () => this.unbindBuffers());\n        return this.vertexArray.valid;\n    }\n\n    uninitialize(): void {\n        this.vertexArray.uninitialize();\n        for (const semantic in this.attributes) {\n            const buffer = this.attributes[semantic].buffer;\n            if (buffer.initialized) {\n                buffer.uninitialize();\n            }\n        }\n        if (this.indexBuffer) {\n            this.indexBuffer.uninitialize();\n        }\n    }\n\n    draw(shader: PbrShader): void {\n        this.shader = shader;\n        this.context.gl.uniform1i(shader.uniforms.u_PbrFlags, this.shaderFlags);\n        this.vertexArray.bind();\n        this.drawCall();\n        this.vertexArray.unbind();\n        this.shader = undefined;\n    }\n\n    get context(): Context {\n        return this.vertexArray.context;\n    }\n}\n","import { mat4, vec3 } from 'gl-matrix';\nimport { gltf as GLTF } from 'gltf-loader-ts';\nimport { Context, Program } from 'webgl-operate';\n\nimport { Aabb3 } from './aabb3';\nimport { Asset } from './asset';\nimport { PbrShader } from './pbrshader';\nimport { Primitive } from './primitive';\n\nexport class Mesh {\n    context: Context;\n    primitives: Primitive[];\n    // TODO: weights\n    name: string;\n    bounds: Aabb3 = new Aabb3();\n\n    static async fromGltf(meshIndex: GLTF.GlTfId, asset: Asset): Promise<Mesh> {\n        const gMesh = asset.gAsset.gltf.meshes![meshIndex];\n        const mesh = new Mesh();\n        mesh.context = asset.context;\n        mesh.name = gMesh.name;\n        mesh.primitives = await Promise.all(gMesh.primitives.map((gPrim, i) => {\n            const identifier = `mesh_${gMesh.name || meshIndex}_prim_${i}`;\n            return Primitive.fromGltf(gPrim, asset, identifier);\n        }));\n\n        for (const primitive of mesh.primitives) {\n            mesh.bounds.union(primitive.bounds);\n        }\n\n        return mesh;\n    }\n\n    uninitialize() {\n        for (const primitive of this.primitives) {\n            primitive.uninitialize();\n        }\n    }\n}\n","module.exports = \"// Originally taken from https://github.com/KhronosGroup/glTF-WebGL-PBR\\n// Commit c28b5b8f5a83380857ad8395ac5302594ecc13ae\\n//\\n// This fragment shader defines a reference implementation for Physically Based Shading of\\n// a microfacet surface material defined by a glTF model.\\n//\\n// References:\\n// [1] Real Shading in Unreal Engine 4\\n//     http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\\n// [2] Physically Based Shading at Disney\\n//     http://blog.selfshadow.com/publications/s2012-shading-course/burley/s2012_pbs_disney_brdf_notes_v3.pdf\\n// [3] README.md - Environment Maps\\n//     https://github.com/KhronosGroup/glTF-WebGL-PBR/#environment-maps\\n// [4] \\\"An Inexpensive BRDF Model for Physically based Rendering\\\" by Christophe Schlick\\n//     https://www.cs.virginia.edu/~jdl/bib/appearance/analytic%20models/schlick94b.pdf\\n\\nprecision highp float;\\n\\n#if __VERSION__ == 100\\n    #extension GL_EXT_shader_texture_lod: enable\\n    #extension GL_OES_standard_derivatives : enable\\n    #define fragColor gl_FragColor\\n    #define texture( texture2D(\\n#else\\n    #define varying in\\n    layout(location = 0) out vec4 fragColor;\\n#endif\\n\\n// vertex shader + fragment shader\\nconst int HAS_NORMALS           = 1;\\nconst int HAS_TANGENTS          = 1 << 1;\\nconst int HAS_UV                = 1 << 2;\\nconst int HAS_COLORS            = 1 << 3;\\n\\n// fragment shader only\\nconst int USE_IBL               = 1 << 4;\\nconst int HAS_BASECOLORMAP      = 1 << 5;\\nconst int HAS_NORMALMAP         = 1 << 6;\\nconst int HAS_EMISSIVEMAP       = 1 << 7;\\nconst int HAS_METALROUGHNESSMAP = 1 << 8;\\nconst int HAS_OCCLUSIONMAP      = 1 << 9;\\nconst int USE_TEX_LOD           = 1 << 10;\\n\\nuniform vec3 u_LightDirection;\\nuniform vec3 u_LightColor;\\n\\n// TODO!? ambient light (see gltf-viewer)\\n\\n#ifdef USE_IBL\\nuniform samplerCube u_DiffuseEnvSampler;\\nuniform samplerCube u_SpecularEnvSampler;\\nuniform sampler2D u_brdfLUT;\\n#endif\\n\\nuniform mediump int u_PbrFlags;\\nuniform sampler2D u_BaseColorSampler;\\nuniform sampler2D u_NormalSampler;\\nuniform float u_NormalScale;\\nuniform sampler2D u_EmissiveSampler;\\nuniform vec3 u_EmissiveFactor;\\nuniform sampler2D u_MetallicRoughnessSampler;\\nuniform sampler2D u_OcclusionSampler;\\nuniform float u_OcclusionStrength;\\n\\nuniform vec2 u_MetallicRoughnessValues;\\nuniform vec4 u_BaseColorFactor;\\n\\nuniform vec3 u_Camera;\\n\\nuniform float u_AlphaBlend;\\nuniform float u_AlphaCutoff;\\n\\n// // debugging flags used for shader output of intermediate PBR variables\\n// uniform vec4 u_ScaleDiffBaseMR;\\n// uniform vec4 u_ScaleFGDSpec;\\n// uniform vec4 u_ScaleIBLAmbient;\\n\\nvarying vec3 v_Position;\\nvarying vec2 v_UV;\\nvarying vec4 v_Color;\\nvarying mat3 v_TBN;\\nvarying vec3 v_Normal;\\n\\n// Encapsulate the various inputs used by the various functions in the shading equation\\n// We store values in this struct to simplify the integration of alternative implementations\\n// of the shading terms, outlined in the Readme.MD Appendix.\\nstruct PBRInfo\\n{\\n    float NdotL;                  // cos angle between normal and light direction\\n    float NdotV;                  // cos angle between normal and view direction\\n    float NdotH;                  // cos angle between normal and half vector\\n    float LdotH;                  // cos angle between light direction and half vector\\n    float VdotH;                  // cos angle between view direction and half vector\\n    float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)\\n    float metalness;              // metallic value at the surface\\n    vec3 reflectance0;            // full reflectance color (normal incidence angle)\\n    vec3 reflectance90;           // reflectance color at grazing angle\\n    float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])\\n    vec3 diffuseColor;            // color contribution from diffuse lighting\\n    vec3 specularColor;           // color contribution from specular lighting\\n};\\n\\nconst float M_PI = 3.141592653589793;\\nconst float c_MinRoughness = 0.04;\\n\\nvec4 SRGBtoLINEAR(vec4 srgbIn)\\n{\\n    #ifdef MANUAL_SRGB\\n    #ifdef SRGB_FAST_APPROXIMATION\\n    vec3 linOut = pow(srgbIn.xyz,vec3(2.2));\\n    #else //SRGB_FAST_APPROXIMATION\\n    vec3 bLess = step(vec3(0.04045),srgbIn.xyz);\\n    vec3 linOut = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );\\n    #endif //SRGB_FAST_APPROXIMATION\\n    return vec4(linOut,srgbIn.w);;\\n    #else //MANUAL_SRGB\\n    return srgbIn;\\n    #endif //MANUAL_SRGB\\n}\\n\\nbool checkFlag(int flag) {\\n    return (u_PbrFlags & flag) == flag;\\n}\\n\\n// Find the normal for this fragment, pulling either from a predefined normal map\\n// or from the interpolated mesh normal and tangent attributes.\\nvec3 getNormal()\\n{\\n    // Retrieve the tangent space matrix\\n    mat3 tbn;\\nif (!checkFlag(HAS_TANGENTS)) {\\n    vec3 pos_dx = dFdx(v_Position);\\n    vec3 pos_dy = dFdy(v_Position);\\n    vec3 tex_dx = dFdx(vec3(v_UV, 0.0));\\n    vec3 tex_dy = dFdy(vec3(v_UV, 0.0));\\n    vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\\n\\n    vec3 ng;\\nif (checkFlag(HAS_NORMALS))\\n    ng = normalize(v_Normal);\\nelse\\n    ng = cross(pos_dx, pos_dy);\\n\\n    t = normalize(t - ng * dot(ng, t));\\n    vec3 b = normalize(cross(ng, t));\\n    tbn = mat3(t, b, ng);\\n} else { // HAS_TANGENTS\\n    tbn = v_TBN;\\n}\\n\\n    vec3 n;\\nif (checkFlag(HAS_NORMALMAP)) {\\n    n = texture(u_NormalSampler, v_UV).rgb;\\n    n = normalize(tbn * ((2.0 * n - 1.0) * vec3(u_NormalScale, u_NormalScale, 1.0)));\\n} else {\\n    // The tbn matrix is linearly interpolated, so we need to re-normalize\\n    n = normalize(tbn[2].xyz);\\n}\\n\\n    // reverse backface normals\\n    n *= (2.0 * float(gl_FrontFacing) - 1.0);\\n\\n    return n;\\n}\\n\\n#ifdef USE_IBL\\n// Calculation of the lighting contribution from an optional Image Based Light source.\\n// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].\\n// See our README.md on Environment Maps [3] for additional discussion.\\nvec3 getIBLContribution(PBRInfo pbrInputs, vec3 n, vec3 reflection)\\n{\\n    float mipCount = 9.0; // resolution of 512x512\\n    float lod = (pbrInputs.perceptualRoughness * mipCount);\\n    // retrieve a scale and bias to F0. See [1], Figure 3\\n    vec3 brdf = SRGBtoLINEAR(texture(u_brdfLUT, vec2(pbrInputs.NdotV, 1.0 - pbrInputs.perceptualRoughness))).rgb;\\n    vec3 diffuseLight = SRGBtoLINEAR(textureCube(u_DiffuseEnvSampler, n)).rgb;\\n\\n#ifdef USE_TEX_LOD\\n    vec3 specularLight = SRGBtoLINEAR(textureCubeLodEXT(u_SpecularEnvSampler, reflection, lod)).rgb;\\n#else\\n    vec3 specularLight = SRGBtoLINEAR(textureCube(u_SpecularEnvSampler, reflection)).rgb;\\n#endif\\n\\n    vec3 diffuse = diffuseLight * pbrInputs.diffuseColor;\\n    vec3 specular = specularLight * (pbrInputs.specularColor * brdf.x + brdf.y);\\n\\n    // For presentation, this allows us to disable IBL terms\\n    diffuse *= u_ScaleIBLAmbient.x;\\n    specular *= u_ScaleIBLAmbient.y;\\n\\n    return diffuse + specular;\\n}\\n#endif\\n\\n// Basic Lambertian diffuse\\n// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog\\n// See also [1], Equation 1\\nvec3 diffuse(PBRInfo pbrInputs)\\n{\\n    return pbrInputs.diffuseColor / M_PI;\\n}\\n\\n// The following equation models the Fresnel reflectance term of the spec equation (aka F())\\n// Implementation of fresnel from [4], Equation 15\\nvec3 specularReflection(PBRInfo pbrInputs)\\n{\\n    return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance0) * pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);\\n}\\n\\n// This calculates the specular geometric attenuation (aka G()),\\n// where rougher material will reflect less light back to the viewer.\\n// This implementation is based on [1] Equation 4, and we adopt their modifications to\\n// alphaRoughness as input as originally proposed in [2].\\nfloat geometricOcclusion(PBRInfo pbrInputs)\\n{\\n    float NdotL = pbrInputs.NdotL;\\n    float NdotV = pbrInputs.NdotV;\\n    float r = pbrInputs.alphaRoughness;\\n\\n    float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));\\n    float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));\\n    return attenuationL * attenuationV;\\n}\\n\\n// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())\\n// Implementation from \\\"Average Irregularity Representation of a Roughened Surface for Ray Reflection\\\" by T. S. Trowbridge, and K. P. Reitz\\n// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.\\nfloat microfacetDistribution(PBRInfo pbrInputs)\\n{\\n    float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;\\n    float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;\\n    return roughnessSq / (M_PI * f * f);\\n}\\n\\nvoid main()\\n{\\n    // Metallic and Roughness material properties are packed together\\n    // In glTF, these factors can be specified by fixed scalar values\\n    // or from a metallic-roughness map\\n    float perceptualRoughness = u_MetallicRoughnessValues.y;\\n    float metallic = u_MetallicRoughnessValues.x;\\nif (checkFlag(HAS_METALROUGHNESSMAP)) {\\n    // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.\\n    // This layout intentionally reserves the 'r' channel for (optional) occlusion map data\\n    vec4 mrSample = texture(u_MetallicRoughnessSampler, v_UV);\\n    perceptualRoughness = mrSample.g * perceptualRoughness;\\n    metallic = mrSample.b * metallic;\\n}\\n    perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);\\n    metallic = clamp(metallic, 0.0, 1.0);\\n    // Roughness is authored as perceptual roughness; as is convention,\\n    // convert to material roughness by squaring the perceptual roughness [2].\\n    float alphaRoughness = perceptualRoughness * perceptualRoughness;\\n\\n    // The albedo may be defined from a base texture or a flat color\\n    vec4 baseColor;\\nif (checkFlag(HAS_BASECOLORMAP))\\n    baseColor = SRGBtoLINEAR(texture(u_BaseColorSampler, v_UV)) * u_BaseColorFactor;\\nelse\\n    baseColor = u_BaseColorFactor;\\n\\n    // spec: COLOR_0 ... acts as an additional linear multiplier to baseColor\\n    // TODO!: distinguish vec3/vec4 colors...\\n    baseColor *= vec4(v_Color.rgb, 1.0);\\n\\n    vec3 f0 = vec3(0.04);\\n    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);\\n    diffuseColor *= 1.0 - metallic;\\n    vec3 specularColor = mix(f0, baseColor.rgb, metallic);\\n\\n    // Compute reflectance.\\n    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\\n\\n    // For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.\\n    // For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.\\n    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);\\n    vec3 specularEnvironmentR0 = specularColor.rgb;\\n    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;\\n\\n    vec3 n = getNormal();                             // normal at surface point\\n    vec3 v = normalize(u_Camera - v_Position);        // Vector from surface point to camera\\n    vec3 l = normalize(u_LightDirection);             // Vector from surface point to light\\n    vec3 h = normalize(l+v);                          // Half vector between both l and v\\n    vec3 reflection = -normalize(reflect(v, n));\\n\\n    float NdotL = clamp(dot(n, l), 0.001, 1.0);\\n    float NdotV = abs(dot(n, v)) + 0.001;\\n    float NdotH = clamp(dot(n, h), 0.0, 1.0);\\n    float LdotH = clamp(dot(l, h), 0.0, 1.0);\\n    float VdotH = clamp(dot(v, h), 0.0, 1.0);\\n\\n    PBRInfo pbrInputs = PBRInfo(\\n        NdotL,\\n        NdotV,\\n        NdotH,\\n        LdotH,\\n        VdotH,\\n        perceptualRoughness,\\n        metallic,\\n        specularEnvironmentR0,\\n        specularEnvironmentR90,\\n        alphaRoughness,\\n        diffuseColor,\\n        specularColor\\n    );\\n\\n    // Calculate the shading terms for the microfacet specular shading model\\n    vec3 F = specularReflection(pbrInputs);\\n    float G = geometricOcclusion(pbrInputs);\\n    float D = microfacetDistribution(pbrInputs);\\n\\n    // Calculation of analytical lighting contribution\\n    vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInputs);\\n    vec3 specContrib = F * G * D / (4.0 * NdotL * NdotV);\\n    // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)\\n    vec3 color = NdotL * u_LightColor * (diffuseContrib + specContrib);\\n\\n    // Calculate lighting contribution from image based lighting source (IBL)\\n#ifdef USE_IBL\\n    color += getIBLContribution(pbrInputs, n, reflection);\\n#endif\\n\\n    // Apply optional PBR terms for additional (optional) shading\\nif (checkFlag(HAS_OCCLUSIONMAP)) {\\n    float ao = texture(u_OcclusionSampler, v_UV).r;\\n    color = mix(color, color * ao, u_OcclusionStrength);\\n}\\n\\nif (checkFlag(HAS_EMISSIVEMAP)) {\\n    vec3 emissive = SRGBtoLINEAR(texture(u_EmissiveSampler, v_UV)).rgb * u_EmissiveFactor;\\n    color += emissive;\\n}\\n\\n    // // This section uses mix to override final color for reference app visualization\\n    // // of various parameters in the lighting equation.\\n    // color = mix(color, F, u_ScaleFGDSpec.x);\\n    // color = mix(color, vec3(G), u_ScaleFGDSpec.y);\\n    // color = mix(color, vec3(D), u_ScaleFGDSpec.z);\\n    // color = mix(color, specContrib, u_ScaleFGDSpec.w);\\n\\n    // color = mix(color, diffuseContrib, u_ScaleDiffBaseMR.x);\\n    // color = mix(color, baseColor.rgb, u_ScaleDiffBaseMR.y);\\n    // color = mix(color, vec3(metallic), u_ScaleDiffBaseMR.z);\\n    // color = mix(color, vec3(perceptualRoughness), u_ScaleDiffBaseMR.w);\\n\\n    // NOTE: the spec mandates to ignore any alpha value in 'OPAQUE' mode\\n    float alpha = mix(1.0, baseColor.a, u_AlphaBlend);\\n    if (u_AlphaCutoff > 0.0) {\\n        alpha = step(u_AlphaCutoff, baseColor.a);\\n    }\\n    fragColor = vec4(pow(color,vec3(1.0/2.2)), alpha);\\n}\\n\"","module.exports = \"// Originally taken from https://github.com/KhronosGroup/glTF-WebGL-PBR\\n// Commit c28b5b8f5a83380857ad8395ac5302594ecc13ae\\n\\n\\n#if __VERSION__ == 100\\n#else \\n    #define varying out\\n#endif\\n\\n\\n#if __VERSION__ == 100\\n  attribute vec4 a_position;\\n  attribute vec4 a_normal;\\n  attribute vec4 a_tangent;\\n  attribute vec2 a_texcoord_0;\\n  // attribute vec2 a_texcoord_1;\\n  attribute vec4 a_color;\\n#else\\n    layout (location = 0) in vec4 a_position;\\n    layout (location = 1) in vec3 a_normal;\\n    layout (location = 2) in vec4 a_tangent;\\n    layout (location = 3) in vec2 a_texcoord_0;\\n    // layout (location = 4) in vec2 a_texcoord_1;\\n    layout (location = 5) in vec4 a_color;\\n#endif\\n\\n// TODO!!: WebGL1 support (int/bit operators...)\\n// vertex shader + fragment shader\\nconst int HAS_NORMALS           = 1;\\nconst int HAS_TANGENTS          = 1 << 1;\\nconst int HAS_UV                = 1 << 2;\\nconst int HAS_COLORS            = 1 << 3;\\n\\nuniform mediump int u_PbrFlags;\\nuniform mat4 u_ModelMatrix;\\nuniform mat4 u_ViewProjection;\\nuniform mat3 u_NormalMatrix;\\n\\nvarying vec3 v_Position;\\nvarying vec2 v_UV;\\nvarying vec4 v_Color;\\n\\nvarying mat3 v_TBN;\\nvarying vec3 v_Normal;\\n\\nbool checkFlag(int flag) {\\n    return (u_PbrFlags & flag) == flag;\\n}\\n\\nvoid main()\\n{\\n  vec4 pos = u_ModelMatrix * a_position;\\n  v_Position = vec3(pos.xyz) / pos.w;\\n\\n  if (checkFlag(HAS_NORMALS)) {\\n  if (checkFlag(HAS_TANGENTS)) {\\n  vec3 normalW = normalize(vec3(u_NormalMatrix * a_normal));\\n  vec3 tangentW = normalize(vec3(u_ModelMatrix * vec4(a_tangent.xyz, 0.0)));\\n  vec3 bitangentW = cross(normalW, tangentW) * a_tangent.w;\\n  v_TBN = mat3(tangentW, bitangentW, normalW);\\n  } else { // HAS_TANGENTS != 1\\n  v_Normal = normalize(vec3(u_ModelMatrix * vec4(a_normal.xyz, 0.0)));\\n  }\\n  }\\n\\n  if (checkFlag(HAS_UV))\\n  v_UV = a_texcoord_0;\\n  else\\n  v_UV = vec2(0.,0.);\\n\\n  if (checkFlag(HAS_COLORS))\\n  v_Color = a_color;\\n  else\\n  v_Color = vec4(1.0);\\n\\n  gl_Position = u_ViewProjection * u_ModelMatrix * a_position; // needs w for proper perspective correction\\n}\\n\\n\\n\"","import { Context, Texture2 } from 'webgl-operate';\n\nimport { GltfAsset } from 'gltf-loader-ts';\nimport { GlTfId } from 'gltf-loader-ts/lib/gltf';\nimport { Material } from './material';\nimport { Mesh } from './mesh';\nimport { Scene } from './scene';\n\n/** Base class holding references to shared entities */\nexport class Asset {\n    gAsset: GltfAsset;\n    context: Context;\n\n    scenes: Scene[] = [];\n    // nodes: Node[];\n    meshes: Mesh[] = [];\n    materials: Material[] = [];\n    textures: Texture2[] = [];\n\n    constructor(gAsset: GltfAsset, context: Context) {\n        this.gAsset = gAsset;\n        this.context = context;\n    }\n\n    /**\n     * Get the scene with the given index or the default scene if none given.\n     * If there is no default scene, load the first one.\n     */\n    async getScene(index?: GlTfId) {\n       index = index !== undefined ? index : (this.gAsset.gltf.scene || 0);\n       if (this.scenes[index]) { return this.scenes[index]; }\n       const gScene = this.gAsset.gltf.scenes![index];\n       this.scenes[index] = await Scene.fromGltf(gScene, this);\n       return this.scenes[index];\n    }\n\n    /** Get mesh - either from cache or parse from Gltf */\n    async getMesh(index: GlTfId): Promise<Mesh> {\n        if (this.meshes[index]) { return this.meshes[index]; }\n        this.meshes[index] = await Mesh.fromGltf(index, this);\n        return this.meshes[index];\n    }\n\n    /** Get material - either from cache or parse from Gltf */\n    async getMaterial(index: GlTfId): Promise<Material> {\n        if (this.materials[index]) { return this.materials[index]; }\n        this.materials[index] = await Material.fromGltf(index, this);\n        return this.materials[index];\n    }\n}\n","import { GltfAsset, GltfLoader } from 'gltf-loader-ts';\nimport * as gloperate from 'webgl-operate';\n\nimport { Mesh } from 'gltf-loader-ts/lib/gltf';\nimport { Asset } from './asset';\nimport { GltfRenderer } from './gltfrenderer';\nimport { Primitive } from './primitive';\nimport { Scene } from './scene';\n\nconst BASE_MODEL_URI = 'https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/';\n// const BASE_MODEL_URI = 'https://raw.githubusercontent.com/bwasty/glTF-Sample-Models/generate_index/2.0/'\n// const BASE_MODEL_URI = 'http://localhost:8080/';\n\n// tslint:disable:no-console\ntype GltfVariants = 'glTF'|'glTF-Binary'|'glTF-Draco'|'glTF-Embedded'|'glTF-pbrSpecularGlossiness'|string;\ninterface GltfSample {\n    name: string;\n    screenshot: string;\n    variants: {[key in GltfVariants]: string };\n}\n\nasync function setupSampleDropdown(renderer: GltfRenderer, loader: GltfLoader,\n        selectedModel: string, variant = 'glTF') {\n    const url = BASE_MODEL_URI + 'model-index.json';\n    const samples: GltfSample[] = await(await fetch(url)).json();\n    const select = document.getElementById('sample-select') as HTMLSelectElement;\n    for (const sample of samples) {\n        if (!sample.variants[variant]) {\n            continue;\n        }\n        const op = new Option();\n        op.value = getSampleUrl(sample, '/', variant);\n        op.text = sample.name;\n        if (sample.name === selectedModel) {\n            op.selected = true;\n        }\n        select.options.add(op);\n    }\n\n    select.onchange = async function(this: HTMLSelectElement) {\n        const option = this.selectedOptions[0];\n        const asset = await loader.load(BASE_MODEL_URI + option.value);\n        loadScene(asset, renderer);\n        history.pushState(option.value, undefined, `?model=${option.text}&variant=${variant}`);\n    };\n\n    window.onpopstate = async(event) => {\n        const modelUrl = event.state;\n        console.time('GltfLoader.load');\n        const asset = await loader.load(BASE_MODEL_URI + modelUrl);\n        console.timeEnd('GltfLoader.load');\n        loadScene(asset, renderer);\n    };\n\n    (window as any).cycleModels = async(delayMs?: number) => {\n        const select = document.getElementById('sample-select') as HTMLSelectElement;\n        const numOptions = select.options.length;\n        for (const option of Array.from(select.options)) {\n            console.log(option.text);\n            const asset = await loader.load(BASE_MODEL_URI + option.value);\n            try {\n                await loadScene(asset, renderer);\n            } catch (e) {\n                console.error(e);\n            }\n            if (delayMs !== undefined) {\n                await delay(delayMs);\n            }\n        }\n    };\n}\n\nfunction delay(ms: number) {\n    return new Promise((resolve) => setTimeout(resolve, ms) );\n}\n\n/** baseUrl should end with a slash */\nfunction getSampleUrl(sample: GltfSample, baseUrl = '/', variant = 'glTF') {\n    return `${baseUrl}${sample.name}/${variant}/${sample.variants[variant]}`;\n}\n\nasync function loadScene(gAsset: GltfAsset, renderer: GltfRenderer) {\n    // console.time('asset.preFetchAll');\n    // await gAsset.preFetchAll();\n    // console.timeEnd('asset.preFetchAll');\n    console.time('asset.getScene');\n    // console.profile('Scene.fromGltf');\n    const asset = new Asset(gAsset, renderer.context);\n    const scene = await asset.getScene();\n    // console.profileEnd();\n    console.timeEnd('asset.getScene');\n    renderer.scene = scene;\n}\n\nfunction getQueryParam(param: string): string | undefined {\n    const re = new RegExp(`${param}=([^&]+)`);\n    const match = document.location.search.match(re);\n    if (match) {\n        return match[1];\n    }\n}\n\nasync function onload() {\n    const canvas = new gloperate.Canvas('example-canvas');\n    const context = canvas.context;\n    const renderer = new GltfRenderer();\n    canvas.renderer = renderer;\n\n    const loader = new GltfLoader();\n\n    let uri;\n    const model = getQueryParam('model');\n    if (model) {\n        const variant = getQueryParam('variant') || 'glTF';\n        const suffix = variant === 'glTF-Binary' ? 'glb' : 'gltf';\n        uri = `${BASE_MODEL_URI}${model}/${variant}/${model}.${suffix}`;\n        setupSampleDropdown(renderer, loader, model, variant);\n    } else {\n        uri = BASE_MODEL_URI + `DamagedHelmet/glTF/DamagedHelmet.gltf`;\n        setupSampleDropdown(renderer, loader, 'DamagedHelmet');\n    }\n\n    console.time('GltfLoader.load');\n    const asset = await loader.load(uri);\n    console.timeEnd('GltfLoader.load');\n    loadScene(asset, renderer);\n\n    canvas.element.addEventListener('dblclick', () => gloperate.viewer.Fullscreen.toggle(canvas.element));\n    canvas.element.addEventListener('touchstart', () => gloperate.viewer.Fullscreen.toggle(canvas.element));\n\n    // export variables\n    (window as any)['canvas'] = canvas;\n    (window as any)['context'] = context;\n    (window as any)['renderer'] = renderer;\n}\n\nif (window.document.readyState === 'complete') {\n    onload();\n} else {\n    window.onload = onload;\n}\n"],"sourceRoot":""}