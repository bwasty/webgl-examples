!function(n,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("gloperate"));else if("function"==typeof define&&define.amd)define(["gloperate"],t);else{var e="object"==typeof exports?t(require("gloperate")):t(n.gloperate);for(var r in e)("object"==typeof exports?exports:n)[r]=e[r]}}(window,function(n){return function(n){var t={};function e(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return n[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=n,e.c=t,e.d=function(n,t,r){e.o(n,t)||Object.defineProperty(n,t,{configurable:!1,enumerable:!0,get:r})},e.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=47)}({0:function(t,e){t.exports=n},1:function(n,t,e){"use strict";e.r(t);var r={};e.d(r,"EPSILON",function(){return d}),e.d(r,"ARRAY_TYPE",function(){return m}),e.d(r,"RANDOM",function(){return _}),e.d(r,"setMatrixArrayType",function(){return M}),e.d(r,"toRadian",function(){return g}),e.d(r,"equals",function(){return x});var i={};e.d(i,"create",function(){return p}),e.d(i,"clone",function(){return I}),e.d(i,"copy",function(){return b}),e.d(i,"identity",function(){return E}),e.d(i,"fromValues",function(){return y}),e.d(i,"set",function(){return S}),e.d(i,"transpose",function(){return w}),e.d(i,"invert",function(){return L}),e.d(i,"adjoint",function(){return R}),e.d(i,"determinant",function(){return T}),e.d(i,"multiply",function(){return P}),e.d(i,"rotate",function(){return A}),e.d(i,"scale",function(){return N}),e.d(i,"fromRotation",function(){return O}),e.d(i,"fromScaling",function(){return z}),e.d(i,"str",function(){return q}),e.d(i,"frob",function(){return F}),e.d(i,"LDU",function(){return D}),e.d(i,"add",function(){return C}),e.d(i,"subtract",function(){return G}),e.d(i,"exactEquals",function(){return H}),e.d(i,"equals",function(){return U}),e.d(i,"multiplyScalar",function(){return B}),e.d(i,"multiplyScalarAndAdd",function(){return Z}),e.d(i,"mul",function(){return V}),e.d(i,"sub",function(){return k});var o={};e.d(o,"create",function(){return Y}),e.d(o,"clone",function(){return j}),e.d(o,"copy",function(){return X}),e.d(o,"identity",function(){return W}),e.d(o,"fromValues",function(){return Q}),e.d(o,"set",function(){return K}),e.d(o,"invert",function(){return J}),e.d(o,"determinant",function(){return $}),e.d(o,"multiply",function(){return nn}),e.d(o,"rotate",function(){return tn}),e.d(o,"scale",function(){return en}),e.d(o,"translate",function(){return rn}),e.d(o,"fromRotation",function(){return on}),e.d(o,"fromScaling",function(){return an}),e.d(o,"fromTranslation",function(){return un}),e.d(o,"str",function(){return cn}),e.d(o,"frob",function(){return sn}),e.d(o,"add",function(){return fn}),e.d(o,"subtract",function(){return ln}),e.d(o,"multiplyScalar",function(){return hn}),e.d(o,"multiplyScalarAndAdd",function(){return dn}),e.d(o,"exactEquals",function(){return mn}),e.d(o,"equals",function(){return _n}),e.d(o,"mul",function(){return Mn}),e.d(o,"sub",function(){return vn});var a={};e.d(a,"create",function(){return gn}),e.d(a,"fromMat4",function(){return xn}),e.d(a,"clone",function(){return pn}),e.d(a,"copy",function(){return In}),e.d(a,"fromValues",function(){return bn}),e.d(a,"set",function(){return En}),e.d(a,"identity",function(){return yn}),e.d(a,"transpose",function(){return Sn}),e.d(a,"invert",function(){return wn}),e.d(a,"adjoint",function(){return Ln}),e.d(a,"determinant",function(){return Rn}),e.d(a,"multiply",function(){return Tn}),e.d(a,"translate",function(){return Pn}),e.d(a,"rotate",function(){return An}),e.d(a,"scale",function(){return Nn}),e.d(a,"fromTranslation",function(){return On}),e.d(a,"fromRotation",function(){return zn}),e.d(a,"fromScaling",function(){return qn}),e.d(a,"fromMat2d",function(){return Fn}),e.d(a,"fromQuat",function(){return Dn}),e.d(a,"normalFromMat4",function(){return Cn}),e.d(a,"projection",function(){return Gn}),e.d(a,"str",function(){return Hn}),e.d(a,"frob",function(){return Un}),e.d(a,"add",function(){return Bn}),e.d(a,"subtract",function(){return Zn}),e.d(a,"multiplyScalar",function(){return Vn}),e.d(a,"multiplyScalarAndAdd",function(){return kn}),e.d(a,"exactEquals",function(){return Yn}),e.d(a,"equals",function(){return jn}),e.d(a,"mul",function(){return Xn}),e.d(a,"sub",function(){return Wn});var u={};e.d(u,"create",function(){return Qn}),e.d(u,"clone",function(){return Kn}),e.d(u,"copy",function(){return Jn}),e.d(u,"fromValues",function(){return $n}),e.d(u,"set",function(){return nt}),e.d(u,"identity",function(){return tt}),e.d(u,"transpose",function(){return et}),e.d(u,"invert",function(){return rt}),e.d(u,"adjoint",function(){return it}),e.d(u,"determinant",function(){return ot}),e.d(u,"multiply",function(){return at}),e.d(u,"translate",function(){return ut}),e.d(u,"scale",function(){return ct}),e.d(u,"rotate",function(){return st}),e.d(u,"rotateX",function(){return ft}),e.d(u,"rotateY",function(){return lt}),e.d(u,"rotateZ",function(){return ht}),e.d(u,"fromTranslation",function(){return dt}),e.d(u,"fromScaling",function(){return mt}),e.d(u,"fromRotation",function(){return _t}),e.d(u,"fromXRotation",function(){return Mt}),e.d(u,"fromYRotation",function(){return vt}),e.d(u,"fromZRotation",function(){return gt}),e.d(u,"fromRotationTranslation",function(){return xt}),e.d(u,"fromQuat2",function(){return pt}),e.d(u,"getTranslation",function(){return It}),e.d(u,"getScaling",function(){return bt}),e.d(u,"getRotation",function(){return Et}),e.d(u,"fromRotationTranslationScale",function(){return yt}),e.d(u,"fromRotationTranslationScaleOrigin",function(){return St}),e.d(u,"fromQuat",function(){return wt}),e.d(u,"frustum",function(){return Lt}),e.d(u,"perspective",function(){return Rt}),e.d(u,"perspectiveFromFieldOfView",function(){return Tt}),e.d(u,"ortho",function(){return Pt}),e.d(u,"lookAt",function(){return At}),e.d(u,"targetTo",function(){return Nt}),e.d(u,"str",function(){return Ot}),e.d(u,"frob",function(){return zt}),e.d(u,"add",function(){return qt}),e.d(u,"subtract",function(){return Ft}),e.d(u,"multiplyScalar",function(){return Dt}),e.d(u,"multiplyScalarAndAdd",function(){return Ct}),e.d(u,"exactEquals",function(){return Gt}),e.d(u,"equals",function(){return Ht}),e.d(u,"mul",function(){return Ut}),e.d(u,"sub",function(){return Bt});var c={};e.d(c,"create",function(){return Zt}),e.d(c,"clone",function(){return Vt}),e.d(c,"length",function(){return kt}),e.d(c,"fromValues",function(){return Yt}),e.d(c,"copy",function(){return jt}),e.d(c,"set",function(){return Xt}),e.d(c,"add",function(){return Wt}),e.d(c,"subtract",function(){return Qt}),e.d(c,"multiply",function(){return Kt}),e.d(c,"divide",function(){return Jt}),e.d(c,"ceil",function(){return $t}),e.d(c,"floor",function(){return ne}),e.d(c,"min",function(){return te}),e.d(c,"max",function(){return ee}),e.d(c,"round",function(){return re}),e.d(c,"scale",function(){return ie}),e.d(c,"scaleAndAdd",function(){return oe}),e.d(c,"distance",function(){return ae}),e.d(c,"squaredDistance",function(){return ue}),e.d(c,"squaredLength",function(){return ce}),e.d(c,"negate",function(){return se}),e.d(c,"inverse",function(){return fe}),e.d(c,"normalize",function(){return le}),e.d(c,"dot",function(){return he}),e.d(c,"cross",function(){return de}),e.d(c,"lerp",function(){return me}),e.d(c,"hermite",function(){return _e}),e.d(c,"bezier",function(){return Me}),e.d(c,"random",function(){return ve}),e.d(c,"transformMat4",function(){return ge}),e.d(c,"transformMat3",function(){return xe}),e.d(c,"transformQuat",function(){return pe}),e.d(c,"rotateX",function(){return Ie}),e.d(c,"rotateY",function(){return be}),e.d(c,"rotateZ",function(){return Ee}),e.d(c,"angle",function(){return ye}),e.d(c,"str",function(){return Se}),e.d(c,"exactEquals",function(){return we}),e.d(c,"equals",function(){return Le}),e.d(c,"sub",function(){return Re}),e.d(c,"mul",function(){return Te}),e.d(c,"div",function(){return Pe}),e.d(c,"dist",function(){return Ae}),e.d(c,"sqrDist",function(){return Ne}),e.d(c,"len",function(){return Oe}),e.d(c,"sqrLen",function(){return ze}),e.d(c,"forEach",function(){return qe});var s={};e.d(s,"create",function(){return Fe}),e.d(s,"clone",function(){return De}),e.d(s,"fromValues",function(){return Ce}),e.d(s,"copy",function(){return Ge}),e.d(s,"set",function(){return He}),e.d(s,"add",function(){return Ue}),e.d(s,"subtract",function(){return Be}),e.d(s,"multiply",function(){return Ze}),e.d(s,"divide",function(){return Ve}),e.d(s,"ceil",function(){return ke}),e.d(s,"floor",function(){return Ye}),e.d(s,"min",function(){return je}),e.d(s,"max",function(){return Xe}),e.d(s,"round",function(){return We}),e.d(s,"scale",function(){return Qe}),e.d(s,"scaleAndAdd",function(){return Ke}),e.d(s,"distance",function(){return Je}),e.d(s,"squaredDistance",function(){return $e}),e.d(s,"length",function(){return nr}),e.d(s,"squaredLength",function(){return tr}),e.d(s,"negate",function(){return er}),e.d(s,"inverse",function(){return rr}),e.d(s,"normalize",function(){return ir}),e.d(s,"dot",function(){return or}),e.d(s,"lerp",function(){return ar}),e.d(s,"random",function(){return ur}),e.d(s,"transformMat4",function(){return cr}),e.d(s,"transformQuat",function(){return sr}),e.d(s,"str",function(){return fr}),e.d(s,"exactEquals",function(){return lr}),e.d(s,"equals",function(){return hr}),e.d(s,"sub",function(){return dr}),e.d(s,"mul",function(){return mr}),e.d(s,"div",function(){return _r}),e.d(s,"dist",function(){return Mr}),e.d(s,"sqrDist",function(){return vr}),e.d(s,"len",function(){return gr}),e.d(s,"sqrLen",function(){return xr}),e.d(s,"forEach",function(){return pr});var f={};e.d(f,"create",function(){return Ir}),e.d(f,"identity",function(){return br}),e.d(f,"setAxisAngle",function(){return Er}),e.d(f,"getAxisAngle",function(){return yr}),e.d(f,"multiply",function(){return Sr}),e.d(f,"rotateX",function(){return wr}),e.d(f,"rotateY",function(){return Lr}),e.d(f,"rotateZ",function(){return Rr}),e.d(f,"calculateW",function(){return Tr}),e.d(f,"slerp",function(){return Pr}),e.d(f,"invert",function(){return Ar}),e.d(f,"conjugate",function(){return Nr}),e.d(f,"fromMat3",function(){return Or}),e.d(f,"fromEuler",function(){return zr}),e.d(f,"str",function(){return qr}),e.d(f,"clone",function(){return Fr}),e.d(f,"fromValues",function(){return Dr}),e.d(f,"copy",function(){return Cr}),e.d(f,"set",function(){return Gr}),e.d(f,"add",function(){return Hr}),e.d(f,"mul",function(){return Ur}),e.d(f,"scale",function(){return Br}),e.d(f,"dot",function(){return Zr}),e.d(f,"lerp",function(){return Vr}),e.d(f,"length",function(){return kr}),e.d(f,"len",function(){return Yr}),e.d(f,"squaredLength",function(){return jr}),e.d(f,"sqrLen",function(){return Xr}),e.d(f,"normalize",function(){return Wr}),e.d(f,"exactEquals",function(){return Qr}),e.d(f,"equals",function(){return Kr}),e.d(f,"rotationTo",function(){return Jr}),e.d(f,"sqlerp",function(){return $r}),e.d(f,"setAxes",function(){return ni});var l={};e.d(l,"create",function(){return ti}),e.d(l,"clone",function(){return ei}),e.d(l,"fromValues",function(){return ri}),e.d(l,"fromRotationTranslationValues",function(){return ii}),e.d(l,"fromRotationTranslation",function(){return oi}),e.d(l,"fromTranslation",function(){return ai}),e.d(l,"fromRotation",function(){return ui}),e.d(l,"fromMat4",function(){return ci}),e.d(l,"copy",function(){return si}),e.d(l,"identity",function(){return fi}),e.d(l,"set",function(){return li}),e.d(l,"getReal",function(){return hi}),e.d(l,"getDual",function(){return di}),e.d(l,"setReal",function(){return mi}),e.d(l,"setDual",function(){return _i}),e.d(l,"getTranslation",function(){return Mi}),e.d(l,"translate",function(){return vi}),e.d(l,"rotateX",function(){return gi}),e.d(l,"rotateY",function(){return xi}),e.d(l,"rotateZ",function(){return pi}),e.d(l,"rotateByQuatAppend",function(){return Ii}),e.d(l,"rotateByQuatPrepend",function(){return bi}),e.d(l,"rotateAroundAxis",function(){return Ei}),e.d(l,"add",function(){return yi}),e.d(l,"multiply",function(){return Si}),e.d(l,"mul",function(){return wi}),e.d(l,"scale",function(){return Li}),e.d(l,"dot",function(){return Ri}),e.d(l,"lerp",function(){return Ti}),e.d(l,"invert",function(){return Pi}),e.d(l,"conjugate",function(){return Ai}),e.d(l,"length",function(){return Ni}),e.d(l,"len",function(){return Oi}),e.d(l,"squaredLength",function(){return zi}),e.d(l,"sqrLen",function(){return qi}),e.d(l,"normalize",function(){return Fi}),e.d(l,"str",function(){return Di}),e.d(l,"exactEquals",function(){return Ci}),e.d(l,"equals",function(){return Gi});var h={};e.d(h,"create",function(){return Hi}),e.d(h,"clone",function(){return Ui}),e.d(h,"fromValues",function(){return Bi}),e.d(h,"copy",function(){return Zi}),e.d(h,"set",function(){return Vi}),e.d(h,"add",function(){return ki}),e.d(h,"subtract",function(){return Yi}),e.d(h,"multiply",function(){return ji}),e.d(h,"divide",function(){return Xi}),e.d(h,"ceil",function(){return Wi}),e.d(h,"floor",function(){return Qi}),e.d(h,"min",function(){return Ki}),e.d(h,"max",function(){return Ji}),e.d(h,"round",function(){return $i}),e.d(h,"scale",function(){return no}),e.d(h,"scaleAndAdd",function(){return to}),e.d(h,"distance",function(){return eo}),e.d(h,"squaredDistance",function(){return ro}),e.d(h,"length",function(){return io}),e.d(h,"squaredLength",function(){return oo}),e.d(h,"negate",function(){return ao}),e.d(h,"inverse",function(){return uo}),e.d(h,"normalize",function(){return co}),e.d(h,"dot",function(){return so}),e.d(h,"cross",function(){return fo}),e.d(h,"lerp",function(){return lo}),e.d(h,"random",function(){return ho}),e.d(h,"transformMat2",function(){return mo}),e.d(h,"transformMat2d",function(){return _o}),e.d(h,"transformMat3",function(){return Mo}),e.d(h,"transformMat4",function(){return vo}),e.d(h,"rotate",function(){return go}),e.d(h,"angle",function(){return xo}),e.d(h,"str",function(){return po}),e.d(h,"exactEquals",function(){return Io}),e.d(h,"equals",function(){return bo}),e.d(h,"len",function(){return Eo}),e.d(h,"sub",function(){return yo}),e.d(h,"mul",function(){return So}),e.d(h,"div",function(){return wo}),e.d(h,"dist",function(){return Lo}),e.d(h,"sqrDist",function(){return Ro}),e.d(h,"sqrLen",function(){return To}),e.d(h,"forEach",function(){return Po});const d=1e-6;let m="undefined"!=typeof Float32Array?Float32Array:Array;const _=Math.random;function M(n){m=n}const v=Math.PI/180;function g(n){return n*v}function x(n,t){return Math.abs(n-t)<=d*Math.max(1,Math.abs(n),Math.abs(t))}function p(){let n=new m(4);return n[0]=1,n[1]=0,n[2]=0,n[3]=1,n}function I(n){let t=new m(4);return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t}function b(n,t){return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n}function E(n){return n[0]=1,n[1]=0,n[2]=0,n[3]=1,n}function y(n,t,e,r){let i=new m(4);return i[0]=n,i[1]=t,i[2]=e,i[3]=r,i}function S(n,t,e,r,i){return n[0]=t,n[1]=e,n[2]=r,n[3]=i,n}function w(n,t){if(n===t){let e=t[1];n[1]=t[2],n[2]=e}else n[0]=t[0],n[1]=t[2],n[2]=t[1],n[3]=t[3];return n}function L(n,t){let e=t[0],r=t[1],i=t[2],o=t[3],a=e*o-i*r;return a?(a=1/a,n[0]=o*a,n[1]=-r*a,n[2]=-i*a,n[3]=e*a,n):null}function R(n,t){let e=t[0];return n[0]=t[3],n[1]=-t[1],n[2]=-t[2],n[3]=e,n}function T(n){return n[0]*n[3]-n[2]*n[1]}function P(n,t,e){let r=t[0],i=t[1],o=t[2],a=t[3],u=e[0],c=e[1],s=e[2],f=e[3];return n[0]=r*u+o*c,n[1]=i*u+a*c,n[2]=r*s+o*f,n[3]=i*s+a*f,n}function A(n,t,e){let r=t[0],i=t[1],o=t[2],a=t[3],u=Math.sin(e),c=Math.cos(e);return n[0]=r*c+o*u,n[1]=i*c+a*u,n[2]=r*-u+o*c,n[3]=i*-u+a*c,n}function N(n,t,e){let r=t[0],i=t[1],o=t[2],a=t[3],u=e[0],c=e[1];return n[0]=r*u,n[1]=i*u,n[2]=o*c,n[3]=a*c,n}function O(n,t){let e=Math.sin(t),r=Math.cos(t);return n[0]=r,n[1]=e,n[2]=-e,n[3]=r,n}function z(n,t){return n[0]=t[0],n[1]=0,n[2]=0,n[3]=t[1],n}function q(n){return"mat2("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+")"}function F(n){return Math.sqrt(Math.pow(n[0],2)+Math.pow(n[1],2)+Math.pow(n[2],2)+Math.pow(n[3],2))}function D(n,t,e,r){return n[2]=r[2]/r[0],e[0]=r[0],e[1]=r[1],e[3]=r[3]-n[2]*e[1],[n,t,e]}function C(n,t,e){return n[0]=t[0]+e[0],n[1]=t[1]+e[1],n[2]=t[2]+e[2],n[3]=t[3]+e[3],n}function G(n,t,e){return n[0]=t[0]-e[0],n[1]=t[1]-e[1],n[2]=t[2]-e[2],n[3]=t[3]-e[3],n}function H(n,t){return n[0]===t[0]&&n[1]===t[1]&&n[2]===t[2]&&n[3]===t[3]}function U(n,t){let e=n[0],r=n[1],i=n[2],o=n[3],a=t[0],u=t[1],c=t[2],s=t[3];return Math.abs(e-a)<=d*Math.max(1,Math.abs(e),Math.abs(a))&&Math.abs(r-u)<=d*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(i-c)<=d*Math.max(1,Math.abs(i),Math.abs(c))&&Math.abs(o-s)<=d*Math.max(1,Math.abs(o),Math.abs(s))}function B(n,t,e){return n[0]=t[0]*e,n[1]=t[1]*e,n[2]=t[2]*e,n[3]=t[3]*e,n}function Z(n,t,e,r){return n[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n[2]=t[2]+e[2]*r,n[3]=t[3]+e[3]*r,n}const V=P,k=G;function Y(){let n=new m(6);return n[0]=1,n[1]=0,n[2]=0,n[3]=1,n[4]=0,n[5]=0,n}function j(n){let t=new m(6);return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t}function X(n,t){return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n}function W(n){return n[0]=1,n[1]=0,n[2]=0,n[3]=1,n[4]=0,n[5]=0,n}function Q(n,t,e,r,i,o){let a=new m(6);return a[0]=n,a[1]=t,a[2]=e,a[3]=r,a[4]=i,a[5]=o,a}function K(n,t,e,r,i,o,a){return n[0]=t,n[1]=e,n[2]=r,n[3]=i,n[4]=o,n[5]=a,n}function J(n,t){let e=t[0],r=t[1],i=t[2],o=t[3],a=t[4],u=t[5],c=e*o-r*i;return c?(c=1/c,n[0]=o*c,n[1]=-r*c,n[2]=-i*c,n[3]=e*c,n[4]=(i*u-o*a)*c,n[5]=(r*a-e*u)*c,n):null}function $(n){return n[0]*n[3]-n[1]*n[2]}function nn(n,t,e){let r=t[0],i=t[1],o=t[2],a=t[3],u=t[4],c=t[5],s=e[0],f=e[1],l=e[2],h=e[3],d=e[4],m=e[5];return n[0]=r*s+o*f,n[1]=i*s+a*f,n[2]=r*l+o*h,n[3]=i*l+a*h,n[4]=r*d+o*m+u,n[5]=i*d+a*m+c,n}function tn(n,t,e){let r=t[0],i=t[1],o=t[2],a=t[3],u=t[4],c=t[5],s=Math.sin(e),f=Math.cos(e);return n[0]=r*f+o*s,n[1]=i*f+a*s,n[2]=r*-s+o*f,n[3]=i*-s+a*f,n[4]=u,n[5]=c,n}function en(n,t,e){let r=t[0],i=t[1],o=t[2],a=t[3],u=t[4],c=t[5],s=e[0],f=e[1];return n[0]=r*s,n[1]=i*s,n[2]=o*f,n[3]=a*f,n[4]=u,n[5]=c,n}function rn(n,t,e){let r=t[0],i=t[1],o=t[2],a=t[3],u=t[4],c=t[5],s=e[0],f=e[1];return n[0]=r,n[1]=i,n[2]=o,n[3]=a,n[4]=r*s+o*f+u,n[5]=i*s+a*f+c,n}function on(n,t){let e=Math.sin(t),r=Math.cos(t);return n[0]=r,n[1]=e,n[2]=-e,n[3]=r,n[4]=0,n[5]=0,n}function an(n,t){return n[0]=t[0],n[1]=0,n[2]=0,n[3]=t[1],n[4]=0,n[5]=0,n}function un(n,t){return n[0]=1,n[1]=0,n[2]=0,n[3]=1,n[4]=t[0],n[5]=t[1],n}function cn(n){return"mat2d("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+", "+n[4]+", "+n[5]+")"}function sn(n){return Math.sqrt(Math.pow(n[0],2)+Math.pow(n[1],2)+Math.pow(n[2],2)+Math.pow(n[3],2)+Math.pow(n[4],2)+Math.pow(n[5],2)+1)}function fn(n,t,e){return n[0]=t[0]+e[0],n[1]=t[1]+e[1],n[2]=t[2]+e[2],n[3]=t[3]+e[3],n[4]=t[4]+e[4],n[5]=t[5]+e[5],n}function ln(n,t,e){return n[0]=t[0]-e[0],n[1]=t[1]-e[1],n[2]=t[2]-e[2],n[3]=t[3]-e[3],n[4]=t[4]-e[4],n[5]=t[5]-e[5],n}function hn(n,t,e){return n[0]=t[0]*e,n[1]=t[1]*e,n[2]=t[2]*e,n[3]=t[3]*e,n[4]=t[4]*e,n[5]=t[5]*e,n}function dn(n,t,e,r){return n[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n[2]=t[2]+e[2]*r,n[3]=t[3]+e[3]*r,n[4]=t[4]+e[4]*r,n[5]=t[5]+e[5]*r,n}function mn(n,t){return n[0]===t[0]&&n[1]===t[1]&&n[2]===t[2]&&n[3]===t[3]&&n[4]===t[4]&&n[5]===t[5]}function _n(n,t){let e=n[0],r=n[1],i=n[2],o=n[3],a=n[4],u=n[5],c=t[0],s=t[1],f=t[2],l=t[3],h=t[4],m=t[5];return Math.abs(e-c)<=d*Math.max(1,Math.abs(e),Math.abs(c))&&Math.abs(r-s)<=d*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(i-f)<=d*Math.max(1,Math.abs(i),Math.abs(f))&&Math.abs(o-l)<=d*Math.max(1,Math.abs(o),Math.abs(l))&&Math.abs(a-h)<=d*Math.max(1,Math.abs(a),Math.abs(h))&&Math.abs(u-m)<=d*Math.max(1,Math.abs(u),Math.abs(m))}const Mn=nn,vn=ln;function gn(){let n=new m(9);return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=1,n[5]=0,n[6]=0,n[7]=0,n[8]=1,n}function xn(n,t){return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[4],n[4]=t[5],n[5]=t[6],n[6]=t[8],n[7]=t[9],n[8]=t[10],n}function pn(n){let t=new m(9);return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t}function In(n,t){return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n}function bn(n,t,e,r,i,o,a,u,c){let s=new m(9);return s[0]=n,s[1]=t,s[2]=e,s[3]=r,s[4]=i,s[5]=o,s[6]=a,s[7]=u,s[8]=c,s}function En(n,t,e,r,i,o,a,u,c,s){return n[0]=t,n[1]=e,n[2]=r,n[3]=i,n[4]=o,n[5]=a,n[6]=u,n[7]=c,n[8]=s,n}function yn(n){return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=1,n[5]=0,n[6]=0,n[7]=0,n[8]=1,n}function Sn(n,t){if(n===t){let e=t[1],r=t[2],i=t[5];n[1]=t[3],n[2]=t[6],n[3]=e,n[5]=t[7],n[6]=r,n[7]=i}else n[0]=t[0],n[1]=t[3],n[2]=t[6],n[3]=t[1],n[4]=t[4],n[5]=t[7],n[6]=t[2],n[7]=t[5],n[8]=t[8];return n}function wn(n,t){let e=t[0],r=t[1],i=t[2],o=t[3],a=t[4],u=t[5],c=t[6],s=t[7],f=t[8],l=f*a-u*s,h=-f*o+u*c,d=s*o-a*c,m=e*l+r*h+i*d;return m?(m=1/m,n[0]=l*m,n[1]=(-f*r+i*s)*m,n[2]=(u*r-i*a)*m,n[3]=h*m,n[4]=(f*e-i*c)*m,n[5]=(-u*e+i*o)*m,n[6]=d*m,n[7]=(-s*e+r*c)*m,n[8]=(a*e-r*o)*m,n):null}function Ln(n,t){let e=t[0],r=t[1],i=t[2],o=t[3],a=t[4],u=t[5],c=t[6],s=t[7],f=t[8];return n[0]=a*f-u*s,n[1]=i*s-r*f,n[2]=r*u-i*a,n[3]=u*c-o*f,n[4]=e*f-i*c,n[5]=i*o-e*u,n[6]=o*s-a*c,n[7]=r*c-e*s,n[8]=e*a-r*o,n}function Rn(n){let t=n[0],e=n[1],r=n[2],i=n[3],o=n[4],a=n[5],u=n[6],c=n[7],s=n[8];return t*(s*o-a*c)+e*(-s*i+a*u)+r*(c*i-o*u)}function Tn(n,t,e){let r=t[0],i=t[1],o=t[2],a=t[3],u=t[4],c=t[5],s=t[6],f=t[7],l=t[8],h=e[0],d=e[1],m=e[2],_=e[3],M=e[4],v=e[5],g=e[6],x=e[7],p=e[8];return n[0]=h*r+d*a+m*s,n[1]=h*i+d*u+m*f,n[2]=h*o+d*c+m*l,n[3]=_*r+M*a+v*s,n[4]=_*i+M*u+v*f,n[5]=_*o+M*c+v*l,n[6]=g*r+x*a+p*s,n[7]=g*i+x*u+p*f,n[8]=g*o+x*c+p*l,n}function Pn(n,t,e){let r=t[0],i=t[1],o=t[2],a=t[3],u=t[4],c=t[5],s=t[6],f=t[7],l=t[8],h=e[0],d=e[1];return n[0]=r,n[1]=i,n[2]=o,n[3]=a,n[4]=u,n[5]=c,n[6]=h*r+d*a+s,n[7]=h*i+d*u+f,n[8]=h*o+d*c+l,n}function An(n,t,e){let r=t[0],i=t[1],o=t[2],a=t[3],u=t[4],c=t[5],s=t[6],f=t[7],l=t[8],h=Math.sin(e),d=Math.cos(e);return n[0]=d*r+h*a,n[1]=d*i+h*u,n[2]=d*o+h*c,n[3]=d*a-h*r,n[4]=d*u-h*i,n[5]=d*c-h*o,n[6]=s,n[7]=f,n[8]=l,n}function Nn(n,t,e){let r=e[0],i=e[1];return n[0]=r*t[0],n[1]=r*t[1],n[2]=r*t[2],n[3]=i*t[3],n[4]=i*t[4],n[5]=i*t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n}function On(n,t){return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=1,n[5]=0,n[6]=t[0],n[7]=t[1],n[8]=1,n}function zn(n,t){let e=Math.sin(t),r=Math.cos(t);return n[0]=r,n[1]=e,n[2]=0,n[3]=-e,n[4]=r,n[5]=0,n[6]=0,n[7]=0,n[8]=1,n}function qn(n,t){return n[0]=t[0],n[1]=0,n[2]=0,n[3]=0,n[4]=t[1],n[5]=0,n[6]=0,n[7]=0,n[8]=1,n}function Fn(n,t){return n[0]=t[0],n[1]=t[1],n[2]=0,n[3]=t[2],n[4]=t[3],n[5]=0,n[6]=t[4],n[7]=t[5],n[8]=1,n}function Dn(n,t){let e=t[0],r=t[1],i=t[2],o=t[3],a=e+e,u=r+r,c=i+i,s=e*a,f=r*a,l=r*u,h=i*a,d=i*u,m=i*c,_=o*a,M=o*u,v=o*c;return n[0]=1-l-m,n[3]=f-v,n[6]=h+M,n[1]=f+v,n[4]=1-s-m,n[7]=d-_,n[2]=h-M,n[5]=d+_,n[8]=1-s-l,n}function Cn(n,t){let e=t[0],r=t[1],i=t[2],o=t[3],a=t[4],u=t[5],c=t[6],s=t[7],f=t[8],l=t[9],h=t[10],d=t[11],m=t[12],_=t[13],M=t[14],v=t[15],g=e*u-r*a,x=e*c-i*a,p=e*s-o*a,I=r*c-i*u,b=r*s-o*u,E=i*s-o*c,y=f*_-l*m,S=f*M-h*m,w=f*v-d*m,L=l*M-h*_,R=l*v-d*_,T=h*v-d*M,P=g*T-x*R+p*L+I*w-b*S+E*y;return P?(P=1/P,n[0]=(u*T-c*R+s*L)*P,n[1]=(c*w-a*T-s*S)*P,n[2]=(a*R-u*w+s*y)*P,n[3]=(i*R-r*T-o*L)*P,n[4]=(e*T-i*w+o*S)*P,n[5]=(r*w-e*R-o*y)*P,n[6]=(_*E-M*b+v*I)*P,n[7]=(M*p-m*E-v*x)*P,n[8]=(m*b-_*p+v*g)*P,n):null}function Gn(n,t,e){return n[0]=2/t,n[1]=0,n[2]=0,n[3]=0,n[4]=-2/e,n[5]=0,n[6]=-1,n[7]=1,n[8]=1,n}function Hn(n){return"mat3("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+", "+n[4]+", "+n[5]+", "+n[6]+", "+n[7]+", "+n[8]+")"}function Un(n){return Math.sqrt(Math.pow(n[0],2)+Math.pow(n[1],2)+Math.pow(n[2],2)+Math.pow(n[3],2)+Math.pow(n[4],2)+Math.pow(n[5],2)+Math.pow(n[6],2)+Math.pow(n[7],2)+Math.pow(n[8],2))}function Bn(n,t,e){return n[0]=t[0]+e[0],n[1]=t[1]+e[1],n[2]=t[2]+e[2],n[3]=t[3]+e[3],n[4]=t[4]+e[4],n[5]=t[5]+e[5],n[6]=t[6]+e[6],n[7]=t[7]+e[7],n[8]=t[8]+e[8],n}function Zn(n,t,e){return n[0]=t[0]-e[0],n[1]=t[1]-e[1],n[2]=t[2]-e[2],n[3]=t[3]-e[3],n[4]=t[4]-e[4],n[5]=t[5]-e[5],n[6]=t[6]-e[6],n[7]=t[7]-e[7],n[8]=t[8]-e[8],n}function Vn(n,t,e){return n[0]=t[0]*e,n[1]=t[1]*e,n[2]=t[2]*e,n[3]=t[3]*e,n[4]=t[4]*e,n[5]=t[5]*e,n[6]=t[6]*e,n[7]=t[7]*e,n[8]=t[8]*e,n}function kn(n,t,e,r){return n[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n[2]=t[2]+e[2]*r,n[3]=t[3]+e[3]*r,n[4]=t[4]+e[4]*r,n[5]=t[5]+e[5]*r,n[6]=t[6]+e[6]*r,n[7]=t[7]+e[7]*r,n[8]=t[8]+e[8]*r,n}function Yn(n,t){return n[0]===t[0]&&n[1]===t[1]&&n[2]===t[2]&&n[3]===t[3]&&n[4]===t[4]&&n[5]===t[5]&&n[6]===t[6]&&n[7]===t[7]&&n[8]===t[8]}function jn(n,t){let e=n[0],r=n[1],i=n[2],o=n[3],a=n[4],u=n[5],c=n[6],s=n[7],f=n[8],l=t[0],h=t[1],m=t[2],_=t[3],M=t[4],v=t[5],g=t[6],x=t[7],p=t[8];return Math.abs(e-l)<=d*Math.max(1,Math.abs(e),Math.abs(l))&&Math.abs(r-h)<=d*Math.max(1,Math.abs(r),Math.abs(h))&&Math.abs(i-m)<=d*Math.max(1,Math.abs(i),Math.abs(m))&&Math.abs(o-_)<=d*Math.max(1,Math.abs(o),Math.abs(_))&&Math.abs(a-M)<=d*Math.max(1,Math.abs(a),Math.abs(M))&&Math.abs(u-v)<=d*Math.max(1,Math.abs(u),Math.abs(v))&&Math.abs(c-g)<=d*Math.max(1,Math.abs(c),Math.abs(g))&&Math.abs(s-x)<=d*Math.max(1,Math.abs(s),Math.abs(x))&&Math.abs(f-p)<=d*Math.max(1,Math.abs(f),Math.abs(p))}const Xn=Tn,Wn=Zn;function Qn(){let n=new m(16);return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=1,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=1,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}function Kn(n){let t=new m(16);return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function Jn(n,t){return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n[9]=t[9],n[10]=t[10],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n}function $n(n,t,e,r,i,o,a,u,c,s,f,l,h,d,_,M){let v=new m(16);return v[0]=n,v[1]=t,v[2]=e,v[3]=r,v[4]=i,v[5]=o,v[6]=a,v[7]=u,v[8]=c,v[9]=s,v[10]=f,v[11]=l,v[12]=h,v[13]=d,v[14]=_,v[15]=M,v}function nt(n,t,e,r,i,o,a,u,c,s,f,l,h,d,m,_,M){return n[0]=t,n[1]=e,n[2]=r,n[3]=i,n[4]=o,n[5]=a,n[6]=u,n[7]=c,n[8]=s,n[9]=f,n[10]=l,n[11]=h,n[12]=d,n[13]=m,n[14]=_,n[15]=M,n}function tt(n){return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=1,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=1,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}function et(n,t){if(n===t){let e=t[1],r=t[2],i=t[3],o=t[6],a=t[7],u=t[11];n[1]=t[4],n[2]=t[8],n[3]=t[12],n[4]=e,n[6]=t[9],n[7]=t[13],n[8]=r,n[9]=o,n[11]=t[14],n[12]=i,n[13]=a,n[14]=u}else n[0]=t[0],n[1]=t[4],n[2]=t[8],n[3]=t[12],n[4]=t[1],n[5]=t[5],n[6]=t[9],n[7]=t[13],n[8]=t[2],n[9]=t[6],n[10]=t[10],n[11]=t[14],n[12]=t[3],n[13]=t[7],n[14]=t[11],n[15]=t[15];return n}function rt(n,t){let e=t[0],r=t[1],i=t[2],o=t[3],a=t[4],u=t[5],c=t[6],s=t[7],f=t[8],l=t[9],h=t[10],d=t[11],m=t[12],_=t[13],M=t[14],v=t[15],g=e*u-r*a,x=e*c-i*a,p=e*s-o*a,I=r*c-i*u,b=r*s-o*u,E=i*s-o*c,y=f*_-l*m,S=f*M-h*m,w=f*v-d*m,L=l*M-h*_,R=l*v-d*_,T=h*v-d*M,P=g*T-x*R+p*L+I*w-b*S+E*y;return P?(P=1/P,n[0]=(u*T-c*R+s*L)*P,n[1]=(i*R-r*T-o*L)*P,n[2]=(_*E-M*b+v*I)*P,n[3]=(h*b-l*E-d*I)*P,n[4]=(c*w-a*T-s*S)*P,n[5]=(e*T-i*w+o*S)*P,n[6]=(M*p-m*E-v*x)*P,n[7]=(f*E-h*p+d*x)*P,n[8]=(a*R-u*w+s*y)*P,n[9]=(r*w-e*R-o*y)*P,n[10]=(m*b-_*p+v*g)*P,n[11]=(l*p-f*b-d*g)*P,n[12]=(u*S-a*L-c*y)*P,n[13]=(e*L-r*S+i*y)*P,n[14]=(_*x-m*I-M*g)*P,n[15]=(f*I-l*x+h*g)*P,n):null}function it(n,t){let e=t[0],r=t[1],i=t[2],o=t[3],a=t[4],u=t[5],c=t[6],s=t[7],f=t[8],l=t[9],h=t[10],d=t[11],m=t[12],_=t[13],M=t[14],v=t[15];return n[0]=u*(h*v-d*M)-l*(c*v-s*M)+_*(c*d-s*h),n[1]=-(r*(h*v-d*M)-l*(i*v-o*M)+_*(i*d-o*h)),n[2]=r*(c*v-s*M)-u*(i*v-o*M)+_*(i*s-o*c),n[3]=-(r*(c*d-s*h)-u*(i*d-o*h)+l*(i*s-o*c)),n[4]=-(a*(h*v-d*M)-f*(c*v-s*M)+m*(c*d-s*h)),n[5]=e*(h*v-d*M)-f*(i*v-o*M)+m*(i*d-o*h),n[6]=-(e*(c*v-s*M)-a*(i*v-o*M)+m*(i*s-o*c)),n[7]=e*(c*d-s*h)-a*(i*d-o*h)+f*(i*s-o*c),n[8]=a*(l*v-d*_)-f*(u*v-s*_)+m*(u*d-s*l),n[9]=-(e*(l*v-d*_)-f*(r*v-o*_)+m*(r*d-o*l)),n[10]=e*(u*v-s*_)-a*(r*v-o*_)+m*(r*s-o*u),n[11]=-(e*(u*d-s*l)-a*(r*d-o*l)+f*(r*s-o*u)),n[12]=-(a*(l*M-h*_)-f*(u*M-c*_)+m*(u*h-c*l)),n[13]=e*(l*M-h*_)-f*(r*M-i*_)+m*(r*h-i*l),n[14]=-(e*(u*M-c*_)-a*(r*M-i*_)+m*(r*c-i*u)),n[15]=e*(u*h-c*l)-a*(r*h-i*l)+f*(r*c-i*u),n}function ot(n){let t=n[0],e=n[1],r=n[2],i=n[3],o=n[4],a=n[5],u=n[6],c=n[7],s=n[8],f=n[9],l=n[10],h=n[11],d=n[12],m=n[13],_=n[14],M=n[15];return(t*a-e*o)*(l*M-h*_)-(t*u-r*o)*(f*M-h*m)+(t*c-i*o)*(f*_-l*m)+(e*u-r*a)*(s*M-h*d)-(e*c-i*a)*(s*_-l*d)+(r*c-i*u)*(s*m-f*d)}function at(n,t,e){let r=t[0],i=t[1],o=t[2],a=t[3],u=t[4],c=t[5],s=t[6],f=t[7],l=t[8],h=t[9],d=t[10],m=t[11],_=t[12],M=t[13],v=t[14],g=t[15],x=e[0],p=e[1],I=e[2],b=e[3];return n[0]=x*r+p*u+I*l+b*_,n[1]=x*i+p*c+I*h+b*M,n[2]=x*o+p*s+I*d+b*v,n[3]=x*a+p*f+I*m+b*g,x=e[4],p=e[5],I=e[6],b=e[7],n[4]=x*r+p*u+I*l+b*_,n[5]=x*i+p*c+I*h+b*M,n[6]=x*o+p*s+I*d+b*v,n[7]=x*a+p*f+I*m+b*g,x=e[8],p=e[9],I=e[10],b=e[11],n[8]=x*r+p*u+I*l+b*_,n[9]=x*i+p*c+I*h+b*M,n[10]=x*o+p*s+I*d+b*v,n[11]=x*a+p*f+I*m+b*g,x=e[12],p=e[13],I=e[14],b=e[15],n[12]=x*r+p*u+I*l+b*_,n[13]=x*i+p*c+I*h+b*M,n[14]=x*o+p*s+I*d+b*v,n[15]=x*a+p*f+I*m+b*g,n}function ut(n,t,e){let r,i,o,a,u,c,s,f,l,h,d,m,_=e[0],M=e[1],v=e[2];return t===n?(n[12]=t[0]*_+t[4]*M+t[8]*v+t[12],n[13]=t[1]*_+t[5]*M+t[9]*v+t[13],n[14]=t[2]*_+t[6]*M+t[10]*v+t[14],n[15]=t[3]*_+t[7]*M+t[11]*v+t[15]):(r=t[0],i=t[1],o=t[2],a=t[3],u=t[4],c=t[5],s=t[6],f=t[7],l=t[8],h=t[9],d=t[10],m=t[11],n[0]=r,n[1]=i,n[2]=o,n[3]=a,n[4]=u,n[5]=c,n[6]=s,n[7]=f,n[8]=l,n[9]=h,n[10]=d,n[11]=m,n[12]=r*_+u*M+l*v+t[12],n[13]=i*_+c*M+h*v+t[13],n[14]=o*_+s*M+d*v+t[14],n[15]=a*_+f*M+m*v+t[15]),n}function ct(n,t,e){let r=e[0],i=e[1],o=e[2];return n[0]=t[0]*r,n[1]=t[1]*r,n[2]=t[2]*r,n[3]=t[3]*r,n[4]=t[4]*i,n[5]=t[5]*i,n[6]=t[6]*i,n[7]=t[7]*i,n[8]=t[8]*o,n[9]=t[9]*o,n[10]=t[10]*o,n[11]=t[11]*o,n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n}function st(n,t,e,r){let i,o,a,u,c,s,f,l,h,m,_,M,v,g,x,p,I,b,E,y,S,w,L,R,T=r[0],P=r[1],A=r[2],N=Math.sqrt(T*T+P*P+A*A);return N<d?null:(T*=N=1/N,P*=N,A*=N,i=Math.sin(e),a=1-(o=Math.cos(e)),u=t[0],c=t[1],s=t[2],f=t[3],l=t[4],h=t[5],m=t[6],_=t[7],M=t[8],v=t[9],g=t[10],x=t[11],p=T*T*a+o,I=P*T*a+A*i,b=A*T*a-P*i,E=T*P*a-A*i,y=P*P*a+o,S=A*P*a+T*i,w=T*A*a+P*i,L=P*A*a-T*i,R=A*A*a+o,n[0]=u*p+l*I+M*b,n[1]=c*p+h*I+v*b,n[2]=s*p+m*I+g*b,n[3]=f*p+_*I+x*b,n[4]=u*E+l*y+M*S,n[5]=c*E+h*y+v*S,n[6]=s*E+m*y+g*S,n[7]=f*E+_*y+x*S,n[8]=u*w+l*L+M*R,n[9]=c*w+h*L+v*R,n[10]=s*w+m*L+g*R,n[11]=f*w+_*L+x*R,t!==n&&(n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15]),n)}function ft(n,t,e){let r=Math.sin(e),i=Math.cos(e),o=t[4],a=t[5],u=t[6],c=t[7],s=t[8],f=t[9],l=t[10],h=t[11];return t!==n&&(n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15]),n[4]=o*i+s*r,n[5]=a*i+f*r,n[6]=u*i+l*r,n[7]=c*i+h*r,n[8]=s*i-o*r,n[9]=f*i-a*r,n[10]=l*i-u*r,n[11]=h*i-c*r,n}function lt(n,t,e){let r=Math.sin(e),i=Math.cos(e),o=t[0],a=t[1],u=t[2],c=t[3],s=t[8],f=t[9],l=t[10],h=t[11];return t!==n&&(n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15]),n[0]=o*i-s*r,n[1]=a*i-f*r,n[2]=u*i-l*r,n[3]=c*i-h*r,n[8]=o*r+s*i,n[9]=a*r+f*i,n[10]=u*r+l*i,n[11]=c*r+h*i,n}function ht(n,t,e){let r=Math.sin(e),i=Math.cos(e),o=t[0],a=t[1],u=t[2],c=t[3],s=t[4],f=t[5],l=t[6],h=t[7];return t!==n&&(n[8]=t[8],n[9]=t[9],n[10]=t[10],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15]),n[0]=o*i+s*r,n[1]=a*i+f*r,n[2]=u*i+l*r,n[3]=c*i+h*r,n[4]=s*i-o*r,n[5]=f*i-a*r,n[6]=l*i-u*r,n[7]=h*i-c*r,n}function dt(n,t){return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=1,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=1,n[11]=0,n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n}function mt(n,t){return n[0]=t[0],n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=t[1],n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=t[2],n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}function _t(n,t,e){let r,i,o,a=e[0],u=e[1],c=e[2],s=Math.sqrt(a*a+u*u+c*c);return s<d?null:(a*=s=1/s,u*=s,c*=s,r=Math.sin(t),o=1-(i=Math.cos(t)),n[0]=a*a*o+i,n[1]=u*a*o+c*r,n[2]=c*a*o-u*r,n[3]=0,n[4]=a*u*o-c*r,n[5]=u*u*o+i,n[6]=c*u*o+a*r,n[7]=0,n[8]=a*c*o+u*r,n[9]=u*c*o-a*r,n[10]=c*c*o+i,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n)}function Mt(n,t){let e=Math.sin(t),r=Math.cos(t);return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=r,n[6]=e,n[7]=0,n[8]=0,n[9]=-e,n[10]=r,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}function vt(n,t){let e=Math.sin(t),r=Math.cos(t);return n[0]=r,n[1]=0,n[2]=-e,n[3]=0,n[4]=0,n[5]=1,n[6]=0,n[7]=0,n[8]=e,n[9]=0,n[10]=r,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}function gt(n,t){let e=Math.sin(t),r=Math.cos(t);return n[0]=r,n[1]=e,n[2]=0,n[3]=0,n[4]=-e,n[5]=r,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=1,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}function xt(n,t,e){let r=t[0],i=t[1],o=t[2],a=t[3],u=r+r,c=i+i,s=o+o,f=r*u,l=r*c,h=r*s,d=i*c,m=i*s,_=o*s,M=a*u,v=a*c,g=a*s;return n[0]=1-(d+_),n[1]=l+g,n[2]=h-v,n[3]=0,n[4]=l-g,n[5]=1-(f+_),n[6]=m+M,n[7]=0,n[8]=h+v,n[9]=m-M,n[10]=1-(f+d),n[11]=0,n[12]=e[0],n[13]=e[1],n[14]=e[2],n[15]=1,n}function pt(n,t){let e=new m(3),r=-t[0],i=-t[1],o=-t[2],a=t[3],u=t[4],c=t[5],s=t[6],f=t[7],l=r*r+i*i+o*o+a*a;return l>0?(e[0]=2*(u*a+f*r+c*o-s*i)/l,e[1]=2*(c*a+f*i+s*r-u*o)/l,e[2]=2*(s*a+f*o+u*i-c*r)/l):(e[0]=2*(u*a+f*r+c*o-s*i),e[1]=2*(c*a+f*i+s*r-u*o),e[2]=2*(s*a+f*o+u*i-c*r)),xt(n,t,e),n}function It(n,t){return n[0]=t[12],n[1]=t[13],n[2]=t[14],n}function bt(n,t){let e=t[0],r=t[1],i=t[2],o=t[4],a=t[5],u=t[6],c=t[8],s=t[9],f=t[10];return n[0]=Math.sqrt(e*e+r*r+i*i),n[1]=Math.sqrt(o*o+a*a+u*u),n[2]=Math.sqrt(c*c+s*s+f*f),n}function Et(n,t){let e=t[0]+t[5]+t[10],r=0;return e>0?(r=2*Math.sqrt(e+1),n[3]=.25*r,n[0]=(t[6]-t[9])/r,n[1]=(t[8]-t[2])/r,n[2]=(t[1]-t[4])/r):t[0]>t[5]&&t[0]>t[10]?(r=2*Math.sqrt(1+t[0]-t[5]-t[10]),n[3]=(t[6]-t[9])/r,n[0]=.25*r,n[1]=(t[1]+t[4])/r,n[2]=(t[8]+t[2])/r):t[5]>t[10]?(r=2*Math.sqrt(1+t[5]-t[0]-t[10]),n[3]=(t[8]-t[2])/r,n[0]=(t[1]+t[4])/r,n[1]=.25*r,n[2]=(t[6]+t[9])/r):(r=2*Math.sqrt(1+t[10]-t[0]-t[5]),n[3]=(t[1]-t[4])/r,n[0]=(t[8]+t[2])/r,n[1]=(t[6]+t[9])/r,n[2]=.25*r),n}function yt(n,t,e,r){let i=t[0],o=t[1],a=t[2],u=t[3],c=i+i,s=o+o,f=a+a,l=i*c,h=i*s,d=i*f,m=o*s,_=o*f,M=a*f,v=u*c,g=u*s,x=u*f,p=r[0],I=r[1],b=r[2];return n[0]=(1-(m+M))*p,n[1]=(h+x)*p,n[2]=(d-g)*p,n[3]=0,n[4]=(h-x)*I,n[5]=(1-(l+M))*I,n[6]=(_+v)*I,n[7]=0,n[8]=(d+g)*b,n[9]=(_-v)*b,n[10]=(1-(l+m))*b,n[11]=0,n[12]=e[0],n[13]=e[1],n[14]=e[2],n[15]=1,n}function St(n,t,e,r,i){let o=t[0],a=t[1],u=t[2],c=t[3],s=o+o,f=a+a,l=u+u,h=o*s,d=o*f,m=o*l,_=a*f,M=a*l,v=u*l,g=c*s,x=c*f,p=c*l,I=r[0],b=r[1],E=r[2],y=i[0],S=i[1],w=i[2],L=(1-(_+v))*I,R=(d+p)*I,T=(m-x)*I,P=(d-p)*b,A=(1-(h+v))*b,N=(M+g)*b,O=(m+x)*E,z=(M-g)*E,q=(1-(h+_))*E;return n[0]=L,n[1]=R,n[2]=T,n[3]=0,n[4]=P,n[5]=A,n[6]=N,n[7]=0,n[8]=O,n[9]=z,n[10]=q,n[11]=0,n[12]=e[0]+y-(L*y+P*S+O*w),n[13]=e[1]+S-(R*y+A*S+z*w),n[14]=e[2]+w-(T*y+N*S+q*w),n[15]=1,n}function wt(n,t){let e=t[0],r=t[1],i=t[2],o=t[3],a=e+e,u=r+r,c=i+i,s=e*a,f=r*a,l=r*u,h=i*a,d=i*u,m=i*c,_=o*a,M=o*u,v=o*c;return n[0]=1-l-m,n[1]=f+v,n[2]=h-M,n[3]=0,n[4]=f-v,n[5]=1-s-m,n[6]=d+_,n[7]=0,n[8]=h+M,n[9]=d-_,n[10]=1-s-l,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}function Lt(n,t,e,r,i,o,a){let u=1/(e-t),c=1/(i-r),s=1/(o-a);return n[0]=2*o*u,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=2*o*c,n[6]=0,n[7]=0,n[8]=(e+t)*u,n[9]=(i+r)*c,n[10]=(a+o)*s,n[11]=-1,n[12]=0,n[13]=0,n[14]=a*o*2*s,n[15]=0,n}function Rt(n,t,e,r,i){let o=1/Math.tan(t/2),a=1/(r-i);return n[0]=o/e,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=o,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=(i+r)*a,n[11]=-1,n[12]=0,n[13]=0,n[14]=2*i*r*a,n[15]=0,n}function Tt(n,t,e,r){let i=Math.tan(t.upDegrees*Math.PI/180),o=Math.tan(t.downDegrees*Math.PI/180),a=Math.tan(t.leftDegrees*Math.PI/180),u=Math.tan(t.rightDegrees*Math.PI/180),c=2/(a+u),s=2/(i+o);return n[0]=c,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=s,n[6]=0,n[7]=0,n[8]=-(a-u)*c*.5,n[9]=(i-o)*s*.5,n[10]=r/(e-r),n[11]=-1,n[12]=0,n[13]=0,n[14]=r*e/(e-r),n[15]=0,n}function Pt(n,t,e,r,i,o,a){let u=1/(t-e),c=1/(r-i),s=1/(o-a);return n[0]=-2*u,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=-2*c,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=2*s,n[11]=0,n[12]=(t+e)*u,n[13]=(i+r)*c,n[14]=(a+o)*s,n[15]=1,n}function At(n,t,e,r){let i,o,a,u,c,s,f,l,h,m,_=t[0],M=t[1],v=t[2],g=r[0],x=r[1],p=r[2],I=e[0],b=e[1],E=e[2];return Math.abs(_-I)<d&&Math.abs(M-b)<d&&Math.abs(v-E)<d?tt(n):(f=_-I,l=M-b,h=v-E,i=x*(h*=m=1/Math.sqrt(f*f+l*l+h*h))-p*(l*=m),o=p*(f*=m)-g*h,a=g*l-x*f,(m=Math.sqrt(i*i+o*o+a*a))?(i*=m=1/m,o*=m,a*=m):(i=0,o=0,a=0),u=l*a-h*o,c=h*i-f*a,s=f*o-l*i,(m=Math.sqrt(u*u+c*c+s*s))?(u*=m=1/m,c*=m,s*=m):(u=0,c=0,s=0),n[0]=i,n[1]=u,n[2]=f,n[3]=0,n[4]=o,n[5]=c,n[6]=l,n[7]=0,n[8]=a,n[9]=s,n[10]=h,n[11]=0,n[12]=-(i*_+o*M+a*v),n[13]=-(u*_+c*M+s*v),n[14]=-(f*_+l*M+h*v),n[15]=1,n)}function Nt(n,t,e,r){let i=t[0],o=t[1],a=t[2],u=r[0],c=r[1],s=r[2],f=i-e[0],l=o-e[1],h=a-e[2],d=f*f+l*l+h*h;d>0&&(f*=d=1/Math.sqrt(d),l*=d,h*=d);let m=c*h-s*l,_=s*f-u*h,M=u*l-c*f;return(d=m*m+_*_+M*M)>0&&(m*=d=1/Math.sqrt(d),_*=d,M*=d),n[0]=m,n[1]=_,n[2]=M,n[3]=0,n[4]=l*M-h*_,n[5]=h*m-f*M,n[6]=f*_-l*m,n[7]=0,n[8]=f,n[9]=l,n[10]=h,n[11]=0,n[12]=i,n[13]=o,n[14]=a,n[15]=1,n}function Ot(n){return"mat4("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+", "+n[4]+", "+n[5]+", "+n[6]+", "+n[7]+", "+n[8]+", "+n[9]+", "+n[10]+", "+n[11]+", "+n[12]+", "+n[13]+", "+n[14]+", "+n[15]+")"}function zt(n){return Math.sqrt(Math.pow(n[0],2)+Math.pow(n[1],2)+Math.pow(n[2],2)+Math.pow(n[3],2)+Math.pow(n[4],2)+Math.pow(n[5],2)+Math.pow(n[6],2)+Math.pow(n[7],2)+Math.pow(n[8],2)+Math.pow(n[9],2)+Math.pow(n[10],2)+Math.pow(n[11],2)+Math.pow(n[12],2)+Math.pow(n[13],2)+Math.pow(n[14],2)+Math.pow(n[15],2))}function qt(n,t,e){return n[0]=t[0]+e[0],n[1]=t[1]+e[1],n[2]=t[2]+e[2],n[3]=t[3]+e[3],n[4]=t[4]+e[4],n[5]=t[5]+e[5],n[6]=t[6]+e[6],n[7]=t[7]+e[7],n[8]=t[8]+e[8],n[9]=t[9]+e[9],n[10]=t[10]+e[10],n[11]=t[11]+e[11],n[12]=t[12]+e[12],n[13]=t[13]+e[13],n[14]=t[14]+e[14],n[15]=t[15]+e[15],n}function Ft(n,t,e){return n[0]=t[0]-e[0],n[1]=t[1]-e[1],n[2]=t[2]-e[2],n[3]=t[3]-e[3],n[4]=t[4]-e[4],n[5]=t[5]-e[5],n[6]=t[6]-e[6],n[7]=t[7]-e[7],n[8]=t[8]-e[8],n[9]=t[9]-e[9],n[10]=t[10]-e[10],n[11]=t[11]-e[11],n[12]=t[12]-e[12],n[13]=t[13]-e[13],n[14]=t[14]-e[14],n[15]=t[15]-e[15],n}function Dt(n,t,e){return n[0]=t[0]*e,n[1]=t[1]*e,n[2]=t[2]*e,n[3]=t[3]*e,n[4]=t[4]*e,n[5]=t[5]*e,n[6]=t[6]*e,n[7]=t[7]*e,n[8]=t[8]*e,n[9]=t[9]*e,n[10]=t[10]*e,n[11]=t[11]*e,n[12]=t[12]*e,n[13]=t[13]*e,n[14]=t[14]*e,n[15]=t[15]*e,n}function Ct(n,t,e,r){return n[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n[2]=t[2]+e[2]*r,n[3]=t[3]+e[3]*r,n[4]=t[4]+e[4]*r,n[5]=t[5]+e[5]*r,n[6]=t[6]+e[6]*r,n[7]=t[7]+e[7]*r,n[8]=t[8]+e[8]*r,n[9]=t[9]+e[9]*r,n[10]=t[10]+e[10]*r,n[11]=t[11]+e[11]*r,n[12]=t[12]+e[12]*r,n[13]=t[13]+e[13]*r,n[14]=t[14]+e[14]*r,n[15]=t[15]+e[15]*r,n}function Gt(n,t){return n[0]===t[0]&&n[1]===t[1]&&n[2]===t[2]&&n[3]===t[3]&&n[4]===t[4]&&n[5]===t[5]&&n[6]===t[6]&&n[7]===t[7]&&n[8]===t[8]&&n[9]===t[9]&&n[10]===t[10]&&n[11]===t[11]&&n[12]===t[12]&&n[13]===t[13]&&n[14]===t[14]&&n[15]===t[15]}function Ht(n,t){let e=n[0],r=n[1],i=n[2],o=n[3],a=n[4],u=n[5],c=n[6],s=n[7],f=n[8],l=n[9],h=n[10],m=n[11],_=n[12],M=n[13],v=n[14],g=n[15],x=t[0],p=t[1],I=t[2],b=t[3],E=t[4],y=t[5],S=t[6],w=t[7],L=t[8],R=t[9],T=t[10],P=t[11],A=t[12],N=t[13],O=t[14],z=t[15];return Math.abs(e-x)<=d*Math.max(1,Math.abs(e),Math.abs(x))&&Math.abs(r-p)<=d*Math.max(1,Math.abs(r),Math.abs(p))&&Math.abs(i-I)<=d*Math.max(1,Math.abs(i),Math.abs(I))&&Math.abs(o-b)<=d*Math.max(1,Math.abs(o),Math.abs(b))&&Math.abs(a-E)<=d*Math.max(1,Math.abs(a),Math.abs(E))&&Math.abs(u-y)<=d*Math.max(1,Math.abs(u),Math.abs(y))&&Math.abs(c-S)<=d*Math.max(1,Math.abs(c),Math.abs(S))&&Math.abs(s-w)<=d*Math.max(1,Math.abs(s),Math.abs(w))&&Math.abs(f-L)<=d*Math.max(1,Math.abs(f),Math.abs(L))&&Math.abs(l-R)<=d*Math.max(1,Math.abs(l),Math.abs(R))&&Math.abs(h-T)<=d*Math.max(1,Math.abs(h),Math.abs(T))&&Math.abs(m-P)<=d*Math.max(1,Math.abs(m),Math.abs(P))&&Math.abs(_-A)<=d*Math.max(1,Math.abs(_),Math.abs(A))&&Math.abs(M-N)<=d*Math.max(1,Math.abs(M),Math.abs(N))&&Math.abs(v-O)<=d*Math.max(1,Math.abs(v),Math.abs(O))&&Math.abs(g-z)<=d*Math.max(1,Math.abs(g),Math.abs(z))}const Ut=at,Bt=Ft;function Zt(){let n=new m(3);return n[0]=0,n[1]=0,n[2]=0,n}function Vt(n){var t=new m(3);return t[0]=n[0],t[1]=n[1],t[2]=n[2],t}function kt(n){let t=n[0],e=n[1],r=n[2];return Math.sqrt(t*t+e*e+r*r)}function Yt(n,t,e){let r=new m(3);return r[0]=n,r[1]=t,r[2]=e,r}function jt(n,t){return n[0]=t[0],n[1]=t[1],n[2]=t[2],n}function Xt(n,t,e,r){return n[0]=t,n[1]=e,n[2]=r,n}function Wt(n,t,e){return n[0]=t[0]+e[0],n[1]=t[1]+e[1],n[2]=t[2]+e[2],n}function Qt(n,t,e){return n[0]=t[0]-e[0],n[1]=t[1]-e[1],n[2]=t[2]-e[2],n}function Kt(n,t,e){return n[0]=t[0]*e[0],n[1]=t[1]*e[1],n[2]=t[2]*e[2],n}function Jt(n,t,e){return n[0]=t[0]/e[0],n[1]=t[1]/e[1],n[2]=t[2]/e[2],n}function $t(n,t){return n[0]=Math.ceil(t[0]),n[1]=Math.ceil(t[1]),n[2]=Math.ceil(t[2]),n}function ne(n,t){return n[0]=Math.floor(t[0]),n[1]=Math.floor(t[1]),n[2]=Math.floor(t[2]),n}function te(n,t,e){return n[0]=Math.min(t[0],e[0]),n[1]=Math.min(t[1],e[1]),n[2]=Math.min(t[2],e[2]),n}function ee(n,t,e){return n[0]=Math.max(t[0],e[0]),n[1]=Math.max(t[1],e[1]),n[2]=Math.max(t[2],e[2]),n}function re(n,t){return n[0]=Math.round(t[0]),n[1]=Math.round(t[1]),n[2]=Math.round(t[2]),n}function ie(n,t,e){return n[0]=t[0]*e,n[1]=t[1]*e,n[2]=t[2]*e,n}function oe(n,t,e,r){return n[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n[2]=t[2]+e[2]*r,n}function ae(n,t){let e=t[0]-n[0],r=t[1]-n[1],i=t[2]-n[2];return Math.sqrt(e*e+r*r+i*i)}function ue(n,t){let e=t[0]-n[0],r=t[1]-n[1],i=t[2]-n[2];return e*e+r*r+i*i}function ce(n){let t=n[0],e=n[1],r=n[2];return t*t+e*e+r*r}function se(n,t){return n[0]=-t[0],n[1]=-t[1],n[2]=-t[2],n}function fe(n,t){return n[0]=1/t[0],n[1]=1/t[1],n[2]=1/t[2],n}function le(n,t){let e=t[0],r=t[1],i=t[2],o=e*e+r*r+i*i;return o>0&&(o=1/Math.sqrt(o),n[0]=t[0]*o,n[1]=t[1]*o,n[2]=t[2]*o),n}function he(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]}function de(n,t,e){let r=t[0],i=t[1],o=t[2],a=e[0],u=e[1],c=e[2];return n[0]=i*c-o*u,n[1]=o*a-r*c,n[2]=r*u-i*a,n}function me(n,t,e,r){let i=t[0],o=t[1],a=t[2];return n[0]=i+r*(e[0]-i),n[1]=o+r*(e[1]-o),n[2]=a+r*(e[2]-a),n}function _e(n,t,e,r,i,o){let a=o*o,u=a*(2*o-3)+1,c=a*(o-2)+o,s=a*(o-1),f=a*(3-2*o);return n[0]=t[0]*u+e[0]*c+r[0]*s+i[0]*f,n[1]=t[1]*u+e[1]*c+r[1]*s+i[1]*f,n[2]=t[2]*u+e[2]*c+r[2]*s+i[2]*f,n}function Me(n,t,e,r,i,o){let a=1-o,u=a*a,c=o*o,s=u*a,f=3*o*u,l=3*c*a,h=c*o;return n[0]=t[0]*s+e[0]*f+r[0]*l+i[0]*h,n[1]=t[1]*s+e[1]*f+r[1]*l+i[1]*h,n[2]=t[2]*s+e[2]*f+r[2]*l+i[2]*h,n}function ve(n,t){t=t||1;let e=2*_()*Math.PI,r=2*_()-1,i=Math.sqrt(1-r*r)*t;return n[0]=Math.cos(e)*i,n[1]=Math.sin(e)*i,n[2]=r*t,n}function ge(n,t,e){let r=t[0],i=t[1],o=t[2],a=e[3]*r+e[7]*i+e[11]*o+e[15];return a=a||1,n[0]=(e[0]*r+e[4]*i+e[8]*o+e[12])/a,n[1]=(e[1]*r+e[5]*i+e[9]*o+e[13])/a,n[2]=(e[2]*r+e[6]*i+e[10]*o+e[14])/a,n}function xe(n,t,e){let r=t[0],i=t[1],o=t[2];return n[0]=r*e[0]+i*e[3]+o*e[6],n[1]=r*e[1]+i*e[4]+o*e[7],n[2]=r*e[2]+i*e[5]+o*e[8],n}function pe(n,t,e){let r=e[0],i=e[1],o=e[2],a=e[3],u=t[0],c=t[1],s=t[2],f=i*s-o*c,l=o*u-r*s,h=r*c-i*u,d=i*h-o*l,m=o*f-r*h,_=r*l-i*f,M=2*a;return f*=M,l*=M,h*=M,d*=2,m*=2,_*=2,n[0]=u+f+d,n[1]=c+l+m,n[2]=s+h+_,n}function Ie(n,t,e,r){let i=[],o=[];return i[0]=t[0]-e[0],i[1]=t[1]-e[1],i[2]=t[2]-e[2],o[0]=i[0],o[1]=i[1]*Math.cos(r)-i[2]*Math.sin(r),o[2]=i[1]*Math.sin(r)+i[2]*Math.cos(r),n[0]=o[0]+e[0],n[1]=o[1]+e[1],n[2]=o[2]+e[2],n}function be(n,t,e,r){let i=[],o=[];return i[0]=t[0]-e[0],i[1]=t[1]-e[1],i[2]=t[2]-e[2],o[0]=i[2]*Math.sin(r)+i[0]*Math.cos(r),o[1]=i[1],o[2]=i[2]*Math.cos(r)-i[0]*Math.sin(r),n[0]=o[0]+e[0],n[1]=o[1]+e[1],n[2]=o[2]+e[2],n}function Ee(n,t,e,r){let i=[],o=[];return i[0]=t[0]-e[0],i[1]=t[1]-e[1],i[2]=t[2]-e[2],o[0]=i[0]*Math.cos(r)-i[1]*Math.sin(r),o[1]=i[0]*Math.sin(r)+i[1]*Math.cos(r),o[2]=i[2],n[0]=o[0]+e[0],n[1]=o[1]+e[1],n[2]=o[2]+e[2],n}function ye(n,t){let e=Yt(n[0],n[1],n[2]),r=Yt(t[0],t[1],t[2]);le(e,e),le(r,r);let i=he(e,r);return i>1?0:i<-1?Math.PI:Math.acos(i)}function Se(n){return"vec3("+n[0]+", "+n[1]+", "+n[2]+")"}function we(n,t){return n[0]===t[0]&&n[1]===t[1]&&n[2]===t[2]}function Le(n,t){let e=n[0],r=n[1],i=n[2],o=t[0],a=t[1],u=t[2];return Math.abs(e-o)<=d*Math.max(1,Math.abs(e),Math.abs(o))&&Math.abs(r-a)<=d*Math.max(1,Math.abs(r),Math.abs(a))&&Math.abs(i-u)<=d*Math.max(1,Math.abs(i),Math.abs(u))}const Re=Qt,Te=Kt,Pe=Jt,Ae=ae,Ne=ue,Oe=kt,ze=ce,qe=function(){let n=Zt();return function(t,e,r,i,o,a){let u,c;for(e||(e=3),r||(r=0),c=i?Math.min(i*e+r,t.length):t.length,u=r;u<c;u+=e)n[0]=t[u],n[1]=t[u+1],n[2]=t[u+2],o(n,n,a),t[u]=n[0],t[u+1]=n[1],t[u+2]=n[2];return t}}();function Fe(){let n=new m(4);return n[0]=0,n[1]=0,n[2]=0,n[3]=0,n}function De(n){let t=new m(4);return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t}function Ce(n,t,e,r){let i=new m(4);return i[0]=n,i[1]=t,i[2]=e,i[3]=r,i}function Ge(n,t){return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n}function He(n,t,e,r,i){return n[0]=t,n[1]=e,n[2]=r,n[3]=i,n}function Ue(n,t,e){return n[0]=t[0]+e[0],n[1]=t[1]+e[1],n[2]=t[2]+e[2],n[3]=t[3]+e[3],n}function Be(n,t,e){return n[0]=t[0]-e[0],n[1]=t[1]-e[1],n[2]=t[2]-e[2],n[3]=t[3]-e[3],n}function Ze(n,t,e){return n[0]=t[0]*e[0],n[1]=t[1]*e[1],n[2]=t[2]*e[2],n[3]=t[3]*e[3],n}function Ve(n,t,e){return n[0]=t[0]/e[0],n[1]=t[1]/e[1],n[2]=t[2]/e[2],n[3]=t[3]/e[3],n}function ke(n,t){return n[0]=Math.ceil(t[0]),n[1]=Math.ceil(t[1]),n[2]=Math.ceil(t[2]),n[3]=Math.ceil(t[3]),n}function Ye(n,t){return n[0]=Math.floor(t[0]),n[1]=Math.floor(t[1]),n[2]=Math.floor(t[2]),n[3]=Math.floor(t[3]),n}function je(n,t,e){return n[0]=Math.min(t[0],e[0]),n[1]=Math.min(t[1],e[1]),n[2]=Math.min(t[2],e[2]),n[3]=Math.min(t[3],e[3]),n}function Xe(n,t,e){return n[0]=Math.max(t[0],e[0]),n[1]=Math.max(t[1],e[1]),n[2]=Math.max(t[2],e[2]),n[3]=Math.max(t[3],e[3]),n}function We(n,t){return n[0]=Math.round(t[0]),n[1]=Math.round(t[1]),n[2]=Math.round(t[2]),n[3]=Math.round(t[3]),n}function Qe(n,t,e){return n[0]=t[0]*e,n[1]=t[1]*e,n[2]=t[2]*e,n[3]=t[3]*e,n}function Ke(n,t,e,r){return n[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n[2]=t[2]+e[2]*r,n[3]=t[3]+e[3]*r,n}function Je(n,t){let e=t[0]-n[0],r=t[1]-n[1],i=t[2]-n[2],o=t[3]-n[3];return Math.sqrt(e*e+r*r+i*i+o*o)}function $e(n,t){let e=t[0]-n[0],r=t[1]-n[1],i=t[2]-n[2],o=t[3]-n[3];return e*e+r*r+i*i+o*o}function nr(n){let t=n[0],e=n[1],r=n[2],i=n[3];return Math.sqrt(t*t+e*e+r*r+i*i)}function tr(n){let t=n[0],e=n[1],r=n[2],i=n[3];return t*t+e*e+r*r+i*i}function er(n,t){return n[0]=-t[0],n[1]=-t[1],n[2]=-t[2],n[3]=-t[3],n}function rr(n,t){return n[0]=1/t[0],n[1]=1/t[1],n[2]=1/t[2],n[3]=1/t[3],n}function ir(n,t){let e=t[0],r=t[1],i=t[2],o=t[3],a=e*e+r*r+i*i+o*o;return a>0&&(a=1/Math.sqrt(a),n[0]=e*a,n[1]=r*a,n[2]=i*a,n[3]=o*a),n}function or(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]+n[3]*t[3]}function ar(n,t,e,r){let i=t[0],o=t[1],a=t[2],u=t[3];return n[0]=i+r*(e[0]-i),n[1]=o+r*(e[1]-o),n[2]=a+r*(e[2]-a),n[3]=u+r*(e[3]-u),n}function ur(n,t){var e,r,i,o,a,u;t=t||1;do{a=(e=2*_()-1)*e+(r=2*_()-1)*r}while(a>=1);do{u=(i=2*_()-1)*i+(o=2*_()-1)*o}while(u>=1);var c=Math.sqrt((1-a)/u);return n[0]=Qe*e,n[1]=Qe*r,n[2]=Qe*i*c,n[3]=Qe*o*c,n}function cr(n,t,e){let r=t[0],i=t[1],o=t[2],a=t[3];return n[0]=e[0]*r+e[4]*i+e[8]*o+e[12]*a,n[1]=e[1]*r+e[5]*i+e[9]*o+e[13]*a,n[2]=e[2]*r+e[6]*i+e[10]*o+e[14]*a,n[3]=e[3]*r+e[7]*i+e[11]*o+e[15]*a,n}function sr(n,t,e){let r=t[0],i=t[1],o=t[2],a=e[0],u=e[1],c=e[2],s=e[3],f=s*r+u*o-c*i,l=s*i+c*r-a*o,h=s*o+a*i-u*r,d=-a*r-u*i-c*o;return n[0]=f*s+d*-a+l*-c-h*-u,n[1]=l*s+d*-u+h*-a-f*-c,n[2]=h*s+d*-c+f*-u-l*-a,n[3]=t[3],n}function fr(n){return"vec4("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+")"}function lr(n,t){return n[0]===t[0]&&n[1]===t[1]&&n[2]===t[2]&&n[3]===t[3]}function hr(n,t){let e=n[0],r=n[1],i=n[2],o=n[3],a=t[0],u=t[1],c=t[2],s=t[3];return Math.abs(e-a)<=d*Math.max(1,Math.abs(e),Math.abs(a))&&Math.abs(r-u)<=d*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(i-c)<=d*Math.max(1,Math.abs(i),Math.abs(c))&&Math.abs(o-s)<=d*Math.max(1,Math.abs(o),Math.abs(s))}const dr=Be,mr=Ze,_r=Ve,Mr=Je,vr=$e,gr=nr,xr=tr,pr=function(){let n=Fe();return function(t,e,r,i,o,a){let u,c;for(e||(e=4),r||(r=0),c=i?Math.min(i*e+r,t.length):t.length,u=r;u<c;u+=e)n[0]=t[u],n[1]=t[u+1],n[2]=t[u+2],n[3]=t[u+3],o(n,n,a),t[u]=n[0],t[u+1]=n[1],t[u+2]=n[2],t[u+3]=n[3];return t}}();function Ir(){let n=new m(4);return n[0]=0,n[1]=0,n[2]=0,n[3]=1,n}function br(n){return n[0]=0,n[1]=0,n[2]=0,n[3]=1,n}function Er(n,t,e){e*=.5;let r=Math.sin(e);return n[0]=r*t[0],n[1]=r*t[1],n[2]=r*t[2],n[3]=Math.cos(e),n}function yr(n,t){let e=2*Math.acos(t[3]),r=Math.sin(e/2);return 0!=r?(n[0]=t[0]/r,n[1]=t[1]/r,n[2]=t[2]/r):(n[0]=1,n[1]=0,n[2]=0),e}function Sr(n,t,e){let r=t[0],i=t[1],o=t[2],a=t[3],u=e[0],c=e[1],s=e[2],f=e[3];return n[0]=r*f+a*u+i*s-o*c,n[1]=i*f+a*c+o*u-r*s,n[2]=o*f+a*s+r*c-i*u,n[3]=a*f-r*u-i*c-o*s,n}function wr(n,t,e){e*=.5;let r=t[0],i=t[1],o=t[2],a=t[3],u=Math.sin(e),c=Math.cos(e);return n[0]=r*c+a*u,n[1]=i*c+o*u,n[2]=o*c-i*u,n[3]=a*c-r*u,n}function Lr(n,t,e){e*=.5;let r=t[0],i=t[1],o=t[2],a=t[3],u=Math.sin(e),c=Math.cos(e);return n[0]=r*c-o*u,n[1]=i*c+a*u,n[2]=o*c+r*u,n[3]=a*c-i*u,n}function Rr(n,t,e){e*=.5;let r=t[0],i=t[1],o=t[2],a=t[3],u=Math.sin(e),c=Math.cos(e);return n[0]=r*c+i*u,n[1]=i*c-r*u,n[2]=o*c+a*u,n[3]=a*c-o*u,n}function Tr(n,t){let e=t[0],r=t[1],i=t[2];return n[0]=e,n[1]=r,n[2]=i,n[3]=Math.sqrt(Math.abs(1-e*e-r*r-i*i)),n}function Pr(n,t,e,r){let i,o,a,u,c,s=t[0],f=t[1],l=t[2],h=t[3],d=e[0],m=e[1],_=e[2],M=e[3];return(o=s*d+f*m+l*_+h*M)<0&&(o=-o,d=-d,m=-m,_=-_,M=-M),1-o>1e-6?(i=Math.acos(o),a=Math.sin(i),u=Math.sin((1-r)*i)/a,c=Math.sin(r*i)/a):(u=1-r,c=r),n[0]=u*s+c*d,n[1]=u*f+c*m,n[2]=u*l+c*_,n[3]=u*h+c*M,n}function Ar(n,t){let e=t[0],r=t[1],i=t[2],o=t[3],a=e*e+r*r+i*i+o*o,u=a?1/a:0;return n[0]=-e*u,n[1]=-r*u,n[2]=-i*u,n[3]=o*u,n}function Nr(n,t){return n[0]=-t[0],n[1]=-t[1],n[2]=-t[2],n[3]=t[3],n}function Or(n,t){let e,r=t[0]+t[4]+t[8];if(r>0)e=Math.sqrt(r+1),n[3]=.5*e,e=.5/e,n[0]=(t[5]-t[7])*e,n[1]=(t[6]-t[2])*e,n[2]=(t[1]-t[3])*e;else{let r=0;t[4]>t[0]&&(r=1),t[8]>t[3*r+r]&&(r=2);let i=(r+1)%3,o=(r+2)%3;e=Math.sqrt(t[3*r+r]-t[3*i+i]-t[3*o+o]+1),n[r]=.5*e,e=.5/e,n[3]=(t[3*i+o]-t[3*o+i])*e,n[i]=(t[3*i+r]+t[3*r+i])*e,n[o]=(t[3*o+r]+t[3*r+o])*e}return n}function zr(n,t,e,r){let i=.5*Math.PI/180;t*=i,e*=i,r*=i;let o=Math.sin(t),a=Math.cos(t),u=Math.sin(e),c=Math.cos(e),s=Math.sin(r),f=Math.cos(r);return n[0]=o*c*f-a*u*s,n[1]=a*u*f+o*c*s,n[2]=a*c*s-o*u*f,n[3]=a*c*f+o*u*s,n}function qr(n){return"quat("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+")"}const Fr=De,Dr=Ce,Cr=Ge,Gr=He,Hr=Ue,Ur=Sr,Br=Qe,Zr=or,Vr=ar,kr=nr,Yr=kr,jr=tr,Xr=jr,Wr=ir,Qr=lr,Kr=hr,Jr=function(){let n=Zt(),t=Yt(1,0,0),e=Yt(0,1,0);return function(r,i,o){let a=he(i,o);return a<-.999999?(de(n,t,i),Oe(n)<1e-6&&de(n,e,i),le(n,n),Er(r,n,Math.PI),r):a>.999999?(r[0]=0,r[1]=0,r[2]=0,r[3]=1,r):(de(n,i,o),r[0]=n[0],r[1]=n[1],r[2]=n[2],r[3]=1+a,Wr(r,r))}}(),$r=function(){let n=Ir(),t=Ir();return function(e,r,i,o,a,u){return Pr(n,r,a,u),Pr(t,i,o,u),Pr(e,n,t,2*u*(1-u)),e}}(),ni=function(){let n=gn();return function(t,e,r,i){return n[0]=r[0],n[3]=r[1],n[6]=r[2],n[1]=i[0],n[4]=i[1],n[7]=i[2],n[2]=-e[0],n[5]=-e[1],n[8]=-e[2],Wr(t,Or(t,n))}}();function ti(){let n=new m(8);return n[0]=0,n[1]=0,n[2]=0,n[3]=1,n[4]=0,n[5]=0,n[6]=0,n[7]=0,n}function ei(n){let t=new m(8);return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t}function ri(n,t,e,r,i,o,a,u){let c=new m(8);return c[0]=n,c[1]=t,c[2]=e,c[3]=r,c[4]=i,c[5]=o,c[6]=a,c[7]=u,c}function ii(n,t,e,r,i,o,a){let u=new m(8);u[0]=n,u[1]=t,u[2]=e,u[3]=r;let c=.5*i,s=.5*o,f=.5*a;return u[4]=c*r+s*e-f*t,u[5]=s*r+f*n-c*e,u[6]=f*r+c*t-s*n,u[7]=-c*n-s*t-f*e,u}function oi(n,t,e){let r=.5*e[0],i=.5*e[1],o=.5*e[2],a=t[0],u=t[1],c=t[2],s=t[3];return n[0]=a,n[1]=u,n[2]=c,n[3]=s,n[4]=r*s+i*c-o*u,n[5]=i*s+o*a-r*c,n[6]=o*s+r*u-i*a,n[7]=-r*a-i*u-o*c,n}function ai(n,t){return n[0]=0,n[1]=0,n[2]=0,n[3]=1,n[4]=.5*t[0],n[5]=.5*t[1],n[6]=.5*t[2],n[7]=0,n}function ui(n,t){return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=0,n[5]=0,n[6]=0,n[7]=0,n}function ci(n,t){let e=Ir();Et(e,t);let r=new m(3);return It(r,t),oi(n,e,r),n}function si(n,t){return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n}function fi(n){return n[0]=0,n[1]=0,n[2]=0,n[3]=1,n[4]=0,n[5]=0,n[6]=0,n[7]=0,n}function li(n,t,e,r,i,o,a,u,c){return n[0]=t,n[1]=e,n[2]=r,n[3]=i,n[4]=o,n[5]=a,n[6]=u,n[7]=c,n}const hi=Cr;function di(n,t){return n[0]=t[4],n[1]=t[5],n[2]=t[6],n[3]=t[7],n}const mi=Cr;function _i(n,t){return n[4]=t[0],n[5]=t[1],n[6]=t[2],n[7]=t[3],n}function Mi(n,t){let e=t[4],r=t[5],i=t[6],o=t[7],a=-t[0],u=-t[1],c=-t[2],s=t[3];return n[0]=2*(e*s+o*a+r*c-i*u),n[1]=2*(r*s+o*u+i*a-e*c),n[2]=2*(i*s+o*c+e*u-r*a),n}function vi(n,t,e){let r=t[0],i=t[1],o=t[2],a=t[3],u=.5*e[0],c=.5*e[1],s=.5*e[2],f=t[4],l=t[5],h=t[6],d=t[7];return n[0]=r,n[1]=i,n[2]=o,n[3]=a,n[4]=a*u+i*s-o*c+f,n[5]=a*c+o*u-r*s+l,n[6]=a*s+r*c-i*u+h,n[7]=-r*u-i*c-o*s+d,n}function gi(n,t,e){let r=-t[0],i=-t[1],o=-t[2],a=t[3],u=t[4],c=t[5],s=t[6],f=t[7],l=u*a+f*r+c*o-s*i,h=c*a+f*i+s*r-u*o,d=s*a+f*o+u*i-c*r,m=f*a-u*r-c*i-s*o;return wr(n,t,e),r=n[0],i=n[1],o=n[2],a=n[3],n[4]=l*a+m*r+h*o-d*i,n[5]=h*a+m*i+d*r-l*o,n[6]=d*a+m*o+l*i-h*r,n[7]=m*a-l*r-h*i-d*o,n}function xi(n,t,e){let r=-t[0],i=-t[1],o=-t[2],a=t[3],u=t[4],c=t[5],s=t[6],f=t[7],l=u*a+f*r+c*o-s*i,h=c*a+f*i+s*r-u*o,d=s*a+f*o+u*i-c*r,m=f*a-u*r-c*i-s*o;return Lr(n,t,e),r=n[0],i=n[1],o=n[2],a=n[3],n[4]=l*a+m*r+h*o-d*i,n[5]=h*a+m*i+d*r-l*o,n[6]=d*a+m*o+l*i-h*r,n[7]=m*a-l*r-h*i-d*o,n}function pi(n,t,e){let r=-t[0],i=-t[1],o=-t[2],a=t[3],u=t[4],c=t[5],s=t[6],f=t[7],l=u*a+f*r+c*o-s*i,h=c*a+f*i+s*r-u*o,d=s*a+f*o+u*i-c*r,m=f*a-u*r-c*i-s*o;return Rr(n,t,e),r=n[0],i=n[1],o=n[2],a=n[3],n[4]=l*a+m*r+h*o-d*i,n[5]=h*a+m*i+d*r-l*o,n[6]=d*a+m*o+l*i-h*r,n[7]=m*a-l*r-h*i-d*o,n}function Ii(n,t,e){let r=e[0],i=e[1],o=e[2],a=e[3],u=t[0],c=t[1],s=t[2],f=t[3];return n[0]=u*a+f*r+c*o-s*i,n[1]=c*a+f*i+s*r-u*o,n[2]=s*a+f*o+u*i-c*r,n[3]=f*a-u*r-c*i-s*o,u=t[4],c=t[5],s=t[6],f=t[7],n[4]=u*a+f*r+c*o-s*i,n[5]=c*a+f*i+s*r-u*o,n[6]=s*a+f*o+u*i-c*r,n[7]=f*a-u*r-c*i-s*o,n}function bi(n,t,e){let r=t[0],i=t[1],o=t[2],a=t[3],u=e[0],c=e[1],s=e[2],f=e[3];return n[0]=r*f+a*u+i*s-o*c,n[1]=i*f+a*c+o*u-r*s,n[2]=o*f+a*s+r*c-i*u,n[3]=a*f-r*u-i*c-o*s,u=e[4],c=e[5],s=e[6],f=e[7],n[4]=r*f+a*u+i*s-o*c,n[5]=i*f+a*c+o*u-r*s,n[6]=o*f+a*s+r*c-i*u,n[7]=a*f-r*u-i*c-o*s,n}function Ei(n,t,e,r){if(Math.abs(r)<d)return si(n,t);let i=Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]);r*=.5;let o=Math.sin(r),a=o*e[0]/i,u=o*e[1]/i,c=o*e[2]/i,s=Math.cos(r),f=t[0],l=t[1],h=t[2],m=t[3];n[0]=f*s+m*a+l*c-h*u,n[1]=l*s+m*u+h*a-f*c,n[2]=h*s+m*c+f*u-l*a,n[3]=m*s-f*a-l*u-h*c;let _=t[4],M=t[5],v=t[6],g=t[7];return n[4]=_*s+g*a+M*c-v*u,n[5]=M*s+g*u+v*a-_*c,n[6]=v*s+g*c+_*u-M*a,n[7]=g*s-_*a-M*u-v*c,n}function yi(n,t,e){return n[0]=t[0]+e[0],n[1]=t[1]+e[1],n[2]=t[2]+e[2],n[3]=t[3]+e[3],n[4]=t[4]+e[4],n[5]=t[5]+e[5],n[6]=t[6]+e[6],n[7]=t[7]+e[7],n}function Si(n,t,e){let r=t[0],i=t[1],o=t[2],a=t[3],u=e[4],c=e[5],s=e[6],f=e[7],l=t[4],h=t[5],d=t[6],m=t[7],_=e[0],M=e[1],v=e[2],g=e[3];return n[0]=r*g+a*_+i*v-o*M,n[1]=i*g+a*M+o*_-r*v,n[2]=o*g+a*v+r*M-i*_,n[3]=a*g-r*_-i*M-o*v,n[4]=r*f+a*u+i*s-o*c+l*g+m*_+h*v-d*M,n[5]=i*f+a*c+o*u-r*s+h*g+m*M+d*_-l*v,n[6]=o*f+a*s+r*c-i*u+d*g+m*v+l*M-h*_,n[7]=a*f-r*u-i*c-o*s+m*g-l*_-h*M-d*v,n}const wi=Si;function Li(n,t,e){return n[0]=t[0]*e,n[1]=t[1]*e,n[2]=t[2]*e,n[3]=t[3]*e,n[4]=t[4]*e,n[5]=t[5]*e,n[6]=t[6]*e,n[7]=t[7]*e,n}const Ri=Zr;function Ti(n,t,e,r){let i=1-r;return Ri(t,e)<0&&(r=-r),n[0]=t[0]*i+e[0]*r,n[1]=t[1]*i+e[1]*r,n[2]=t[2]*i+e[2]*r,n[3]=t[3]*i+e[3]*r,n[4]=t[4]*i+e[4]*r,n[5]=t[5]*i+e[5]*r,n[6]=t[6]*i+e[6]*r,n[7]=t[7]*i+e[7]*r,n}function Pi(n,t){let e=zi(t);return n[0]=-t[0]/e,n[1]=-t[1]/e,n[2]=-t[2]/e,n[3]=t[3]/e,n[4]=-t[4]/e,n[5]=-t[5]/e,n[6]=-t[6]/e,n[7]=t[7]/e,n}function Ai(n,t){return n[0]=-t[0],n[1]=-t[1],n[2]=-t[2],n[3]=t[3],n[4]=-t[4],n[5]=-t[5],n[6]=-t[6],n[7]=t[7],n}const Ni=kr,Oi=Ni,zi=jr,qi=zi;function Fi(n,t){let e=zi(t);return e>0&&(e=Math.sqrt(e),n[0]=t[0]/e,n[1]=t[1]/e,n[2]=t[2]/e,n[3]=t[3]/e,n[4]=t[4]/e,n[5]=t[5]/e,n[6]=t[6]/e,n[7]=t[7]/e),n}function Di(n){return"quat2("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+", "+n[4]+", "+n[5]+", "+n[6]+", "+n[7]+")"}function Ci(n,t){return n[0]===t[0]&&n[1]===t[1]&&n[2]===t[2]&&n[3]===t[3]&&n[4]===t[4]&&n[5]===t[5]&&n[6]===t[6]&&n[7]===t[7]}function Gi(n,t){let e=n[0],r=n[1],i=n[2],o=n[3],a=n[4],u=n[5],c=n[6],s=n[7],f=t[0],l=t[1],h=t[2],m=t[3],_=t[4],M=t[5],v=t[6],g=t[7];return Math.abs(e-f)<=d*Math.max(1,Math.abs(e),Math.abs(f))&&Math.abs(r-l)<=d*Math.max(1,Math.abs(r),Math.abs(l))&&Math.abs(i-h)<=d*Math.max(1,Math.abs(i),Math.abs(h))&&Math.abs(o-m)<=d*Math.max(1,Math.abs(o),Math.abs(m))&&Math.abs(a-_)<=d*Math.max(1,Math.abs(a),Math.abs(_))&&Math.abs(u-M)<=d*Math.max(1,Math.abs(u),Math.abs(M))&&Math.abs(c-v)<=d*Math.max(1,Math.abs(c),Math.abs(v))&&Math.abs(s-g)<=d*Math.max(1,Math.abs(s),Math.abs(g))}function Hi(){let n=new m(2);return n[0]=0,n[1]=0,n}function Ui(n){let t=new m(2);return t[0]=n[0],t[1]=n[1],t}function Bi(n,t){let e=new m(2);return e[0]=n,e[1]=t,e}function Zi(n,t){return n[0]=t[0],n[1]=t[1],n}function Vi(n,t,e){return n[0]=t,n[1]=e,n}function ki(n,t,e){return n[0]=t[0]+e[0],n[1]=t[1]+e[1],n}function Yi(n,t,e){return n[0]=t[0]-e[0],n[1]=t[1]-e[1],n}function ji(n,t,e){return n[0]=t[0]*e[0],n[1]=t[1]*e[1],n}function Xi(n,t,e){return n[0]=t[0]/e[0],n[1]=t[1]/e[1],n}function Wi(n,t){return n[0]=Math.ceil(t[0]),n[1]=Math.ceil(t[1]),n}function Qi(n,t){return n[0]=Math.floor(t[0]),n[1]=Math.floor(t[1]),n}function Ki(n,t,e){return n[0]=Math.min(t[0],e[0]),n[1]=Math.min(t[1],e[1]),n}function Ji(n,t,e){return n[0]=Math.max(t[0],e[0]),n[1]=Math.max(t[1],e[1]),n}function $i(n,t){return n[0]=Math.round(t[0]),n[1]=Math.round(t[1]),n}function no(n,t,e){return n[0]=t[0]*e,n[1]=t[1]*e,n}function to(n,t,e,r){return n[0]=t[0]+e[0]*r,n[1]=t[1]+e[1]*r,n}function eo(n,t){var e=t[0]-n[0],r=t[1]-n[1];return Math.sqrt(e*e+r*r)}function ro(n,t){var e=t[0]-n[0],r=t[1]-n[1];return e*e+r*r}function io(n){var t=n[0],e=n[1];return Math.sqrt(t*t+e*e)}function oo(n){var t=n[0],e=n[1];return t*t+e*e}function ao(n,t){return n[0]=-t[0],n[1]=-t[1],n}function uo(n,t){return n[0]=1/t[0],n[1]=1/t[1],n}function co(n,t){var e=t[0],r=t[1],i=e*e+r*r;return i>0&&(i=1/Math.sqrt(i),n[0]=t[0]*i,n[1]=t[1]*i),n}function so(n,t){return n[0]*t[0]+n[1]*t[1]}function fo(n,t,e){var r=t[0]*e[1]-t[1]*e[0];return n[0]=n[1]=0,n[2]=r,n}function lo(n,t,e,r){var i=t[0],o=t[1];return n[0]=i+r*(e[0]-i),n[1]=o+r*(e[1]-o),n}function ho(n,t){t=t||1;var e=2*_()*Math.PI;return n[0]=Math.cos(e)*t,n[1]=Math.sin(e)*t,n}function mo(n,t,e){var r=t[0],i=t[1];return n[0]=e[0]*r+e[2]*i,n[1]=e[1]*r+e[3]*i,n}function _o(n,t,e){var r=t[0],i=t[1];return n[0]=e[0]*r+e[2]*i+e[4],n[1]=e[1]*r+e[3]*i+e[5],n}function Mo(n,t,e){var r=t[0],i=t[1];return n[0]=e[0]*r+e[3]*i+e[6],n[1]=e[1]*r+e[4]*i+e[7],n}function vo(n,t,e){let r=t[0],i=t[1];return n[0]=e[0]*r+e[4]*i+e[12],n[1]=e[1]*r+e[5]*i+e[13],n}function go(n,t,e,r){let i=t[0]-e[0],o=t[1]-e[1],a=Math.sin(r),u=Math.cos(r);return n[0]=i*u-o*a+e[0],n[1]=i*a+o*u+e[1],n}function xo(n,t){let e=n[0],r=n[1],i=t[0],o=t[1],a=e*e+r*r;a>0&&(a=1/Math.sqrt(a));let u=i*i+o*o;u>0&&(u=1/Math.sqrt(u));let c=(e*i+r*o)*a*u;return c>1?0:c<-1?Math.PI:Math.acos(c)}function po(n){return"vec2("+n[0]+", "+n[1]+")"}function Io(n,t){return n[0]===t[0]&&n[1]===t[1]}function bo(n,t){let e=n[0],r=n[1],i=t[0],o=t[1];return Math.abs(e-i)<=d*Math.max(1,Math.abs(e),Math.abs(i))&&Math.abs(r-o)<=d*Math.max(1,Math.abs(r),Math.abs(o))}const Eo=io,yo=Yi,So=ji,wo=Xi,Lo=eo,Ro=ro,To=oo,Po=function(){let n=Hi();return function(t,e,r,i,o,a){let u,c;for(e||(e=2),r||(r=0),c=i?Math.min(i*e+r,t.length):t.length,u=r;u<c;u+=e)n[0]=t[u],n[1]=t[u+1],o(n,n,a),t[u]=n[0],t[u+1]=n[1];return t}}();e.d(t,"glMatrix",function(){return r}),e.d(t,"mat2",function(){return i}),e.d(t,"mat2d",function(){return o}),e.d(t,"mat3",function(){return a}),e.d(t,"mat4",function(){return u}),e.d(t,"quat",function(){return f}),e.d(t,"quat2",function(){return l}),e.d(t,"vec2",function(){return h}),e.d(t,"vec3",function(){return c}),e.d(t,"vec4",function(){return s})},2:function(n,t,e){"use strict"},40:function(n,t){n.exports="\nprecision mediump float;\nprecision mediump usampler2D;\n\n\n#if __VERSION__ == 100\n    #define texture(sampler, coord) texture2D(sampler, coord)\n#else \n    #define varying in\n#endif\n\n\n#if __VERSION__ == 100\n    #define fragColor gl_FragColor\n    #extension GL_OES_standard_derivatives : enable\n#else\n    layout(location = 0) out vec4 fragColor;\n#endif\n\n\nconst int NUM_TRIANGLES = 30;\nconst int NUM_VERTICES = 24;\nconst int NUM_COLORS = 5;\n\nconst float vertices[NUM_VERTICES * 3] = float[NUM_VERTICES * 3]\n(   // room\n    -1.000000, -1.000000, -1.000000, -1.000000, -1.000000, +1.000000,\n    -1.000000, +1.000000, -1.000000, -1.000000, +1.000000, +1.000000,\n    +0.988489, -1.000000, -1.000000, +0.976978, -1.000000, +1.000000,\n    +1.000000, +1.000000, -1.000000, +1.000000, +1.000000, +1.000000,\n    // short block\n    +0.043165, -1.000000, -0.592275, +0.043165, -0.398688, -0.592275,\n    -0.136691, -1.000000, -0.027182, -0.136691, -0.398688, -0.027182,\n    -0.705036, -1.000000, -0.195279, -0.705036, -0.398688, -0.195279,\n    -0.532374, -1.000000, -0.767525, -0.532374, -0.398688, -0.767525,\n    // tall block\n    +0.521583, -1.000000, -0.116595, +0.521583, +0.202624, -0.116595,\n    +0.697842, -1.000000, +0.452074, +0.697842, +0.202624, +0.452074,\n    +0.129496, -1.000000, +0.630901, +0.129496, +0.202624, +0.630901,\n    -0.046763, -1.000000, +0.058655, -0.046763, +0.202624, +0.058655\n);\n\n// v0, v1, v2, color\nconst int indices[NUM_TRIANGLES * 4] = int[NUM_TRIANGLES * 4]\n(\n    // room ceiling\n    6, 7, 3, 1,\n    6, 3, 2, 1,\n    // room floor\n    4, 0, 1, 1,\n    4, 1, 5, 1,\n    // room front wall\n    // 6, 2, 0, 1,\n    // 6, 0, 4, 1,\n    // room back wall\n    5, 1, 3, 1,\n    5, 3, 7, 1,\n    // room right wall\n    1, 0, 2, 3,\n    1, 2, 3, 3,\n    // room left wall\n    4, 5, 7, 2,\n    4, 7, 6, 2,\n    // short block\n    15, 13, 11, 1,\n    15, 11,  9, 1,\n     8,  9, 11, 1,\n     8, 11, 10, 1,\n    14, 15,  9, 1,\n    14,  9,  8, 1,\n    12, 13, 15, 1,\n    12, 15, 14, 1,\n    10, 11, 13, 1,\n    10, 13, 12, 1,\n    // tall block\n    23, 21, 19, 1,\n    23, 19, 17, 1,\n    16, 17, 19, 1,\n    16, 19, 18, 1,\n    22, 23, 17, 1,\n    22, 17, 16, 1,\n    20, 21, 23, 1,\n    20, 23, 22, 1,\n    18, 19, 21, 1,\n    18, 21, 20, 1\n);\n\nconst float colors[NUM_COLORS * 3] = float[NUM_COLORS * 3]\n(\n    0.0000, 0.0000, 0.0000,  // 0 black\n    0.7295, 0.7355, 0.7290,  // 1 white\n    0.6110, 0.0555, 0.0620,  // 2 red\n    0.1170, 0.4125, 0.1150,  // 3 green\n    0.0620, 0.0555, 0.6110   // 4 blue\n);\n\n\nuniform sampler2D u_hsphere;\nuniform sampler2D u_lights;\nconst vec2 SPHERE_SAMPLER_SIZE = vec2(32, 32); // textureSize(u_hsphere, 0);\nconst vec2 LIGHT_SAMPLER_SIZE = vec2(32, 32); // textureSize(u_lights, 0);\n\n\nvec3 vertexFetch(const in float index) {\n    return vec3(\n        vertices[int(round(index)) * 3 + 0],\n        vertices[int(round(index)) * 3 + 1],\n        vertices[int(round(index)) * 3 + 2]\n    );\n}\n\nvec4 indexFetch(const in float index) {\n    return vec4(\n        indices[int(round(index)) * 4 + 0],\n        indices[int(round(index)) * 4 + 1],\n        indices[int(round(index)) * 4 + 2],\n        indices[int(round(index)) * 4 + 3]\n    );\n}\n\nvec3 colorFetch(const in float index) {\n    return vec3(\n        colors[int(round(index)) * 3 + 0],\n        colors[int(round(index)) * 3 + 1],\n        colors[int(round(index)) * 3 + 2]\n    );\n}\n\nvec3 hsphereFetch(const in vec2 index) {\n    return texture(u_hsphere, index / (SPHERE_SAMPLER_SIZE-1.0)).xyz;\n}\n\nvec3 lightFetch(const in vec2 index) {\n    return texture(u_lights, index / (LIGHT_SAMPLER_SIZE-1.0)).xyz;\n}\n\n\n\n/*\nneeds version specific stuff:\nlayout(location = 0) out vec4 fragColor;\n\nconst float NUM_TRIANGLES\nconst vec2 SPHERE_SAMPLER_SIZE\nconst vec2 LIGHT_SAMPLER_SIZE\n\n// functions to access the static data (vertices, indices, colors, hsphere samples, light samples):\nvec3 vertexFetch(const in float index) {}\nvec4 indexFetch(const in float index) {}\nvec3 colorFetch(const in float index) {}\nvec3 hsphereFetch(const in vec2 index) {}\nvec3 lightFetch(const in vec2 index) {}\n*/\n\nuniform int u_frame;\nuniform int u_rand;\nuniform vec3 u_eye;\nuniform vec4 u_viewport;\n\nvarying vec2 v_uv;\nvarying vec4 v_ray;\n\nconst vec3 up = vec3(0.0, 1.0, 0.0);\nconst vec4 SPHERE = vec4(-0.5, +0.0, +0.5, 0.25); // center, radius\nconst vec3 LIGHT_COLOR = vec3(1.0, 10.76 / 16.86, 3.7 / 16.86);\n\nconst float EPSILON  = 1e-6;\nconst float INFINITY = 1e+4;\n\nconst int BOUNCES = 4;\nconst float EXPOSURE = 4.0;\nconst float GAMMA = 2.1;\n\n\n\n// intersection with triangle\nbool intersectionTriangle(\n\tconst in vec3  triangle[3]\n,\tconst in vec3  origin\n,\tconst in vec3  ray\n,\tconst in float t_min\n,   out float t)\n{\n    vec3 e0 = triangle[1] - triangle[0];\n\tvec3 e1 = triangle[2] - triangle[0];\n\n\tvec3  h = cross(ray, e1);\n\tfloat a = dot(e0, h);\n\n\t// if(a > -EPSILON && a < EPSILON) // backface culling off\n\tif(a < EPSILON) // backface culling on\n\t\treturn false;\n\n\tfloat f = 1.0 / a;\n\n\tvec3  s = origin - triangle[0];\n\tfloat u = f * dot(s, h);\n\n\tif(u < 0.0 || u > 1.0)\n\t\treturn false;\n\n\tvec3  q = cross(s, e0);\n\tfloat v = f * dot(ray, q);\n\n\tif(v < 0.0 || u + v > 1.0)\n\t\treturn false;\n\n\tt = f * dot(e1, q);\n\n\treturn EPSILON < t && t < t_min;\n}\n\nbool intersectionSphere(\n    const in vec4  sphere\n,   const in vec3  origin\n,   const in vec3  ray\n,   const in float t_min\n,   out float t)\n{\n    float radius = sphere.w;\n    vec3 center = sphere.xyz; \n    vec3 rayOriginToSphereCenter = origin - center;\n    float dist = length(rayOriginToSphereCenter);\n    float dot_term = dot(ray, rayOriginToSphereCenter);\n    float someVar = dot_term * dot_term - dist * dist + radius * radius;\n    if (someVar < EPSILON) { // no intersection\n        return false;\n    }\n    t = -dot_term - sqrt(someVar);\n    return EPSILON < t && t < t_min;\n}\n\n// intersection with scene geometry\nfloat intersection(\n    const in vec3 origin\n,   const in vec3 ray\n,   out vec3 normal\n,   out vec3 color\n,   out bool reflecting)\n{\n    float t_min = INFINITY;\n    float t = INFINITY;\n\n    float colorIndex;\n\n    // intersection with triangles\n\tfor(int i = 0; i < int(NUM_TRIANGLES); ++i)\n\t{\n        vec3 triangle[3];\n        vec4 triangleIndices = indexFetch(float(i));\n\t\ttriangle[0] = vertexFetch(triangleIndices[0]);\n\t\ttriangle[1] = vertexFetch(triangleIndices[1]);\n\t\ttriangle[2] = vertexFetch(triangleIndices[2]);\n\n\t\tif(intersectionTriangle(triangle, origin, ray, t_min, t))\n\t\t{\n\t\t\tnormal = normalize(cross(\n                triangle[1] - triangle[0],\n                triangle[2] - triangle[0]\n            ));\n\t\t\tcolorIndex = triangleIndices[3];\n\t\t\tt_min = t;\n            reflecting = colorIndex == 5.0;\n\t\t}\n\t}\n\n    // intersection with sphere\n    if(intersectionSphere(SPHERE, origin, ray, t_min, t))\n    {\n        vec3 intersectionPoint = origin + ray*t;\n        normal = normalize(intersectionPoint - SPHERE.xyz);\n        colorIndex = 4.0;\n        t_min = t;\n        reflecting = true;\n    }\n\n    color = colorFetch(colorIndex);\n\n    return t_min;\n}\n\nvec3 randomPointOnHemisphere(const in int fragID)\n{\n\tfloat i = mod(float(fragID), (SPHERE_SAMPLER_SIZE[0] * SPHERE_SAMPLER_SIZE[1]));\n\n    float x = mod(i, SPHERE_SAMPLER_SIZE[0]);\n    float y = i / SPHERE_SAMPLER_SIZE[0];\n\n\treturn hsphereFetch(vec2(x,y));\n}\n\nvec3 randomPointInLight(const in int fragID)\n{\n\tfloat i = mod(float(fragID), LIGHT_SAMPLER_SIZE[0] * LIGHT_SAMPLER_SIZE[1]);\n\n    float x = mod(i, LIGHT_SAMPLER_SIZE[0]);\n    float y = i / LIGHT_SAMPLER_SIZE[0];\n\n\treturn lightFetch(vec2(x,y));\n}\n\n// intersection with scene geometry\nfloat shadow(\n\tconst in int fragID\n,\tconst in vec3 origin\n,\tconst in vec3 normal\n,   out float sqDistToLight)\n{\n    vec3 pointInLight = randomPointInLight(fragID);\n    float distToLight = distance(pointInLight, origin);\n\n\tvec3 ray_direction = normalize(pointInLight - origin);\n\n\tfloat a = dot(ray_direction, normal);\n\tif(a < EPSILON)\n\t \treturn 0.0;\n\n    vec3 v1,v2; bool r; // unused\n    float dist = intersection(origin, ray_direction, v1, v2, r);\n    if(EPSILON < dist && dist <= distToLight)\n        return 0.0;\n        \n    sqDistToLight = distToLight * distToLight;\n\treturn a;\n}\n\nmat3 computeTbn(in vec3 normal)\n{\n    vec3 arbNormal = vec3(-1.241284e-02, -7.011432e-01, +2.043006e-01);\n    arbNormal = mix(arbNormal, vec3(+2.019038e-01, +9.717299e-01, +1.223763e-01), \n        step(0.0, abs(dot(arbNormal, normal))));\n\n    vec3 e0 = cross(arbNormal, normal);\n\tvec3 e1 = cross(e0, normal);\n\n    return mat3(e0, normal, e1);\n}\n\n// http://gpupathtracer.blogspot.de/\n// http://www.iquilezles.org/www/articles/simplepathtracing/simplepathtracing.htm\n// http://undernones.blogspot.de/2010/12/gpu-ray-tracing-with-glsl.html\n// http://www.iquilezles.org/www/articles/simplegpurt/simplegpurt.htm\n// http://www.lighthouse3d.com/tutorials/maths/ray-triangle-intersection/\n\nvoid main()\n{\n    vec3 ray_origin = u_eye;\n    vec3 ray_direction = normalize((v_ray.xyz / v_ray.w) - ray_origin);\n\n    // fragment index for random variation\n\tvec2 xy = v_uv * vec2(u_viewport[0], u_viewport[1]);\n\tint fragID = int(xy.y * u_viewport[0] + xy.x + float(u_frame) + float(u_rand));\n\n\t// path color accumulation\n\tvec3 maskColor = vec3(1.0);\n\tvec3 pathColor = vec3(0.0);\n\n    // fragment is transparent before any intersection\n    float alpha = 0.0;\n\n\tfor(int bounce = 0; bounce < BOUNCES; ++bounce)\n\t{\n        // check intersection with scene geometry\n        vec3 normal;\n        vec3 color;\n        bool reflecting;\n        float dist = intersection(ray_origin, ray_direction, normal, color, reflecting); \n\n        if(dist == INFINITY)\n            break; // TODO: break on no intersection, with correct path color weight?\n\n        // update ray for next bounce\n        ray_origin = ray_origin + ray_direction * dist;\n        if(reflecting){\n            ray_direction = reflect(ray_direction, normal);\n            if(bounce == 0) {\n                alpha = 1.0;\n            }\n            continue;\n        }\n        ray_direction = computeTbn(normal) * randomPointOnHemisphere(fragID + bounce);\n\n        // compute lighting and color\n        alpha = 1.0;\n        float squaredDistToLight = 1.0;\n  \t\tfloat lighting = shadow(fragID + bounce, ray_origin, normal, squaredDistToLight);\n  \t    maskColor *= color;\n  \t\tpathColor += maskColor * LIGHT_COLOR * lighting / squaredDistToLight;\n    }\n\n    fragColor = vec4(pow(EXPOSURE * pathColor, vec3(1.0 / GAMMA)), alpha);\n}\n\n"},41:function(n,t){n.exports="\n\n#if __VERSION__ == 100\n    #define texture(sampler, coord) texture2D(sampler, coord)\n#else \n    #define varying in\n#endif\n\n\n#if __VERSION__ == 100\n    #define fragColor gl_FragColor\n    #extension GL_OES_standard_derivatives : enable\n    precision mediump float;\n#else\n    precision mediump float;\n    layout(location = 0) out vec4 fragColor;\n#endif\n\n\nuniform sampler2D u_vertices; // 1D\nuniform sampler2D u_indices;  // 1D\nuniform sampler2D u_colors;   // 1D\nconst float NUM_VERTICES = 24.0;\nconst float NUM_TRIANGLES = 30.0;\nconst float NUM_COLORS = 5.0;\n\nuniform sampler2D u_hsphere;\nuniform sampler2D u_lights;\nconst vec2 SPHERE_SAMPLER_SIZE = vec2(32, 32); // textureSize(u_hsphere, 0);\nconst vec2 LIGHT_SAMPLER_SIZE = vec2(32, 32); // textureSize(u_lights, 0);\n\n\nconst vec3 premultUint8x3 = vec3(255.0 / 256.0, 255.0 / 65536.0, 255.0 / 16777216.0);\nfloat uint8x3_to_float24x1(const in vec3 v) {\n    return dot(v, premultUint8x3); // a1 * b1 + a2 * b2 + a3 * b3  ;)\n}\n\nvec3 vertexFetch(const in float index) {\n    // *3 because every vertex has 3 floats\n    float realIndex = index * 3.0;\n    // one lookup for each float; a float is encoded in 3 bytes (xyz)\n    vec2 floatIndex1 = vec2((realIndex      ) / (NUM_VERTICES* 3.0 - 1.0), 0);\n    vec2 floatIndex2 = vec2((realIndex + 1.0) / (NUM_VERTICES* 3.0 - 1.0), 0);\n    vec2 floatIndex3 = vec2((realIndex + 2.0) / (NUM_VERTICES* 3.0 - 1.0), 0);\n    // read and scale from [0..1] to [-1..+1]\n    float x = uint8x3_to_float24x1(texture(u_vertices, floatIndex1).xyz) * 2.0 - 1.0;\n    float y = uint8x3_to_float24x1(texture(u_vertices, floatIndex2).xyz) * 2.0 - 1.0;\n    float z = uint8x3_to_float24x1(texture(u_vertices, floatIndex3).xyz) * 2.0 - 1.0;\n\n    return vec3(x,y,z);\n}\n\nvec4 indexFetch(const in float index) {\n    // * 255 because openGL scales to [0..1]\n    return texture(u_indices, vec2(index / (NUM_TRIANGLES-1.0), 0)) * 255.0;\n}\n\nvec3 colorFetch(const in float index) {\n    // *3 because every color has 3 floats\n    float realIndex = index * 3.0;\n    // one lookup for each float; a float is encoded in 3 bytes (xyz)\n    vec2 floatIndex1 = vec2((realIndex      ) / (NUM_COLORS* 3.0 - 1.0), 0);\n    vec2 floatIndex2 = vec2((realIndex + 1.0) / (NUM_COLORS* 3.0 - 1.0), 0);\n    vec2 floatIndex3 = vec2((realIndex + 2.0) / (NUM_COLORS* 3.0 - 1.0), 0);\n\n    float x = uint8x3_to_float24x1(texture(u_colors, floatIndex1).xyz);\n    float y = uint8x3_to_float24x1(texture(u_colors, floatIndex2).xyz);\n    float z = uint8x3_to_float24x1(texture(u_colors, floatIndex3).xyz);\n\n    return vec3(x,y,z);\n}\n\nvec3 hsphereFetch(const in vec2 index) {\n    // *3 because every vector has 3 floats\n    vec2 realIndex = vec2(index.x * 3.0, index.y);\n    // one lookup for each float; a float is encoded in 3 bytes (xyz)\n    vec2 floatIndex1 = vec2((realIndex.x      ), realIndex.y) / (SPHERE_SAMPLER_SIZE * 3.0 - 1.0);\n    vec2 floatIndex2 = vec2((realIndex.x + 1.0), realIndex.y) / (SPHERE_SAMPLER_SIZE * 3.0 - 1.0);\n    vec2 floatIndex3 = vec2((realIndex.x + 2.0), realIndex.y) / (SPHERE_SAMPLER_SIZE * 3.0 - 1.0);\n\n    float x = uint8x3_to_float24x1(texture(u_hsphere, floatIndex1).xyz) * 2.0 - 1.0;\n    float y = uint8x3_to_float24x1(texture(u_hsphere, floatIndex2).xyz) * 2.0 - 1.0;\n    float z = uint8x3_to_float24x1(texture(u_hsphere, floatIndex3).xyz) * 2.0 - 1.0;\n\n    return vec3(x,y,z);\n}\n\nvec3 lightFetch(const in vec2 index) {\n    // *3 because every vector has 3 floats\n    vec2 realIndex = vec2(index.x * 3.0, index.y);\n    // one lookup for each float; a float is encoded in 3 bytes (xyz)\n    vec2 floatIndex1 = vec2((realIndex.x      ), realIndex.y) / (LIGHT_SAMPLER_SIZE * 3.0 - 1.0);\n    vec2 floatIndex2 = vec2((realIndex.x + 1.0), realIndex.y) / (LIGHT_SAMPLER_SIZE * 3.0 - 1.0);\n    vec2 floatIndex3 = vec2((realIndex.x + 2.0), realIndex.y) / (LIGHT_SAMPLER_SIZE * 3.0 - 1.0);\n    // read and scale from [0..1] to [-1..+1]\n    float x = uint8x3_to_float24x1(texture(u_lights, floatIndex1).xyz) * 2.0 - 1.0;\n    float y = uint8x3_to_float24x1(texture(u_lights, floatIndex2).xyz) * 2.0 - 1.0;\n    float z = uint8x3_to_float24x1(texture(u_lights, floatIndex3).xyz) * 2.0 - 1.0;\n\n    return vec3(x,y,z);\n}\n\n\n\n/*\nneeds version specific stuff:\nlayout(location = 0) out vec4 fragColor;\n\nconst float NUM_TRIANGLES\nconst vec2 SPHERE_SAMPLER_SIZE\nconst vec2 LIGHT_SAMPLER_SIZE\n\n// functions to access the static data (vertices, indices, colors, hsphere samples, light samples):\nvec3 vertexFetch(const in float index) {}\nvec4 indexFetch(const in float index) {}\nvec3 colorFetch(const in float index) {}\nvec3 hsphereFetch(const in vec2 index) {}\nvec3 lightFetch(const in vec2 index) {}\n*/\n\nuniform int u_frame;\nuniform int u_rand;\nuniform vec3 u_eye;\nuniform vec4 u_viewport;\n\nvarying vec2 v_uv;\nvarying vec4 v_ray;\n\nconst vec3 up = vec3(0.0, 1.0, 0.0);\nconst vec4 SPHERE = vec4(-0.5, +0.0, +0.5, 0.25); // center, radius\nconst vec3 LIGHT_COLOR = vec3(1.0, 10.76 / 16.86, 3.7 / 16.86);\n\nconst float EPSILON  = 1e-6;\nconst float INFINITY = 1e+4;\n\nconst int BOUNCES = 4;\nconst float EXPOSURE = 4.0;\nconst float GAMMA = 2.1;\n\n\n\n// intersection with triangle\nbool intersectionTriangle(\n\tconst in vec3  triangle[3]\n,\tconst in vec3  origin\n,\tconst in vec3  ray\n,\tconst in float t_min\n,   out float t)\n{\n    vec3 e0 = triangle[1] - triangle[0];\n\tvec3 e1 = triangle[2] - triangle[0];\n\n\tvec3  h = cross(ray, e1);\n\tfloat a = dot(e0, h);\n\n\t// if(a > -EPSILON && a < EPSILON) // backface culling off\n\tif(a < EPSILON) // backface culling on\n\t\treturn false;\n\n\tfloat f = 1.0 / a;\n\n\tvec3  s = origin - triangle[0];\n\tfloat u = f * dot(s, h);\n\n\tif(u < 0.0 || u > 1.0)\n\t\treturn false;\n\n\tvec3  q = cross(s, e0);\n\tfloat v = f * dot(ray, q);\n\n\tif(v < 0.0 || u + v > 1.0)\n\t\treturn false;\n\n\tt = f * dot(e1, q);\n\n\treturn EPSILON < t && t < t_min;\n}\n\nbool intersectionSphere(\n    const in vec4  sphere\n,   const in vec3  origin\n,   const in vec3  ray\n,   const in float t_min\n,   out float t)\n{\n    float radius = sphere.w;\n    vec3 center = sphere.xyz; \n    vec3 rayOriginToSphereCenter = origin - center;\n    float dist = length(rayOriginToSphereCenter);\n    float dot_term = dot(ray, rayOriginToSphereCenter);\n    float someVar = dot_term * dot_term - dist * dist + radius * radius;\n    if (someVar < EPSILON) { // no intersection\n        return false;\n    }\n    t = -dot_term - sqrt(someVar);\n    return EPSILON < t && t < t_min;\n}\n\n// intersection with scene geometry\nfloat intersection(\n    const in vec3 origin\n,   const in vec3 ray\n,   out vec3 normal\n,   out vec3 color\n,   out bool reflecting)\n{\n    float t_min = INFINITY;\n    float t = INFINITY;\n\n    float colorIndex;\n\n    // intersection with triangles\n\tfor(int i = 0; i < int(NUM_TRIANGLES); ++i)\n\t{\n        vec3 triangle[3];\n        vec4 triangleIndices = indexFetch(float(i));\n\t\ttriangle[0] = vertexFetch(triangleIndices[0]);\n\t\ttriangle[1] = vertexFetch(triangleIndices[1]);\n\t\ttriangle[2] = vertexFetch(triangleIndices[2]);\n\n\t\tif(intersectionTriangle(triangle, origin, ray, t_min, t))\n\t\t{\n\t\t\tnormal = normalize(cross(\n                triangle[1] - triangle[0],\n                triangle[2] - triangle[0]\n            ));\n\t\t\tcolorIndex = triangleIndices[3];\n\t\t\tt_min = t;\n            reflecting = colorIndex == 5.0;\n\t\t}\n\t}\n\n    // intersection with sphere\n    if(intersectionSphere(SPHERE, origin, ray, t_min, t))\n    {\n        vec3 intersectionPoint = origin + ray*t;\n        normal = normalize(intersectionPoint - SPHERE.xyz);\n        colorIndex = 4.0;\n        t_min = t;\n        reflecting = true;\n    }\n\n    color = colorFetch(colorIndex);\n\n    return t_min;\n}\n\nvec3 randomPointOnHemisphere(const in int fragID)\n{\n\tfloat i = mod(float(fragID), (SPHERE_SAMPLER_SIZE[0] * SPHERE_SAMPLER_SIZE[1]));\n\n    float x = mod(i, SPHERE_SAMPLER_SIZE[0]);\n    float y = i / SPHERE_SAMPLER_SIZE[0];\n\n\treturn hsphereFetch(vec2(x,y));\n}\n\nvec3 randomPointInLight(const in int fragID)\n{\n\tfloat i = mod(float(fragID), LIGHT_SAMPLER_SIZE[0] * LIGHT_SAMPLER_SIZE[1]);\n\n    float x = mod(i, LIGHT_SAMPLER_SIZE[0]);\n    float y = i / LIGHT_SAMPLER_SIZE[0];\n\n\treturn lightFetch(vec2(x,y));\n}\n\n// intersection with scene geometry\nfloat shadow(\n\tconst in int fragID\n,\tconst in vec3 origin\n,\tconst in vec3 normal\n,   out float sqDistToLight)\n{\n    vec3 pointInLight = randomPointInLight(fragID);\n    float distToLight = distance(pointInLight, origin);\n\n\tvec3 ray_direction = normalize(pointInLight - origin);\n\n\tfloat a = dot(ray_direction, normal);\n\tif(a < EPSILON)\n\t \treturn 0.0;\n\n    vec3 v1,v2; bool r; // unused\n    float dist = intersection(origin, ray_direction, v1, v2, r);\n    if(EPSILON < dist && dist <= distToLight)\n        return 0.0;\n        \n    sqDistToLight = distToLight * distToLight;\n\treturn a;\n}\n\nmat3 computeTbn(in vec3 normal)\n{\n    vec3 arbNormal = vec3(-1.241284e-02, -7.011432e-01, +2.043006e-01);\n    arbNormal = mix(arbNormal, vec3(+2.019038e-01, +9.717299e-01, +1.223763e-01), \n        step(0.0, abs(dot(arbNormal, normal))));\n\n    vec3 e0 = cross(arbNormal, normal);\n\tvec3 e1 = cross(e0, normal);\n\n    return mat3(e0, normal, e1);\n}\n\n// http://gpupathtracer.blogspot.de/\n// http://www.iquilezles.org/www/articles/simplepathtracing/simplepathtracing.htm\n// http://undernones.blogspot.de/2010/12/gpu-ray-tracing-with-glsl.html\n// http://www.iquilezles.org/www/articles/simplegpurt/simplegpurt.htm\n// http://www.lighthouse3d.com/tutorials/maths/ray-triangle-intersection/\n\nvoid main()\n{\n    vec3 ray_origin = u_eye;\n    vec3 ray_direction = normalize((v_ray.xyz / v_ray.w) - ray_origin);\n\n    // fragment index for random variation\n\tvec2 xy = v_uv * vec2(u_viewport[0], u_viewport[1]);\n\tint fragID = int(xy.y * u_viewport[0] + xy.x + float(u_frame) + float(u_rand));\n\n\t// path color accumulation\n\tvec3 maskColor = vec3(1.0);\n\tvec3 pathColor = vec3(0.0);\n\n    // fragment is transparent before any intersection\n    float alpha = 0.0;\n\n\tfor(int bounce = 0; bounce < BOUNCES; ++bounce)\n\t{\n        // check intersection with scene geometry\n        vec3 normal;\n        vec3 color;\n        bool reflecting;\n        float dist = intersection(ray_origin, ray_direction, normal, color, reflecting); \n\n        if(dist == INFINITY)\n            break; // TODO: break on no intersection, with correct path color weight?\n\n        // update ray for next bounce\n        ray_origin = ray_origin + ray_direction * dist;\n        if(reflecting){\n            ray_direction = reflect(ray_direction, normal);\n            if(bounce == 0) {\n                alpha = 1.0;\n            }\n            continue;\n        }\n        ray_direction = computeTbn(normal) * randomPointOnHemisphere(fragID + bounce);\n\n        // compute lighting and color\n        alpha = 1.0;\n        float squaredDistToLight = 1.0;\n  \t\tfloat lighting = shadow(fragID + bounce, ray_origin, normal, squaredDistToLight);\n  \t    maskColor *= color;\n  \t\tpathColor += maskColor * LIGHT_COLOR * lighting / squaredDistToLight;\n    }\n\n    fragColor = vec4(pow(EXPOSURE * pathColor, vec3(1.0 / GAMMA)), alpha);\n}\n\n"},42:function(n,t){n.exports="\n\n#if __VERSION__ == 100\n    #define texture(sampler, coord) texture2D(sampler, coord)\n#else \n    #define varying in\n#endif\n\n\n#if __VERSION__ == 100\n    #define fragColor gl_FragColor\n    #extension GL_OES_standard_derivatives : enable\n    precision mediump float;\n#else\n    precision mediump float;\n    layout(location = 0) out vec4 fragColor;\n#endif\n\n\nuniform sampler2D u_vertices; // 1D\nuniform sampler2D u_indices;  // 1D\nuniform sampler2D u_colors;   // 1D\nconst float NUM_VERTICES = 24.0;\nconst float NUM_TRIANGLES = 30.0;\nconst float NUM_COLORS = 5.0;\n\nuniform sampler2D u_hsphere;\nuniform sampler2D u_lights;\nconst vec2 SPHERE_SAMPLER_SIZE = vec2(32, 32); // textureSize(u_hsphere, 0);\nconst vec2 LIGHT_SAMPLER_SIZE = vec2(32, 32); // textureSize(u_lights, 0);\n\n\nvec3 vertexFetch(const in float index) {\n    return texture(u_vertices, vec2(index / (NUM_VERTICES-1.0), 0)).xyz;\n}\n\nvec4 indexFetch(const in float index) {\n    return texture(u_indices, vec2(index / (NUM_TRIANGLES-1.0), 0)) * 255.0;\n}\n\nvec3 colorFetch(const in float index) {\n    return texture(u_colors, vec2(index / (NUM_COLORS-1.0), 0)).xyz;\n}\n\nvec3 hsphereFetch(const in vec2 index) {\n    return texture(u_hsphere, index / (SPHERE_SAMPLER_SIZE-1.0)).xyz;\n}\n\nvec3 lightFetch(const in vec2 index) {\n    return texture(u_lights, index / (LIGHT_SAMPLER_SIZE-1.0)).xyz;\n}\n\n\n\n/*\nneeds version specific stuff:\nlayout(location = 0) out vec4 fragColor;\n\nconst float NUM_TRIANGLES\nconst vec2 SPHERE_SAMPLER_SIZE\nconst vec2 LIGHT_SAMPLER_SIZE\n\n// functions to access the static data (vertices, indices, colors, hsphere samples, light samples):\nvec3 vertexFetch(const in float index) {}\nvec4 indexFetch(const in float index) {}\nvec3 colorFetch(const in float index) {}\nvec3 hsphereFetch(const in vec2 index) {}\nvec3 lightFetch(const in vec2 index) {}\n*/\n\nuniform int u_frame;\nuniform int u_rand;\nuniform vec3 u_eye;\nuniform vec4 u_viewport;\n\nvarying vec2 v_uv;\nvarying vec4 v_ray;\n\nconst vec3 up = vec3(0.0, 1.0, 0.0);\nconst vec4 SPHERE = vec4(-0.5, +0.0, +0.5, 0.25); // center, radius\nconst vec3 LIGHT_COLOR = vec3(1.0, 10.76 / 16.86, 3.7 / 16.86);\n\nconst float EPSILON  = 1e-6;\nconst float INFINITY = 1e+4;\n\nconst int BOUNCES = 4;\nconst float EXPOSURE = 4.0;\nconst float GAMMA = 2.1;\n\n\n\n// intersection with triangle\nbool intersectionTriangle(\n\tconst in vec3  triangle[3]\n,\tconst in vec3  origin\n,\tconst in vec3  ray\n,\tconst in float t_min\n,   out float t)\n{\n    vec3 e0 = triangle[1] - triangle[0];\n\tvec3 e1 = triangle[2] - triangle[0];\n\n\tvec3  h = cross(ray, e1);\n\tfloat a = dot(e0, h);\n\n\t// if(a > -EPSILON && a < EPSILON) // backface culling off\n\tif(a < EPSILON) // backface culling on\n\t\treturn false;\n\n\tfloat f = 1.0 / a;\n\n\tvec3  s = origin - triangle[0];\n\tfloat u = f * dot(s, h);\n\n\tif(u < 0.0 || u > 1.0)\n\t\treturn false;\n\n\tvec3  q = cross(s, e0);\n\tfloat v = f * dot(ray, q);\n\n\tif(v < 0.0 || u + v > 1.0)\n\t\treturn false;\n\n\tt = f * dot(e1, q);\n\n\treturn EPSILON < t && t < t_min;\n}\n\nbool intersectionSphere(\n    const in vec4  sphere\n,   const in vec3  origin\n,   const in vec3  ray\n,   const in float t_min\n,   out float t)\n{\n    float radius = sphere.w;\n    vec3 center = sphere.xyz; \n    vec3 rayOriginToSphereCenter = origin - center;\n    float dist = length(rayOriginToSphereCenter);\n    float dot_term = dot(ray, rayOriginToSphereCenter);\n    float someVar = dot_term * dot_term - dist * dist + radius * radius;\n    if (someVar < EPSILON) { // no intersection\n        return false;\n    }\n    t = -dot_term - sqrt(someVar);\n    return EPSILON < t && t < t_min;\n}\n\n// intersection with scene geometry\nfloat intersection(\n    const in vec3 origin\n,   const in vec3 ray\n,   out vec3 normal\n,   out vec3 color\n,   out bool reflecting)\n{\n    float t_min = INFINITY;\n    float t = INFINITY;\n\n    float colorIndex;\n\n    // intersection with triangles\n\tfor(int i = 0; i < int(NUM_TRIANGLES); ++i)\n\t{\n        vec3 triangle[3];\n        vec4 triangleIndices = indexFetch(float(i));\n\t\ttriangle[0] = vertexFetch(triangleIndices[0]);\n\t\ttriangle[1] = vertexFetch(triangleIndices[1]);\n\t\ttriangle[2] = vertexFetch(triangleIndices[2]);\n\n\t\tif(intersectionTriangle(triangle, origin, ray, t_min, t))\n\t\t{\n\t\t\tnormal = normalize(cross(\n                triangle[1] - triangle[0],\n                triangle[2] - triangle[0]\n            ));\n\t\t\tcolorIndex = triangleIndices[3];\n\t\t\tt_min = t;\n            reflecting = colorIndex == 5.0;\n\t\t}\n\t}\n\n    // intersection with sphere\n    if(intersectionSphere(SPHERE, origin, ray, t_min, t))\n    {\n        vec3 intersectionPoint = origin + ray*t;\n        normal = normalize(intersectionPoint - SPHERE.xyz);\n        colorIndex = 4.0;\n        t_min = t;\n        reflecting = true;\n    }\n\n    color = colorFetch(colorIndex);\n\n    return t_min;\n}\n\nvec3 randomPointOnHemisphere(const in int fragID)\n{\n\tfloat i = mod(float(fragID), (SPHERE_SAMPLER_SIZE[0] * SPHERE_SAMPLER_SIZE[1]));\n\n    float x = mod(i, SPHERE_SAMPLER_SIZE[0]);\n    float y = i / SPHERE_SAMPLER_SIZE[0];\n\n\treturn hsphereFetch(vec2(x,y));\n}\n\nvec3 randomPointInLight(const in int fragID)\n{\n\tfloat i = mod(float(fragID), LIGHT_SAMPLER_SIZE[0] * LIGHT_SAMPLER_SIZE[1]);\n\n    float x = mod(i, LIGHT_SAMPLER_SIZE[0]);\n    float y = i / LIGHT_SAMPLER_SIZE[0];\n\n\treturn lightFetch(vec2(x,y));\n}\n\n// intersection with scene geometry\nfloat shadow(\n\tconst in int fragID\n,\tconst in vec3 origin\n,\tconst in vec3 normal\n,   out float sqDistToLight)\n{\n    vec3 pointInLight = randomPointInLight(fragID);\n    float distToLight = distance(pointInLight, origin);\n\n\tvec3 ray_direction = normalize(pointInLight - origin);\n\n\tfloat a = dot(ray_direction, normal);\n\tif(a < EPSILON)\n\t \treturn 0.0;\n\n    vec3 v1,v2; bool r; // unused\n    float dist = intersection(origin, ray_direction, v1, v2, r);\n    if(EPSILON < dist && dist <= distToLight)\n        return 0.0;\n        \n    sqDistToLight = distToLight * distToLight;\n\treturn a;\n}\n\nmat3 computeTbn(in vec3 normal)\n{\n    vec3 arbNormal = vec3(-1.241284e-02, -7.011432e-01, +2.043006e-01);\n    arbNormal = mix(arbNormal, vec3(+2.019038e-01, +9.717299e-01, +1.223763e-01), \n        step(0.0, abs(dot(arbNormal, normal))));\n\n    vec3 e0 = cross(arbNormal, normal);\n\tvec3 e1 = cross(e0, normal);\n\n    return mat3(e0, normal, e1);\n}\n\n// http://gpupathtracer.blogspot.de/\n// http://www.iquilezles.org/www/articles/simplepathtracing/simplepathtracing.htm\n// http://undernones.blogspot.de/2010/12/gpu-ray-tracing-with-glsl.html\n// http://www.iquilezles.org/www/articles/simplegpurt/simplegpurt.htm\n// http://www.lighthouse3d.com/tutorials/maths/ray-triangle-intersection/\n\nvoid main()\n{\n    vec3 ray_origin = u_eye;\n    vec3 ray_direction = normalize((v_ray.xyz / v_ray.w) - ray_origin);\n\n    // fragment index for random variation\n\tvec2 xy = v_uv * vec2(u_viewport[0], u_viewport[1]);\n\tint fragID = int(xy.y * u_viewport[0] + xy.x + float(u_frame) + float(u_rand));\n\n\t// path color accumulation\n\tvec3 maskColor = vec3(1.0);\n\tvec3 pathColor = vec3(0.0);\n\n    // fragment is transparent before any intersection\n    float alpha = 0.0;\n\n\tfor(int bounce = 0; bounce < BOUNCES; ++bounce)\n\t{\n        // check intersection with scene geometry\n        vec3 normal;\n        vec3 color;\n        bool reflecting;\n        float dist = intersection(ray_origin, ray_direction, normal, color, reflecting); \n\n        if(dist == INFINITY)\n            break; // TODO: break on no intersection, with correct path color weight?\n\n        // update ray for next bounce\n        ray_origin = ray_origin + ray_direction * dist;\n        if(reflecting){\n            ray_direction = reflect(ray_direction, normal);\n            if(bounce == 0) {\n                alpha = 1.0;\n            }\n            continue;\n        }\n        ray_direction = computeTbn(normal) * randomPointOnHemisphere(fragID + bounce);\n\n        // compute lighting and color\n        alpha = 1.0;\n        float squaredDistToLight = 1.0;\n  \t\tfloat lighting = shadow(fragID + bounce, ray_origin, normal, squaredDistToLight);\n  \t    maskColor *= color;\n  \t\tpathColor += maskColor * LIGHT_COLOR * lighting / squaredDistToLight;\n    }\n\n    fragColor = vec4(pow(EXPOSURE * pathColor, vec3(1.0 / GAMMA)), alpha);\n}\n\n"},43:function(n,t){n.exports="\nprecision lowp float;\n\n\n#if __VERSION__ == 100\n#else \n    #define varying out\n#endif\n\n\n\n#if __VERSION__ == 100\n    attribute vec2 a_vertex;\n#else \n    layout(location = 0) in vec2 a_vertex;\n#endif\n\n\nuniform mat4 u_transform;\nuniform mediump vec3 u_eye;\nuniform vec2 u_ndcOffset;\n\nvarying mediump vec2 v_uv;\nvarying mediump vec4 v_ray;\n\nvoid main()\n{\n    v_uv = a_vertex * 0.5 + 0.5; \n    v_ray = u_transform * vec4(u_ndcOffset + a_vertex, 1.0, 1.0);\n\n    gl_Position = vec4(a_vertex, 1.0, 1.0);\n}\n"},44:function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.vertices=new Float32Array([-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,.988489,-1,-1,.976978,-1,1,1,1,-1,1,1,1,.043165,-1,-.592275,.043165,-.398688,-.592275,-.136691,-1,-.027182,-.136691,-.398688,-.027182,-.705036,-1,-.195279,-.705036,-.398688,-.195279,-.532374,-1,-.767525,-.532374,-.398688,-.767525,.521583,-1,-.116595,.521583,.202624,-.116595,.697842,-1,.452074,.697842,.202624,.452074,.129496,-1,.630901,.129496,.202624,.630901,-.046763,-1,.058655,-.046763,.202624,.058655]),t.indices=new Uint8Array([6,7,3,1,6,3,2,1,4,0,1,1,4,1,5,1,5,1,3,1,5,3,7,1,1,0,2,3,1,2,3,3,4,5,7,2,4,7,6,2,15,13,11,1,15,11,9,1,8,9,11,1,8,11,10,1,14,15,9,1,14,9,8,1,12,13,15,1,12,15,14,1,10,11,13,1,10,13,12,1,23,21,19,1,23,19,17,1,16,17,19,1,16,19,18,1,22,23,17,1,22,17,16,1,20,21,23,1,20,23,22,1,18,19,21,1,18,21,20,1]),t.colors=new Float32Array([0,0,0,.7295,.7355,.729,.611,.0555,.062,.117,.4125,.115,.062,.0555,.611])},45:function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=e(0),i=e(1),o=e(44),a=i.vec3.fromValues(0,.005102,-3.86123),u=i.vec3.fromValues(0,0,0),c=i.vec3.fromValues(0,1,0),s=i.vec3.fromValues(-.233813,.98,-.188126),f=i.vec3.fromValues(.233813,.8,.187411);t.CornellRenderer=class extends r.Renderer{constructor(){super(...arguments),this._extensions=!1}onUpdate(){return this._ndcOffsetKernel=new r.AntiAliasingKernel(this._multiFrameNumber),this._navigation.update(),this._altered.any||this._camera.altered}onPrepare(){const n=this._context.gl,t=this._context.gl2facade;this._intermediateFBO.initialized||(this._colorRenderTexture.initialize(this._frameSize[0],this._frameSize[1],this._context.isWebGL2?n.RGBA8:n.RGBA,n.RGBA,n.UNSIGNED_BYTE),this._depthRenderbuffer.initialize(this._frameSize[0],this._frameSize[1],n.DEPTH_COMPONENT16),this._intermediateFBO.initialize([[t.COLOR_ATTACHMENT0,this._colorRenderTexture],[n.DEPTH_ATTACHMENT,this._depthRenderbuffer]])),this._altered.frameSize&&(this._intermediateFBO.resize(this._frameSize[0],this._frameSize[1]),this._camera.viewport=[this._frameSize[0],this._frameSize[1]]),this._altered.canvasSize&&(this._camera.aspect=this._canvasSize[0]/this._canvasSize[1]),this._altered.clearColor&&this._intermediateFBO.clearColor(this._clearColor),this._accumulate.update(),this._camera.altered&&(this._program.bind(),n.uniformMatrix4fv(this._uTransform,n.GL_FALSE,this._camera.viewProjectionInverse),n.uniform3fv(this._uEye,this._camera.eye),n.uniform4f(this._uViewport,this._camera.viewport[0],this._camera.viewport[1],1/this._camera.viewport[0],1/this._camera.viewport[1])),this._altered.reset(),this._camera.altered=!1}onFrame(n){const t=this._context.gl;t.viewport(0,0,this._frameSize[0],this._frameSize[1]),this._camera.viewport=[this._frameSize[0],this._frameSize[1]],this._intermediateFBO.bind(),this._intermediateFBO.clear(t.COLOR_BUFFER_BIT,!1,!1);const e=this._ndcOffsetKernel.get(n);e[0]=2*e[0]/this._frameSize[0],e[1]=2*e[1]/this._frameSize[1],this._program.bind(),t.uniform1i(this._uFrame,n),t.uniform1i(this._uRand,Math.floor(1e6*Math.random())),t.uniform2fv(this._uNdcOffset,e),this._hsphereImage.bind(t.TEXTURE0),this._lightsImage.bind(t.TEXTURE1),this._context.isWebGL1&&(this._verticesImage.bind(t.TEXTURE2),this._indicesImage.bind(t.TEXTURE3),this._colorsImage.bind(t.TEXTURE4)),this._ndcTriangle.bind(),this._ndcTriangle.draw(),this._ndcTriangle.unbind(),this._intermediateFBO.unbind(),this._accumulate.frame(n)}onSwap(){this._blit.framebuffer=this._accumulate.framebuffer?this._accumulate.framebuffer:this._blit.framebuffer=this._intermediateFBO,this._blit.frame()}onInitialize(n,t,i){const l=this._context.gl,h=this._context.gl2facade;!1===this._extensions&&this._context.isWebGL1&&(r.auxiliaries.assert(this._context.supportsStandardDerivatives,"expected OES_standard_derivatives support"),this._context.standardDerivatives,this._extensions=!0),this._camera=new r.Camera,this._camera.eye=a,this._camera.center=u,this._camera.up=c,this._camera.near=.1,this._camera.far=4,this._navigation=new r.Navigation(t,i),this._navigation.camera=this._camera;const d=new r.Shader(this._context,l.VERTEX_SHADER,"cornell.vert");d.initialize(e(43));const m=new r.Shader(this._context,l.FRAGMENT_SHADER,"cornell.frag");m.initialize(e(this._context.isWebGL1?this._context.supportsTextureFloat?42:41:40)),this._program=new r.Program(this._context),this._program.initialize([d,m]),this._uTransform=this._program.uniform("u_transform"),this._uFrame=this._program.uniform("u_frame"),this._uRand=this._program.uniform("u_rand"),this._uEye=this._program.uniform("u_eye"),this._uViewport=this._program.uniform("u_viewport"),this._program.bind(),l.uniform1i(this._program.uniform("u_hsphere"),0),l.uniform1i(this._program.uniform("u_lights"),1),this._program.unbind(),this._ndcTriangle=new r.NdcFillingTriangle(this._context);const _=this._program.attribute("a_vertex",0);this._ndcTriangle.initialize(_),this._hsphereImage=new r.Texture2(this._context,"hsphereImage"),this._lightsImage=new r.Texture2(this._context,"lightsImage");const M=this.pointsOnSphere(1024),v=Math.floor(Math.sqrt(M.length)),g=new Float32Array(v*v*3);for(let n=0;n<v*v;++n)g[3*n+0]=M[n][0],g[3*n+1]=M[n][1],g[3*n+2]=M[n][2];const x=this.pointsInLight(s,f,1024),p=new Float32Array(3*x.length);let I=0;for(const n of x)p[I++]=n[0],p[I++]=n[1],p[I++]=n[2];if(this._context.isWebGL1&&!this._context.supportsTextureFloat)this._hsphereImage.initialize(96,32,l.RGB,l.RGB,l.UNSIGNED_BYTE),this._hsphereImage.data(this.encodeFloatArrayAndScale(g)),this._lightsImage.initialize(96,32,l.RGB,l.RGB,l.UNSIGNED_BYTE),this._lightsImage.data(this.encodeFloatArrayAndScale(p));else{const n=r.Wizard.queryInternalTextureFormat(this._context,l.RGB,r.Wizard.Precision.float);this._hsphereImage.initialize(v,v,n[0],l.RGB,n[1]),this._hsphereImage.data(g),this._lightsImage.initialize(32,32,n[0],l.RGB,n[1]),this._lightsImage.data(p)}return this._hsphereImage.wrap(l.CLAMP_TO_EDGE,l.CLAMP_TO_EDGE),this._hsphereImage.filter(l.NEAREST,l.NEAREST),this._lightsImage.wrap(l.CLAMP_TO_EDGE,l.CLAMP_TO_EDGE),this._lightsImage.filter(l.NEAREST,l.NEAREST),this._context.isWebGL1&&(this._program.bind(),l.uniform1i(this._program.uniform("u_vertices"),2),l.uniform1i(this._program.uniform("u_indices"),3),l.uniform1i(this._program.uniform("u_colors"),4),this._program.unbind(),this._verticesImage=new r.Texture2(this._context,"verticesImage"),this._indicesImage=new r.Texture2(this._context,"indicesImage"),this._colorsImage=new r.Texture2(this._context,"colorsImage"),this._indicesImage.initialize(o.indices.length/4,1,l.RGBA,l.RGBA,l.UNSIGNED_BYTE),this._indicesImage.data(o.indices),n.supportsTextureFloat?(this._verticesImage.initialize(o.vertices.length/3,1,l.RGB,l.RGB,l.FLOAT),this._verticesImage.data(o.vertices),this._colorsImage.initialize(o.colors.length/3,1,l.RGB,l.RGB,l.FLOAT),this._colorsImage.data(o.colors)):(this._verticesImage.initialize(o.vertices.length/3*3,1,l.RGB,l.RGB,l.UNSIGNED_BYTE),this._verticesImage.data(this.encodeFloatArrayAndScale(o.vertices)),this._colorsImage.initialize(o.colors.length/3*3,1,l.RGB,l.RGB,l.UNSIGNED_BYTE),this._colorsImage.data(this.encodeFloatArray(o.colors))),this._verticesImage.wrap(l.CLAMP_TO_EDGE,l.CLAMP_TO_EDGE),this._verticesImage.filter(l.NEAREST,l.NEAREST),this._indicesImage.wrap(l.CLAMP_TO_EDGE,l.CLAMP_TO_EDGE),this._indicesImage.filter(l.NEAREST,l.NEAREST),this._colorsImage.wrap(l.CLAMP_TO_EDGE,l.CLAMP_TO_EDGE),this._colorsImage.filter(l.NEAREST,l.NEAREST)),this._uNdcOffset=this._program.uniform("u_ndcOffset"),this._defaultFBO=new r.DefaultFramebuffer(this._context,"DefaultFBO"),this._defaultFBO.initialize(),this._colorRenderTexture=new r.Texture2(this._context,"ColorRenderTexture"),this._depthRenderbuffer=new r.Renderbuffer(this._context,"DepthRenderbuffer"),this._intermediateFBO=new r.Framebuffer(this._context,"IntermediateFBO"),this._accumulate=new r.AccumulatePass(this._context),this._accumulate.initialize(this._ndcTriangle),this._accumulate.precision=this._framePrecision,this._accumulate.texture=this._colorRenderTexture,this._blit=new r.BlitPass(this._context),this._blit.initialize(this._ndcTriangle),this._blit.readBuffer=h.COLOR_ATTACHMENT0,this._blit.drawBuffer=l.BACK,this._blit.target=this._defaultFBO,!0}onUninitialize(){this._program.uninitialize(),this._ndcTriangle.uninitialize(),this._hsphereImage.uninitialize(),this._lightsImage.uninitialize(),this._context.isWebGL1&&(this._verticesImage.uninitialize(),this._indicesImage.uninitialize(),this._colorsImage.uninitialize()),this._intermediateFBO.uninitialize(),this._defaultFBO.uninitialize(),this._colorRenderTexture.uninitialize(),this._depthRenderbuffer.uninitialize(),this._blit.uninitialize()}shuffle(n){const t=[],e=n.slice();for(;0!==e.length;){const n=Math.floor(e.length*Math.random());t.push(e[n]),e.splice(n,1)}return t}pointsInLight(n,t,e){const o=Array(),a=i.vec3.min(i.vec3.create(),n,t),u=i.vec3.max(i.vec3.create(),n,t),c=i.vec3.subtract(i.vec3.create(),u,a),s=Math.ceil(Math.sqrt(1*e)),f=i.vec3.scale(i.vec3.create(),c,.9999/(s-1));for(let n=a[0];n<=u[0];n+=f[0])for(let t=a[2];t<=u[2];t+=f[2])o.push(i.vec3.fromValues(n,r.auxiliaries.rand(a[1],u[1]),t));return this.shuffle(o)}pointsOnSphere(n){const t=new Array(n);for(let n=0;n<t.length;++n){const e=.9999,o=r.auxiliaries.rand(-e,e),a=r.auxiliaries.rand(-e,e),u=Math.sqrt(Math.max(1-o*o-a*a,1e-4));t[n]=i.vec3.normalize(i.vec3.create(),i.vec3.fromValues(o,u,a))}return t}fract(n){return n>0?n-Math.floor(n):n-Math.ceil(n)}encode_float24x1_to_uint8x3(n,t){return n[0]=Math.floor(255*t),n[1]=Math.floor(255*this.fract(255*t)),n[2]=Math.floor(255*this.fract(65536*t)),n}encodeFloatArray(n){const t=new Uint8Array(3*n.length);for(let e=0;e<n.length;e++){const r=this.encode_float24x1_to_uint8x3(i.vec3.create(),n[e]);t[3*e+0]=r[0],t[3*e+1]=r[1],t[3*e+2]=r[2]}return t}encodeFloatArrayAndScale(n){const t=new Uint8Array(3*n.length);for(let e=0;e<n.length;e++){const r=this.encode_float24x1_to_uint8x3(i.vec3.create(),.5*n[e]+.5);t[3*e+0]=r[0],t[3*e+1]=r[1],t[3*e+2]=r[2]}return t}}},46:function(n,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=e(0),i=e(45);function o(){const n=new r.Canvas("example-canvas"),t=n.context,e=new i.CornellRenderer;n.renderer=e,n.framePrecision=r.Wizard.Precision.float,n.frameScale=[.5,.5],n.clearColor.fromHex("d6d8db"),n.controller.multiFrameNumber=1024,n.element.addEventListener("click",()=>{n.controller.update()}),window.canvas=n,window.context=t,window.renderer=e}"complete"===window.document.readyState?o():window.onload=o},47:function(n,t,e){e(2),n.exports=e(46)}})});
//# sourceMappingURL=cornell-box.js.map