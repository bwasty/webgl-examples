!function(n,r){if("object"==typeof exports&&"object"==typeof module)module.exports=r(require("gloperate"));else if("function"==typeof define&&define.amd)define(["gloperate"],r);else{var t="object"==typeof exports?r(require("gloperate")):r(n.gloperate);for(var e in t)("object"==typeof exports?exports:n)[e]=t[e]}}(window,function(n){return function(n){var r={};function t(e){if(r[e])return r[e].exports;var i=r[e]={i:e,l:!1,exports:{}};return n[e].call(i.exports,i,i.exports,t),i.l=!0,i.exports}return t.m=n,t.c=r,t.d=function(n,r,e){t.o(n,r)||Object.defineProperty(n,r,{enumerable:!0,get:e})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,r){if(1&r&&(n=t(n)),8&r)return n;if(4&r&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(t.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&r&&"string"!=typeof n)for(var i in n)t.d(e,i,function(r){return n[r]}.bind(null,i));return e},t.n=function(n){var r=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(r,"a",r),r},t.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},t.p="",t(t.s=29)}([function(r,t){r.exports=n},function(n,r,t){"use strict";t.r(r);var e={};t.r(e),t.d(e,"EPSILON",function(){return h}),t.d(e,"ARRAY_TYPE",function(){return v}),t.d(e,"RANDOM",function(){return m}),t.d(e,"setMatrixArrayType",function(){return _}),t.d(e,"toRadian",function(){return g}),t.d(e,"equals",function(){return x});var i={};t.r(i),t.d(i,"create",function(){return p}),t.d(i,"clone",function(){return I}),t.d(i,"copy",function(){return b}),t.d(i,"identity",function(){return E}),t.d(i,"fromValues",function(){return y}),t.d(i,"set",function(){return S}),t.d(i,"transpose",function(){return w}),t.d(i,"invert",function(){return L}),t.d(i,"adjoint",function(){return T}),t.d(i,"determinant",function(){return R}),t.d(i,"multiply",function(){return P}),t.d(i,"rotate",function(){return A}),t.d(i,"scale",function(){return O}),t.d(i,"fromRotation",function(){return N}),t.d(i,"fromScaling",function(){return z}),t.d(i,"str",function(){return F}),t.d(i,"frob",function(){return q}),t.d(i,"LDU",function(){return D}),t.d(i,"add",function(){return C}),t.d(i,"subtract",function(){return G}),t.d(i,"exactEquals",function(){return H}),t.d(i,"equals",function(){return U}),t.d(i,"multiplyScalar",function(){return B}),t.d(i,"multiplyScalarAndAdd",function(){return Z}),t.d(i,"mul",function(){return V}),t.d(i,"sub",function(){return k});var o={};t.r(o),t.d(o,"create",function(){return Y}),t.d(o,"clone",function(){return j}),t.d(o,"copy",function(){return X}),t.d(o,"identity",function(){return W}),t.d(o,"fromValues",function(){return Q}),t.d(o,"set",function(){return K}),t.d(o,"invert",function(){return J}),t.d(o,"determinant",function(){return $}),t.d(o,"multiply",function(){return nn}),t.d(o,"rotate",function(){return rn}),t.d(o,"scale",function(){return tn}),t.d(o,"translate",function(){return en}),t.d(o,"fromRotation",function(){return on}),t.d(o,"fromScaling",function(){return an}),t.d(o,"fromTranslation",function(){return un}),t.d(o,"str",function(){return cn}),t.d(o,"frob",function(){return sn}),t.d(o,"add",function(){return fn}),t.d(o,"subtract",function(){return ln}),t.d(o,"multiplyScalar",function(){return dn}),t.d(o,"multiplyScalarAndAdd",function(){return hn}),t.d(o,"exactEquals",function(){return vn}),t.d(o,"equals",function(){return mn}),t.d(o,"mul",function(){return _n}),t.d(o,"sub",function(){return Mn});var a={};t.r(a),t.d(a,"create",function(){return gn}),t.d(a,"fromMat4",function(){return xn}),t.d(a,"clone",function(){return pn}),t.d(a,"copy",function(){return In}),t.d(a,"fromValues",function(){return bn}),t.d(a,"set",function(){return En}),t.d(a,"identity",function(){return yn}),t.d(a,"transpose",function(){return Sn}),t.d(a,"invert",function(){return wn}),t.d(a,"adjoint",function(){return Ln}),t.d(a,"determinant",function(){return Tn}),t.d(a,"multiply",function(){return Rn}),t.d(a,"translate",function(){return Pn}),t.d(a,"rotate",function(){return An}),t.d(a,"scale",function(){return On}),t.d(a,"fromTranslation",function(){return Nn}),t.d(a,"fromRotation",function(){return zn}),t.d(a,"fromScaling",function(){return Fn}),t.d(a,"fromMat2d",function(){return qn}),t.d(a,"fromQuat",function(){return Dn}),t.d(a,"normalFromMat4",function(){return Cn}),t.d(a,"projection",function(){return Gn}),t.d(a,"str",function(){return Hn}),t.d(a,"frob",function(){return Un}),t.d(a,"add",function(){return Bn}),t.d(a,"subtract",function(){return Zn}),t.d(a,"multiplyScalar",function(){return Vn}),t.d(a,"multiplyScalarAndAdd",function(){return kn}),t.d(a,"exactEquals",function(){return Yn}),t.d(a,"equals",function(){return jn}),t.d(a,"mul",function(){return Xn}),t.d(a,"sub",function(){return Wn});var u={};t.r(u),t.d(u,"create",function(){return Qn}),t.d(u,"clone",function(){return Kn}),t.d(u,"copy",function(){return Jn}),t.d(u,"fromValues",function(){return $n}),t.d(u,"set",function(){return nr}),t.d(u,"identity",function(){return rr}),t.d(u,"transpose",function(){return tr}),t.d(u,"invert",function(){return er}),t.d(u,"adjoint",function(){return ir}),t.d(u,"determinant",function(){return or}),t.d(u,"multiply",function(){return ar}),t.d(u,"translate",function(){return ur}),t.d(u,"scale",function(){return cr}),t.d(u,"rotate",function(){return sr}),t.d(u,"rotateX",function(){return fr}),t.d(u,"rotateY",function(){return lr}),t.d(u,"rotateZ",function(){return dr}),t.d(u,"fromTranslation",function(){return hr}),t.d(u,"fromScaling",function(){return vr}),t.d(u,"fromRotation",function(){return mr}),t.d(u,"fromXRotation",function(){return _r}),t.d(u,"fromYRotation",function(){return Mr}),t.d(u,"fromZRotation",function(){return gr}),t.d(u,"fromRotationTranslation",function(){return xr}),t.d(u,"fromQuat2",function(){return pr}),t.d(u,"getTranslation",function(){return Ir}),t.d(u,"getScaling",function(){return br}),t.d(u,"getRotation",function(){return Er}),t.d(u,"fromRotationTranslationScale",function(){return yr}),t.d(u,"fromRotationTranslationScaleOrigin",function(){return Sr}),t.d(u,"fromQuat",function(){return wr}),t.d(u,"frustum",function(){return Lr}),t.d(u,"perspective",function(){return Tr}),t.d(u,"perspectiveFromFieldOfView",function(){return Rr}),t.d(u,"ortho",function(){return Pr}),t.d(u,"lookAt",function(){return Ar}),t.d(u,"targetTo",function(){return Or}),t.d(u,"str",function(){return Nr}),t.d(u,"frob",function(){return zr}),t.d(u,"add",function(){return Fr}),t.d(u,"subtract",function(){return qr}),t.d(u,"multiplyScalar",function(){return Dr}),t.d(u,"multiplyScalarAndAdd",function(){return Cr}),t.d(u,"exactEquals",function(){return Gr}),t.d(u,"equals",function(){return Hr}),t.d(u,"mul",function(){return Ur}),t.d(u,"sub",function(){return Br});var c={};t.r(c),t.d(c,"create",function(){return Zr}),t.d(c,"clone",function(){return Vr}),t.d(c,"length",function(){return kr}),t.d(c,"fromValues",function(){return Yr}),t.d(c,"copy",function(){return jr}),t.d(c,"set",function(){return Xr}),t.d(c,"add",function(){return Wr}),t.d(c,"subtract",function(){return Qr}),t.d(c,"multiply",function(){return Kr}),t.d(c,"divide",function(){return Jr}),t.d(c,"ceil",function(){return $r}),t.d(c,"floor",function(){return nt}),t.d(c,"min",function(){return rt}),t.d(c,"max",function(){return tt}),t.d(c,"round",function(){return et}),t.d(c,"scale",function(){return it}),t.d(c,"scaleAndAdd",function(){return ot}),t.d(c,"distance",function(){return at}),t.d(c,"squaredDistance",function(){return ut}),t.d(c,"squaredLength",function(){return ct}),t.d(c,"negate",function(){return st}),t.d(c,"inverse",function(){return ft}),t.d(c,"normalize",function(){return lt}),t.d(c,"dot",function(){return dt}),t.d(c,"cross",function(){return ht}),t.d(c,"lerp",function(){return vt}),t.d(c,"hermite",function(){return mt}),t.d(c,"bezier",function(){return _t}),t.d(c,"random",function(){return Mt}),t.d(c,"transformMat4",function(){return gt}),t.d(c,"transformMat3",function(){return xt}),t.d(c,"transformQuat",function(){return pt}),t.d(c,"rotateX",function(){return It}),t.d(c,"rotateY",function(){return bt}),t.d(c,"rotateZ",function(){return Et}),t.d(c,"angle",function(){return yt}),t.d(c,"str",function(){return St}),t.d(c,"exactEquals",function(){return wt}),t.d(c,"equals",function(){return Lt}),t.d(c,"sub",function(){return Tt}),t.d(c,"mul",function(){return Rt}),t.d(c,"div",function(){return Pt}),t.d(c,"dist",function(){return At}),t.d(c,"sqrDist",function(){return Ot}),t.d(c,"len",function(){return Nt}),t.d(c,"sqrLen",function(){return zt}),t.d(c,"forEach",function(){return Ft});var s={};t.r(s),t.d(s,"create",function(){return qt}),t.d(s,"clone",function(){return Dt}),t.d(s,"fromValues",function(){return Ct}),t.d(s,"copy",function(){return Gt}),t.d(s,"set",function(){return Ht}),t.d(s,"add",function(){return Ut}),t.d(s,"subtract",function(){return Bt}),t.d(s,"multiply",function(){return Zt}),t.d(s,"divide",function(){return Vt}),t.d(s,"ceil",function(){return kt}),t.d(s,"floor",function(){return Yt}),t.d(s,"min",function(){return jt}),t.d(s,"max",function(){return Xt}),t.d(s,"round",function(){return Wt}),t.d(s,"scale",function(){return Qt}),t.d(s,"scaleAndAdd",function(){return Kt}),t.d(s,"distance",function(){return Jt}),t.d(s,"squaredDistance",function(){return $t}),t.d(s,"length",function(){return ne}),t.d(s,"squaredLength",function(){return re}),t.d(s,"negate",function(){return te}),t.d(s,"inverse",function(){return ee}),t.d(s,"normalize",function(){return ie}),t.d(s,"dot",function(){return oe}),t.d(s,"lerp",function(){return ae}),t.d(s,"random",function(){return ue}),t.d(s,"transformMat4",function(){return ce}),t.d(s,"transformQuat",function(){return se}),t.d(s,"str",function(){return fe}),t.d(s,"exactEquals",function(){return le}),t.d(s,"equals",function(){return de}),t.d(s,"sub",function(){return he}),t.d(s,"mul",function(){return ve}),t.d(s,"div",function(){return me}),t.d(s,"dist",function(){return _e}),t.d(s,"sqrDist",function(){return Me}),t.d(s,"len",function(){return ge}),t.d(s,"sqrLen",function(){return xe}),t.d(s,"forEach",function(){return pe});var f={};t.r(f),t.d(f,"create",function(){return Ie}),t.d(f,"identity",function(){return be}),t.d(f,"setAxisAngle",function(){return Ee}),t.d(f,"getAxisAngle",function(){return ye}),t.d(f,"multiply",function(){return Se}),t.d(f,"rotateX",function(){return we}),t.d(f,"rotateY",function(){return Le}),t.d(f,"rotateZ",function(){return Te}),t.d(f,"calculateW",function(){return Re}),t.d(f,"slerp",function(){return Pe}),t.d(f,"random",function(){return Ae}),t.d(f,"invert",function(){return Oe}),t.d(f,"conjugate",function(){return Ne}),t.d(f,"fromMat3",function(){return ze}),t.d(f,"fromEuler",function(){return Fe}),t.d(f,"str",function(){return qe}),t.d(f,"clone",function(){return De}),t.d(f,"fromValues",function(){return Ce}),t.d(f,"copy",function(){return Ge}),t.d(f,"set",function(){return He}),t.d(f,"add",function(){return Ue}),t.d(f,"mul",function(){return Be}),t.d(f,"scale",function(){return Ze}),t.d(f,"dot",function(){return Ve}),t.d(f,"lerp",function(){return ke}),t.d(f,"length",function(){return Ye}),t.d(f,"len",function(){return je}),t.d(f,"squaredLength",function(){return Xe}),t.d(f,"sqrLen",function(){return We}),t.d(f,"normalize",function(){return Qe}),t.d(f,"exactEquals",function(){return Ke}),t.d(f,"equals",function(){return Je}),t.d(f,"rotationTo",function(){return $e}),t.d(f,"sqlerp",function(){return ni}),t.d(f,"setAxes",function(){return ri});var l={};t.r(l),t.d(l,"create",function(){return ti}),t.d(l,"clone",function(){return ei}),t.d(l,"fromValues",function(){return ii}),t.d(l,"fromRotationTranslationValues",function(){return oi}),t.d(l,"fromRotationTranslation",function(){return ai}),t.d(l,"fromTranslation",function(){return ui}),t.d(l,"fromRotation",function(){return ci}),t.d(l,"fromMat4",function(){return si}),t.d(l,"copy",function(){return fi}),t.d(l,"identity",function(){return li}),t.d(l,"set",function(){return di}),t.d(l,"getReal",function(){return hi}),t.d(l,"getDual",function(){return vi}),t.d(l,"setReal",function(){return mi}),t.d(l,"setDual",function(){return _i}),t.d(l,"getTranslation",function(){return Mi}),t.d(l,"translate",function(){return gi}),t.d(l,"rotateX",function(){return xi}),t.d(l,"rotateY",function(){return pi}),t.d(l,"rotateZ",function(){return Ii}),t.d(l,"rotateByQuatAppend",function(){return bi}),t.d(l,"rotateByQuatPrepend",function(){return Ei}),t.d(l,"rotateAroundAxis",function(){return yi}),t.d(l,"add",function(){return Si}),t.d(l,"multiply",function(){return wi}),t.d(l,"mul",function(){return Li}),t.d(l,"scale",function(){return Ti}),t.d(l,"dot",function(){return Ri}),t.d(l,"lerp",function(){return Pi}),t.d(l,"invert",function(){return Ai}),t.d(l,"conjugate",function(){return Oi}),t.d(l,"length",function(){return Ni}),t.d(l,"len",function(){return zi}),t.d(l,"squaredLength",function(){return Fi}),t.d(l,"sqrLen",function(){return qi}),t.d(l,"normalize",function(){return Di}),t.d(l,"str",function(){return Ci}),t.d(l,"exactEquals",function(){return Gi}),t.d(l,"equals",function(){return Hi});var d={};t.r(d),t.d(d,"create",function(){return Ui}),t.d(d,"clone",function(){return Bi}),t.d(d,"fromValues",function(){return Zi}),t.d(d,"copy",function(){return Vi}),t.d(d,"set",function(){return ki}),t.d(d,"add",function(){return Yi}),t.d(d,"subtract",function(){return ji}),t.d(d,"multiply",function(){return Xi}),t.d(d,"divide",function(){return Wi}),t.d(d,"ceil",function(){return Qi}),t.d(d,"floor",function(){return Ki}),t.d(d,"min",function(){return Ji}),t.d(d,"max",function(){return $i}),t.d(d,"round",function(){return no}),t.d(d,"scale",function(){return ro}),t.d(d,"scaleAndAdd",function(){return to}),t.d(d,"distance",function(){return eo}),t.d(d,"squaredDistance",function(){return io}),t.d(d,"length",function(){return oo}),t.d(d,"squaredLength",function(){return ao}),t.d(d,"negate",function(){return uo}),t.d(d,"inverse",function(){return co}),t.d(d,"normalize",function(){return so}),t.d(d,"dot",function(){return fo}),t.d(d,"cross",function(){return lo}),t.d(d,"lerp",function(){return ho}),t.d(d,"random",function(){return vo}),t.d(d,"transformMat2",function(){return mo}),t.d(d,"transformMat2d",function(){return _o}),t.d(d,"transformMat3",function(){return Mo}),t.d(d,"transformMat4",function(){return go}),t.d(d,"rotate",function(){return xo}),t.d(d,"angle",function(){return po}),t.d(d,"str",function(){return Io}),t.d(d,"exactEquals",function(){return bo}),t.d(d,"equals",function(){return Eo}),t.d(d,"len",function(){return yo}),t.d(d,"sub",function(){return So}),t.d(d,"mul",function(){return wo}),t.d(d,"div",function(){return Lo}),t.d(d,"dist",function(){return To}),t.d(d,"sqrDist",function(){return Ro}),t.d(d,"sqrLen",function(){return Po}),t.d(d,"forEach",function(){return Ao});var h=1e-6,v="undefined"!=typeof Float32Array?Float32Array:Array,m=Math.random;function _(n){v=n}var M=Math.PI/180;function g(n){return n*M}function x(n,r){return Math.abs(n-r)<=h*Math.max(1,Math.abs(n),Math.abs(r))}function p(){var n=new v(4);return v!=Float32Array&&(n[1]=0,n[2]=0),n[0]=1,n[3]=1,n}function I(n){var r=new v(4);return r[0]=n[0],r[1]=n[1],r[2]=n[2],r[3]=n[3],r}function b(n,r){return n[0]=r[0],n[1]=r[1],n[2]=r[2],n[3]=r[3],n}function E(n){return n[0]=1,n[1]=0,n[2]=0,n[3]=1,n}function y(n,r,t,e){var i=new v(4);return i[0]=n,i[1]=r,i[2]=t,i[3]=e,i}function S(n,r,t,e,i){return n[0]=r,n[1]=t,n[2]=e,n[3]=i,n}function w(n,r){if(n===r){var t=r[1];n[1]=r[2],n[2]=t}else n[0]=r[0],n[1]=r[2],n[2]=r[1],n[3]=r[3];return n}function L(n,r){var t=r[0],e=r[1],i=r[2],o=r[3],a=t*o-i*e;return a?(a=1/a,n[0]=o*a,n[1]=-e*a,n[2]=-i*a,n[3]=t*a,n):null}function T(n,r){var t=r[0];return n[0]=r[3],n[1]=-r[1],n[2]=-r[2],n[3]=t,n}function R(n){return n[0]*n[3]-n[2]*n[1]}function P(n,r,t){var e=r[0],i=r[1],o=r[2],a=r[3],u=t[0],c=t[1],s=t[2],f=t[3];return n[0]=e*u+o*c,n[1]=i*u+a*c,n[2]=e*s+o*f,n[3]=i*s+a*f,n}function A(n,r,t){var e=r[0],i=r[1],o=r[2],a=r[3],u=Math.sin(t),c=Math.cos(t);return n[0]=e*c+o*u,n[1]=i*c+a*u,n[2]=e*-u+o*c,n[3]=i*-u+a*c,n}function O(n,r,t){var e=r[0],i=r[1],o=r[2],a=r[3],u=t[0],c=t[1];return n[0]=e*u,n[1]=i*u,n[2]=o*c,n[3]=a*c,n}function N(n,r){var t=Math.sin(r),e=Math.cos(r);return n[0]=e,n[1]=t,n[2]=-t,n[3]=e,n}function z(n,r){return n[0]=r[0],n[1]=0,n[2]=0,n[3]=r[1],n}function F(n){return"mat2("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+")"}function q(n){return Math.sqrt(Math.pow(n[0],2)+Math.pow(n[1],2)+Math.pow(n[2],2)+Math.pow(n[3],2))}function D(n,r,t,e){return n[2]=e[2]/e[0],t[0]=e[0],t[1]=e[1],t[3]=e[3]-n[2]*t[1],[n,r,t]}function C(n,r,t){return n[0]=r[0]+t[0],n[1]=r[1]+t[1],n[2]=r[2]+t[2],n[3]=r[3]+t[3],n}function G(n,r,t){return n[0]=r[0]-t[0],n[1]=r[1]-t[1],n[2]=r[2]-t[2],n[3]=r[3]-t[3],n}function H(n,r){return n[0]===r[0]&&n[1]===r[1]&&n[2]===r[2]&&n[3]===r[3]}function U(n,r){var t=n[0],e=n[1],i=n[2],o=n[3],a=r[0],u=r[1],c=r[2],s=r[3];return Math.abs(t-a)<=h*Math.max(1,Math.abs(t),Math.abs(a))&&Math.abs(e-u)<=h*Math.max(1,Math.abs(e),Math.abs(u))&&Math.abs(i-c)<=h*Math.max(1,Math.abs(i),Math.abs(c))&&Math.abs(o-s)<=h*Math.max(1,Math.abs(o),Math.abs(s))}function B(n,r,t){return n[0]=r[0]*t,n[1]=r[1]*t,n[2]=r[2]*t,n[3]=r[3]*t,n}function Z(n,r,t,e){return n[0]=r[0]+t[0]*e,n[1]=r[1]+t[1]*e,n[2]=r[2]+t[2]*e,n[3]=r[3]+t[3]*e,n}var V=P,k=G;function Y(){var n=new v(6);return v!=Float32Array&&(n[1]=0,n[2]=0,n[4]=0,n[5]=0),n[0]=1,n[3]=1,n}function j(n){var r=new v(6);return r[0]=n[0],r[1]=n[1],r[2]=n[2],r[3]=n[3],r[4]=n[4],r[5]=n[5],r}function X(n,r){return n[0]=r[0],n[1]=r[1],n[2]=r[2],n[3]=r[3],n[4]=r[4],n[5]=r[5],n}function W(n){return n[0]=1,n[1]=0,n[2]=0,n[3]=1,n[4]=0,n[5]=0,n}function Q(n,r,t,e,i,o){var a=new v(6);return a[0]=n,a[1]=r,a[2]=t,a[3]=e,a[4]=i,a[5]=o,a}function K(n,r,t,e,i,o,a){return n[0]=r,n[1]=t,n[2]=e,n[3]=i,n[4]=o,n[5]=a,n}function J(n,r){var t=r[0],e=r[1],i=r[2],o=r[3],a=r[4],u=r[5],c=t*o-e*i;return c?(c=1/c,n[0]=o*c,n[1]=-e*c,n[2]=-i*c,n[3]=t*c,n[4]=(i*u-o*a)*c,n[5]=(e*a-t*u)*c,n):null}function $(n){return n[0]*n[3]-n[1]*n[2]}function nn(n,r,t){var e=r[0],i=r[1],o=r[2],a=r[3],u=r[4],c=r[5],s=t[0],f=t[1],l=t[2],d=t[3],h=t[4],v=t[5];return n[0]=e*s+o*f,n[1]=i*s+a*f,n[2]=e*l+o*d,n[3]=i*l+a*d,n[4]=e*h+o*v+u,n[5]=i*h+a*v+c,n}function rn(n,r,t){var e=r[0],i=r[1],o=r[2],a=r[3],u=r[4],c=r[5],s=Math.sin(t),f=Math.cos(t);return n[0]=e*f+o*s,n[1]=i*f+a*s,n[2]=e*-s+o*f,n[3]=i*-s+a*f,n[4]=u,n[5]=c,n}function tn(n,r,t){var e=r[0],i=r[1],o=r[2],a=r[3],u=r[4],c=r[5],s=t[0],f=t[1];return n[0]=e*s,n[1]=i*s,n[2]=o*f,n[3]=a*f,n[4]=u,n[5]=c,n}function en(n,r,t){var e=r[0],i=r[1],o=r[2],a=r[3],u=r[4],c=r[5],s=t[0],f=t[1];return n[0]=e,n[1]=i,n[2]=o,n[3]=a,n[4]=e*s+o*f+u,n[5]=i*s+a*f+c,n}function on(n,r){var t=Math.sin(r),e=Math.cos(r);return n[0]=e,n[1]=t,n[2]=-t,n[3]=e,n[4]=0,n[5]=0,n}function an(n,r){return n[0]=r[0],n[1]=0,n[2]=0,n[3]=r[1],n[4]=0,n[5]=0,n}function un(n,r){return n[0]=1,n[1]=0,n[2]=0,n[3]=1,n[4]=r[0],n[5]=r[1],n}function cn(n){return"mat2d("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+", "+n[4]+", "+n[5]+")"}function sn(n){return Math.sqrt(Math.pow(n[0],2)+Math.pow(n[1],2)+Math.pow(n[2],2)+Math.pow(n[3],2)+Math.pow(n[4],2)+Math.pow(n[5],2)+1)}function fn(n,r,t){return n[0]=r[0]+t[0],n[1]=r[1]+t[1],n[2]=r[2]+t[2],n[3]=r[3]+t[3],n[4]=r[4]+t[4],n[5]=r[5]+t[5],n}function ln(n,r,t){return n[0]=r[0]-t[0],n[1]=r[1]-t[1],n[2]=r[2]-t[2],n[3]=r[3]-t[3],n[4]=r[4]-t[4],n[5]=r[5]-t[5],n}function dn(n,r,t){return n[0]=r[0]*t,n[1]=r[1]*t,n[2]=r[2]*t,n[3]=r[3]*t,n[4]=r[4]*t,n[5]=r[5]*t,n}function hn(n,r,t,e){return n[0]=r[0]+t[0]*e,n[1]=r[1]+t[1]*e,n[2]=r[2]+t[2]*e,n[3]=r[3]+t[3]*e,n[4]=r[4]+t[4]*e,n[5]=r[5]+t[5]*e,n}function vn(n,r){return n[0]===r[0]&&n[1]===r[1]&&n[2]===r[2]&&n[3]===r[3]&&n[4]===r[4]&&n[5]===r[5]}function mn(n,r){var t=n[0],e=n[1],i=n[2],o=n[3],a=n[4],u=n[5],c=r[0],s=r[1],f=r[2],l=r[3],d=r[4],v=r[5];return Math.abs(t-c)<=h*Math.max(1,Math.abs(t),Math.abs(c))&&Math.abs(e-s)<=h*Math.max(1,Math.abs(e),Math.abs(s))&&Math.abs(i-f)<=h*Math.max(1,Math.abs(i),Math.abs(f))&&Math.abs(o-l)<=h*Math.max(1,Math.abs(o),Math.abs(l))&&Math.abs(a-d)<=h*Math.max(1,Math.abs(a),Math.abs(d))&&Math.abs(u-v)<=h*Math.max(1,Math.abs(u),Math.abs(v))}var _n=nn,Mn=ln;function gn(){var n=new v(9);return v!=Float32Array&&(n[1]=0,n[2]=0,n[3]=0,n[5]=0,n[6]=0,n[7]=0),n[0]=1,n[4]=1,n[8]=1,n}function xn(n,r){return n[0]=r[0],n[1]=r[1],n[2]=r[2],n[3]=r[4],n[4]=r[5],n[5]=r[6],n[6]=r[8],n[7]=r[9],n[8]=r[10],n}function pn(n){var r=new v(9);return r[0]=n[0],r[1]=n[1],r[2]=n[2],r[3]=n[3],r[4]=n[4],r[5]=n[5],r[6]=n[6],r[7]=n[7],r[8]=n[8],r}function In(n,r){return n[0]=r[0],n[1]=r[1],n[2]=r[2],n[3]=r[3],n[4]=r[4],n[5]=r[5],n[6]=r[6],n[7]=r[7],n[8]=r[8],n}function bn(n,r,t,e,i,o,a,u,c){var s=new v(9);return s[0]=n,s[1]=r,s[2]=t,s[3]=e,s[4]=i,s[5]=o,s[6]=a,s[7]=u,s[8]=c,s}function En(n,r,t,e,i,o,a,u,c,s){return n[0]=r,n[1]=t,n[2]=e,n[3]=i,n[4]=o,n[5]=a,n[6]=u,n[7]=c,n[8]=s,n}function yn(n){return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=1,n[5]=0,n[6]=0,n[7]=0,n[8]=1,n}function Sn(n,r){if(n===r){var t=r[1],e=r[2],i=r[5];n[1]=r[3],n[2]=r[6],n[3]=t,n[5]=r[7],n[6]=e,n[7]=i}else n[0]=r[0],n[1]=r[3],n[2]=r[6],n[3]=r[1],n[4]=r[4],n[5]=r[7],n[6]=r[2],n[7]=r[5],n[8]=r[8];return n}function wn(n,r){var t=r[0],e=r[1],i=r[2],o=r[3],a=r[4],u=r[5],c=r[6],s=r[7],f=r[8],l=f*a-u*s,d=-f*o+u*c,h=s*o-a*c,v=t*l+e*d+i*h;return v?(v=1/v,n[0]=l*v,n[1]=(-f*e+i*s)*v,n[2]=(u*e-i*a)*v,n[3]=d*v,n[4]=(f*t-i*c)*v,n[5]=(-u*t+i*o)*v,n[6]=h*v,n[7]=(-s*t+e*c)*v,n[8]=(a*t-e*o)*v,n):null}function Ln(n,r){var t=r[0],e=r[1],i=r[2],o=r[3],a=r[4],u=r[5],c=r[6],s=r[7],f=r[8];return n[0]=a*f-u*s,n[1]=i*s-e*f,n[2]=e*u-i*a,n[3]=u*c-o*f,n[4]=t*f-i*c,n[5]=i*o-t*u,n[6]=o*s-a*c,n[7]=e*c-t*s,n[8]=t*a-e*o,n}function Tn(n){var r=n[0],t=n[1],e=n[2],i=n[3],o=n[4],a=n[5],u=n[6],c=n[7],s=n[8];return r*(s*o-a*c)+t*(-s*i+a*u)+e*(c*i-o*u)}function Rn(n,r,t){var e=r[0],i=r[1],o=r[2],a=r[3],u=r[4],c=r[5],s=r[6],f=r[7],l=r[8],d=t[0],h=t[1],v=t[2],m=t[3],_=t[4],M=t[5],g=t[6],x=t[7],p=t[8];return n[0]=d*e+h*a+v*s,n[1]=d*i+h*u+v*f,n[2]=d*o+h*c+v*l,n[3]=m*e+_*a+M*s,n[4]=m*i+_*u+M*f,n[5]=m*o+_*c+M*l,n[6]=g*e+x*a+p*s,n[7]=g*i+x*u+p*f,n[8]=g*o+x*c+p*l,n}function Pn(n,r,t){var e=r[0],i=r[1],o=r[2],a=r[3],u=r[4],c=r[5],s=r[6],f=r[7],l=r[8],d=t[0],h=t[1];return n[0]=e,n[1]=i,n[2]=o,n[3]=a,n[4]=u,n[5]=c,n[6]=d*e+h*a+s,n[7]=d*i+h*u+f,n[8]=d*o+h*c+l,n}function An(n,r,t){var e=r[0],i=r[1],o=r[2],a=r[3],u=r[4],c=r[5],s=r[6],f=r[7],l=r[8],d=Math.sin(t),h=Math.cos(t);return n[0]=h*e+d*a,n[1]=h*i+d*u,n[2]=h*o+d*c,n[3]=h*a-d*e,n[4]=h*u-d*i,n[5]=h*c-d*o,n[6]=s,n[7]=f,n[8]=l,n}function On(n,r,t){var e=t[0],i=t[1];return n[0]=e*r[0],n[1]=e*r[1],n[2]=e*r[2],n[3]=i*r[3],n[4]=i*r[4],n[5]=i*r[5],n[6]=r[6],n[7]=r[7],n[8]=r[8],n}function Nn(n,r){return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=1,n[5]=0,n[6]=r[0],n[7]=r[1],n[8]=1,n}function zn(n,r){var t=Math.sin(r),e=Math.cos(r);return n[0]=e,n[1]=t,n[2]=0,n[3]=-t,n[4]=e,n[5]=0,n[6]=0,n[7]=0,n[8]=1,n}function Fn(n,r){return n[0]=r[0],n[1]=0,n[2]=0,n[3]=0,n[4]=r[1],n[5]=0,n[6]=0,n[7]=0,n[8]=1,n}function qn(n,r){return n[0]=r[0],n[1]=r[1],n[2]=0,n[3]=r[2],n[4]=r[3],n[5]=0,n[6]=r[4],n[7]=r[5],n[8]=1,n}function Dn(n,r){var t=r[0],e=r[1],i=r[2],o=r[3],a=t+t,u=e+e,c=i+i,s=t*a,f=e*a,l=e*u,d=i*a,h=i*u,v=i*c,m=o*a,_=o*u,M=o*c;return n[0]=1-l-v,n[3]=f-M,n[6]=d+_,n[1]=f+M,n[4]=1-s-v,n[7]=h-m,n[2]=d-_,n[5]=h+m,n[8]=1-s-l,n}function Cn(n,r){var t=r[0],e=r[1],i=r[2],o=r[3],a=r[4],u=r[5],c=r[6],s=r[7],f=r[8],l=r[9],d=r[10],h=r[11],v=r[12],m=r[13],_=r[14],M=r[15],g=t*u-e*a,x=t*c-i*a,p=t*s-o*a,I=e*c-i*u,b=e*s-o*u,E=i*s-o*c,y=f*m-l*v,S=f*_-d*v,w=f*M-h*v,L=l*_-d*m,T=l*M-h*m,R=d*M-h*_,P=g*R-x*T+p*L+I*w-b*S+E*y;return P?(P=1/P,n[0]=(u*R-c*T+s*L)*P,n[1]=(c*w-a*R-s*S)*P,n[2]=(a*T-u*w+s*y)*P,n[3]=(i*T-e*R-o*L)*P,n[4]=(t*R-i*w+o*S)*P,n[5]=(e*w-t*T-o*y)*P,n[6]=(m*E-_*b+M*I)*P,n[7]=(_*p-v*E-M*x)*P,n[8]=(v*b-m*p+M*g)*P,n):null}function Gn(n,r,t){return n[0]=2/r,n[1]=0,n[2]=0,n[3]=0,n[4]=-2/t,n[5]=0,n[6]=-1,n[7]=1,n[8]=1,n}function Hn(n){return"mat3("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+", "+n[4]+", "+n[5]+", "+n[6]+", "+n[7]+", "+n[8]+")"}function Un(n){return Math.sqrt(Math.pow(n[0],2)+Math.pow(n[1],2)+Math.pow(n[2],2)+Math.pow(n[3],2)+Math.pow(n[4],2)+Math.pow(n[5],2)+Math.pow(n[6],2)+Math.pow(n[7],2)+Math.pow(n[8],2))}function Bn(n,r,t){return n[0]=r[0]+t[0],n[1]=r[1]+t[1],n[2]=r[2]+t[2],n[3]=r[3]+t[3],n[4]=r[4]+t[4],n[5]=r[5]+t[5],n[6]=r[6]+t[6],n[7]=r[7]+t[7],n[8]=r[8]+t[8],n}function Zn(n,r,t){return n[0]=r[0]-t[0],n[1]=r[1]-t[1],n[2]=r[2]-t[2],n[3]=r[3]-t[3],n[4]=r[4]-t[4],n[5]=r[5]-t[5],n[6]=r[6]-t[6],n[7]=r[7]-t[7],n[8]=r[8]-t[8],n}function Vn(n,r,t){return n[0]=r[0]*t,n[1]=r[1]*t,n[2]=r[2]*t,n[3]=r[3]*t,n[4]=r[4]*t,n[5]=r[5]*t,n[6]=r[6]*t,n[7]=r[7]*t,n[8]=r[8]*t,n}function kn(n,r,t,e){return n[0]=r[0]+t[0]*e,n[1]=r[1]+t[1]*e,n[2]=r[2]+t[2]*e,n[3]=r[3]+t[3]*e,n[4]=r[4]+t[4]*e,n[5]=r[5]+t[5]*e,n[6]=r[6]+t[6]*e,n[7]=r[7]+t[7]*e,n[8]=r[8]+t[8]*e,n}function Yn(n,r){return n[0]===r[0]&&n[1]===r[1]&&n[2]===r[2]&&n[3]===r[3]&&n[4]===r[4]&&n[5]===r[5]&&n[6]===r[6]&&n[7]===r[7]&&n[8]===r[8]}function jn(n,r){var t=n[0],e=n[1],i=n[2],o=n[3],a=n[4],u=n[5],c=n[6],s=n[7],f=n[8],l=r[0],d=r[1],v=r[2],m=r[3],_=r[4],M=r[5],g=r[6],x=r[7],p=r[8];return Math.abs(t-l)<=h*Math.max(1,Math.abs(t),Math.abs(l))&&Math.abs(e-d)<=h*Math.max(1,Math.abs(e),Math.abs(d))&&Math.abs(i-v)<=h*Math.max(1,Math.abs(i),Math.abs(v))&&Math.abs(o-m)<=h*Math.max(1,Math.abs(o),Math.abs(m))&&Math.abs(a-_)<=h*Math.max(1,Math.abs(a),Math.abs(_))&&Math.abs(u-M)<=h*Math.max(1,Math.abs(u),Math.abs(M))&&Math.abs(c-g)<=h*Math.max(1,Math.abs(c),Math.abs(g))&&Math.abs(s-x)<=h*Math.max(1,Math.abs(s),Math.abs(x))&&Math.abs(f-p)<=h*Math.max(1,Math.abs(f),Math.abs(p))}var Xn=Rn,Wn=Zn;function Qn(){var n=new v(16);return v!=Float32Array&&(n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[11]=0,n[12]=0,n[13]=0,n[14]=0),n[0]=1,n[5]=1,n[10]=1,n[15]=1,n}function Kn(n){var r=new v(16);return r[0]=n[0],r[1]=n[1],r[2]=n[2],r[3]=n[3],r[4]=n[4],r[5]=n[5],r[6]=n[6],r[7]=n[7],r[8]=n[8],r[9]=n[9],r[10]=n[10],r[11]=n[11],r[12]=n[12],r[13]=n[13],r[14]=n[14],r[15]=n[15],r}function Jn(n,r){return n[0]=r[0],n[1]=r[1],n[2]=r[2],n[3]=r[3],n[4]=r[4],n[5]=r[5],n[6]=r[6],n[7]=r[7],n[8]=r[8],n[9]=r[9],n[10]=r[10],n[11]=r[11],n[12]=r[12],n[13]=r[13],n[14]=r[14],n[15]=r[15],n}function $n(n,r,t,e,i,o,a,u,c,s,f,l,d,h,m,_){var M=new v(16);return M[0]=n,M[1]=r,M[2]=t,M[3]=e,M[4]=i,M[5]=o,M[6]=a,M[7]=u,M[8]=c,M[9]=s,M[10]=f,M[11]=l,M[12]=d,M[13]=h,M[14]=m,M[15]=_,M}function nr(n,r,t,e,i,o,a,u,c,s,f,l,d,h,v,m,_){return n[0]=r,n[1]=t,n[2]=e,n[3]=i,n[4]=o,n[5]=a,n[6]=u,n[7]=c,n[8]=s,n[9]=f,n[10]=l,n[11]=d,n[12]=h,n[13]=v,n[14]=m,n[15]=_,n}function rr(n){return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=1,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=1,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}function tr(n,r){if(n===r){var t=r[1],e=r[2],i=r[3],o=r[6],a=r[7],u=r[11];n[1]=r[4],n[2]=r[8],n[3]=r[12],n[4]=t,n[6]=r[9],n[7]=r[13],n[8]=e,n[9]=o,n[11]=r[14],n[12]=i,n[13]=a,n[14]=u}else n[0]=r[0],n[1]=r[4],n[2]=r[8],n[3]=r[12],n[4]=r[1],n[5]=r[5],n[6]=r[9],n[7]=r[13],n[8]=r[2],n[9]=r[6],n[10]=r[10],n[11]=r[14],n[12]=r[3],n[13]=r[7],n[14]=r[11],n[15]=r[15];return n}function er(n,r){var t=r[0],e=r[1],i=r[2],o=r[3],a=r[4],u=r[5],c=r[6],s=r[7],f=r[8],l=r[9],d=r[10],h=r[11],v=r[12],m=r[13],_=r[14],M=r[15],g=t*u-e*a,x=t*c-i*a,p=t*s-o*a,I=e*c-i*u,b=e*s-o*u,E=i*s-o*c,y=f*m-l*v,S=f*_-d*v,w=f*M-h*v,L=l*_-d*m,T=l*M-h*m,R=d*M-h*_,P=g*R-x*T+p*L+I*w-b*S+E*y;return P?(P=1/P,n[0]=(u*R-c*T+s*L)*P,n[1]=(i*T-e*R-o*L)*P,n[2]=(m*E-_*b+M*I)*P,n[3]=(d*b-l*E-h*I)*P,n[4]=(c*w-a*R-s*S)*P,n[5]=(t*R-i*w+o*S)*P,n[6]=(_*p-v*E-M*x)*P,n[7]=(f*E-d*p+h*x)*P,n[8]=(a*T-u*w+s*y)*P,n[9]=(e*w-t*T-o*y)*P,n[10]=(v*b-m*p+M*g)*P,n[11]=(l*p-f*b-h*g)*P,n[12]=(u*S-a*L-c*y)*P,n[13]=(t*L-e*S+i*y)*P,n[14]=(m*x-v*I-_*g)*P,n[15]=(f*I-l*x+d*g)*P,n):null}function ir(n,r){var t=r[0],e=r[1],i=r[2],o=r[3],a=r[4],u=r[5],c=r[6],s=r[7],f=r[8],l=r[9],d=r[10],h=r[11],v=r[12],m=r[13],_=r[14],M=r[15];return n[0]=u*(d*M-h*_)-l*(c*M-s*_)+m*(c*h-s*d),n[1]=-(e*(d*M-h*_)-l*(i*M-o*_)+m*(i*h-o*d)),n[2]=e*(c*M-s*_)-u*(i*M-o*_)+m*(i*s-o*c),n[3]=-(e*(c*h-s*d)-u*(i*h-o*d)+l*(i*s-o*c)),n[4]=-(a*(d*M-h*_)-f*(c*M-s*_)+v*(c*h-s*d)),n[5]=t*(d*M-h*_)-f*(i*M-o*_)+v*(i*h-o*d),n[6]=-(t*(c*M-s*_)-a*(i*M-o*_)+v*(i*s-o*c)),n[7]=t*(c*h-s*d)-a*(i*h-o*d)+f*(i*s-o*c),n[8]=a*(l*M-h*m)-f*(u*M-s*m)+v*(u*h-s*l),n[9]=-(t*(l*M-h*m)-f*(e*M-o*m)+v*(e*h-o*l)),n[10]=t*(u*M-s*m)-a*(e*M-o*m)+v*(e*s-o*u),n[11]=-(t*(u*h-s*l)-a*(e*h-o*l)+f*(e*s-o*u)),n[12]=-(a*(l*_-d*m)-f*(u*_-c*m)+v*(u*d-c*l)),n[13]=t*(l*_-d*m)-f*(e*_-i*m)+v*(e*d-i*l),n[14]=-(t*(u*_-c*m)-a*(e*_-i*m)+v*(e*c-i*u)),n[15]=t*(u*d-c*l)-a*(e*d-i*l)+f*(e*c-i*u),n}function or(n){var r=n[0],t=n[1],e=n[2],i=n[3],o=n[4],a=n[5],u=n[6],c=n[7],s=n[8],f=n[9],l=n[10],d=n[11],h=n[12],v=n[13],m=n[14],_=n[15];return(r*a-t*o)*(l*_-d*m)-(r*u-e*o)*(f*_-d*v)+(r*c-i*o)*(f*m-l*v)+(t*u-e*a)*(s*_-d*h)-(t*c-i*a)*(s*m-l*h)+(e*c-i*u)*(s*v-f*h)}function ar(n,r,t){var e=r[0],i=r[1],o=r[2],a=r[3],u=r[4],c=r[5],s=r[6],f=r[7],l=r[8],d=r[9],h=r[10],v=r[11],m=r[12],_=r[13],M=r[14],g=r[15],x=t[0],p=t[1],I=t[2],b=t[3];return n[0]=x*e+p*u+I*l+b*m,n[1]=x*i+p*c+I*d+b*_,n[2]=x*o+p*s+I*h+b*M,n[3]=x*a+p*f+I*v+b*g,x=t[4],p=t[5],I=t[6],b=t[7],n[4]=x*e+p*u+I*l+b*m,n[5]=x*i+p*c+I*d+b*_,n[6]=x*o+p*s+I*h+b*M,n[7]=x*a+p*f+I*v+b*g,x=t[8],p=t[9],I=t[10],b=t[11],n[8]=x*e+p*u+I*l+b*m,n[9]=x*i+p*c+I*d+b*_,n[10]=x*o+p*s+I*h+b*M,n[11]=x*a+p*f+I*v+b*g,x=t[12],p=t[13],I=t[14],b=t[15],n[12]=x*e+p*u+I*l+b*m,n[13]=x*i+p*c+I*d+b*_,n[14]=x*o+p*s+I*h+b*M,n[15]=x*a+p*f+I*v+b*g,n}function ur(n,r,t){var e=t[0],i=t[1],o=t[2],a=void 0,u=void 0,c=void 0,s=void 0,f=void 0,l=void 0,d=void 0,h=void 0,v=void 0,m=void 0,_=void 0,M=void 0;return r===n?(n[12]=r[0]*e+r[4]*i+r[8]*o+r[12],n[13]=r[1]*e+r[5]*i+r[9]*o+r[13],n[14]=r[2]*e+r[6]*i+r[10]*o+r[14],n[15]=r[3]*e+r[7]*i+r[11]*o+r[15]):(a=r[0],u=r[1],c=r[2],s=r[3],f=r[4],l=r[5],d=r[6],h=r[7],v=r[8],m=r[9],_=r[10],M=r[11],n[0]=a,n[1]=u,n[2]=c,n[3]=s,n[4]=f,n[5]=l,n[6]=d,n[7]=h,n[8]=v,n[9]=m,n[10]=_,n[11]=M,n[12]=a*e+f*i+v*o+r[12],n[13]=u*e+l*i+m*o+r[13],n[14]=c*e+d*i+_*o+r[14],n[15]=s*e+h*i+M*o+r[15]),n}function cr(n,r,t){var e=t[0],i=t[1],o=t[2];return n[0]=r[0]*e,n[1]=r[1]*e,n[2]=r[2]*e,n[3]=r[3]*e,n[4]=r[4]*i,n[5]=r[5]*i,n[6]=r[6]*i,n[7]=r[7]*i,n[8]=r[8]*o,n[9]=r[9]*o,n[10]=r[10]*o,n[11]=r[11]*o,n[12]=r[12],n[13]=r[13],n[14]=r[14],n[15]=r[15],n}function sr(n,r,t,e){var i,o,a,u,c,s,f,l,d,v,m,_,M,g,x,p,I,b,E,y,S,w,L,T,R=e[0],P=e[1],A=e[2],O=Math.sqrt(R*R+P*P+A*A);return O<h?null:(R*=O=1/O,P*=O,A*=O,i=Math.sin(t),a=1-(o=Math.cos(t)),u=r[0],c=r[1],s=r[2],f=r[3],l=r[4],d=r[5],v=r[6],m=r[7],_=r[8],M=r[9],g=r[10],x=r[11],p=R*R*a+o,I=P*R*a+A*i,b=A*R*a-P*i,E=R*P*a-A*i,y=P*P*a+o,S=A*P*a+R*i,w=R*A*a+P*i,L=P*A*a-R*i,T=A*A*a+o,n[0]=u*p+l*I+_*b,n[1]=c*p+d*I+M*b,n[2]=s*p+v*I+g*b,n[3]=f*p+m*I+x*b,n[4]=u*E+l*y+_*S,n[5]=c*E+d*y+M*S,n[6]=s*E+v*y+g*S,n[7]=f*E+m*y+x*S,n[8]=u*w+l*L+_*T,n[9]=c*w+d*L+M*T,n[10]=s*w+v*L+g*T,n[11]=f*w+m*L+x*T,r!==n&&(n[12]=r[12],n[13]=r[13],n[14]=r[14],n[15]=r[15]),n)}function fr(n,r,t){var e=Math.sin(t),i=Math.cos(t),o=r[4],a=r[5],u=r[6],c=r[7],s=r[8],f=r[9],l=r[10],d=r[11];return r!==n&&(n[0]=r[0],n[1]=r[1],n[2]=r[2],n[3]=r[3],n[12]=r[12],n[13]=r[13],n[14]=r[14],n[15]=r[15]),n[4]=o*i+s*e,n[5]=a*i+f*e,n[6]=u*i+l*e,n[7]=c*i+d*e,n[8]=s*i-o*e,n[9]=f*i-a*e,n[10]=l*i-u*e,n[11]=d*i-c*e,n}function lr(n,r,t){var e=Math.sin(t),i=Math.cos(t),o=r[0],a=r[1],u=r[2],c=r[3],s=r[8],f=r[9],l=r[10],d=r[11];return r!==n&&(n[4]=r[4],n[5]=r[5],n[6]=r[6],n[7]=r[7],n[12]=r[12],n[13]=r[13],n[14]=r[14],n[15]=r[15]),n[0]=o*i-s*e,n[1]=a*i-f*e,n[2]=u*i-l*e,n[3]=c*i-d*e,n[8]=o*e+s*i,n[9]=a*e+f*i,n[10]=u*e+l*i,n[11]=c*e+d*i,n}function dr(n,r,t){var e=Math.sin(t),i=Math.cos(t),o=r[0],a=r[1],u=r[2],c=r[3],s=r[4],f=r[5],l=r[6],d=r[7];return r!==n&&(n[8]=r[8],n[9]=r[9],n[10]=r[10],n[11]=r[11],n[12]=r[12],n[13]=r[13],n[14]=r[14],n[15]=r[15]),n[0]=o*i+s*e,n[1]=a*i+f*e,n[2]=u*i+l*e,n[3]=c*i+d*e,n[4]=s*i-o*e,n[5]=f*i-a*e,n[6]=l*i-u*e,n[7]=d*i-c*e,n}function hr(n,r){return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=1,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=1,n[11]=0,n[12]=r[0],n[13]=r[1],n[14]=r[2],n[15]=1,n}function vr(n,r){return n[0]=r[0],n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=r[1],n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=r[2],n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}function mr(n,r,t){var e,i,o,a=t[0],u=t[1],c=t[2],s=Math.sqrt(a*a+u*u+c*c);return s<h?null:(a*=s=1/s,u*=s,c*=s,e=Math.sin(r),o=1-(i=Math.cos(r)),n[0]=a*a*o+i,n[1]=u*a*o+c*e,n[2]=c*a*o-u*e,n[3]=0,n[4]=a*u*o-c*e,n[5]=u*u*o+i,n[6]=c*u*o+a*e,n[7]=0,n[8]=a*c*o+u*e,n[9]=u*c*o-a*e,n[10]=c*c*o+i,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n)}function _r(n,r){var t=Math.sin(r),e=Math.cos(r);return n[0]=1,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=e,n[6]=t,n[7]=0,n[8]=0,n[9]=-t,n[10]=e,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}function Mr(n,r){var t=Math.sin(r),e=Math.cos(r);return n[0]=e,n[1]=0,n[2]=-t,n[3]=0,n[4]=0,n[5]=1,n[6]=0,n[7]=0,n[8]=t,n[9]=0,n[10]=e,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}function gr(n,r){var t=Math.sin(r),e=Math.cos(r);return n[0]=e,n[1]=t,n[2]=0,n[3]=0,n[4]=-t,n[5]=e,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=1,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}function xr(n,r,t){var e=r[0],i=r[1],o=r[2],a=r[3],u=e+e,c=i+i,s=o+o,f=e*u,l=e*c,d=e*s,h=i*c,v=i*s,m=o*s,_=a*u,M=a*c,g=a*s;return n[0]=1-(h+m),n[1]=l+g,n[2]=d-M,n[3]=0,n[4]=l-g,n[5]=1-(f+m),n[6]=v+_,n[7]=0,n[8]=d+M,n[9]=v-_,n[10]=1-(f+h),n[11]=0,n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n}function pr(n,r){var t=new v(3),e=-r[0],i=-r[1],o=-r[2],a=r[3],u=r[4],c=r[5],s=r[6],f=r[7],l=e*e+i*i+o*o+a*a;return l>0?(t[0]=2*(u*a+f*e+c*o-s*i)/l,t[1]=2*(c*a+f*i+s*e-u*o)/l,t[2]=2*(s*a+f*o+u*i-c*e)/l):(t[0]=2*(u*a+f*e+c*o-s*i),t[1]=2*(c*a+f*i+s*e-u*o),t[2]=2*(s*a+f*o+u*i-c*e)),xr(n,r,t),n}function Ir(n,r){return n[0]=r[12],n[1]=r[13],n[2]=r[14],n}function br(n,r){var t=r[0],e=r[1],i=r[2],o=r[4],a=r[5],u=r[6],c=r[8],s=r[9],f=r[10];return n[0]=Math.sqrt(t*t+e*e+i*i),n[1]=Math.sqrt(o*o+a*a+u*u),n[2]=Math.sqrt(c*c+s*s+f*f),n}function Er(n,r){var t=r[0]+r[5]+r[10],e=0;return t>0?(e=2*Math.sqrt(t+1),n[3]=.25*e,n[0]=(r[6]-r[9])/e,n[1]=(r[8]-r[2])/e,n[2]=(r[1]-r[4])/e):r[0]>r[5]&&r[0]>r[10]?(e=2*Math.sqrt(1+r[0]-r[5]-r[10]),n[3]=(r[6]-r[9])/e,n[0]=.25*e,n[1]=(r[1]+r[4])/e,n[2]=(r[8]+r[2])/e):r[5]>r[10]?(e=2*Math.sqrt(1+r[5]-r[0]-r[10]),n[3]=(r[8]-r[2])/e,n[0]=(r[1]+r[4])/e,n[1]=.25*e,n[2]=(r[6]+r[9])/e):(e=2*Math.sqrt(1+r[10]-r[0]-r[5]),n[3]=(r[1]-r[4])/e,n[0]=(r[8]+r[2])/e,n[1]=(r[6]+r[9])/e,n[2]=.25*e),n}function yr(n,r,t,e){var i=r[0],o=r[1],a=r[2],u=r[3],c=i+i,s=o+o,f=a+a,l=i*c,d=i*s,h=i*f,v=o*s,m=o*f,_=a*f,M=u*c,g=u*s,x=u*f,p=e[0],I=e[1],b=e[2];return n[0]=(1-(v+_))*p,n[1]=(d+x)*p,n[2]=(h-g)*p,n[3]=0,n[4]=(d-x)*I,n[5]=(1-(l+_))*I,n[6]=(m+M)*I,n[7]=0,n[8]=(h+g)*b,n[9]=(m-M)*b,n[10]=(1-(l+v))*b,n[11]=0,n[12]=t[0],n[13]=t[1],n[14]=t[2],n[15]=1,n}function Sr(n,r,t,e,i){var o=r[0],a=r[1],u=r[2],c=r[3],s=o+o,f=a+a,l=u+u,d=o*s,h=o*f,v=o*l,m=a*f,_=a*l,M=u*l,g=c*s,x=c*f,p=c*l,I=e[0],b=e[1],E=e[2],y=i[0],S=i[1],w=i[2],L=(1-(m+M))*I,T=(h+p)*I,R=(v-x)*I,P=(h-p)*b,A=(1-(d+M))*b,O=(_+g)*b,N=(v+x)*E,z=(_-g)*E,F=(1-(d+m))*E;return n[0]=L,n[1]=T,n[2]=R,n[3]=0,n[4]=P,n[5]=A,n[6]=O,n[7]=0,n[8]=N,n[9]=z,n[10]=F,n[11]=0,n[12]=t[0]+y-(L*y+P*S+N*w),n[13]=t[1]+S-(T*y+A*S+z*w),n[14]=t[2]+w-(R*y+O*S+F*w),n[15]=1,n}function wr(n,r){var t=r[0],e=r[1],i=r[2],o=r[3],a=t+t,u=e+e,c=i+i,s=t*a,f=e*a,l=e*u,d=i*a,h=i*u,v=i*c,m=o*a,_=o*u,M=o*c;return n[0]=1-l-v,n[1]=f+M,n[2]=d-_,n[3]=0,n[4]=f-M,n[5]=1-s-v,n[6]=h+m,n[7]=0,n[8]=d+_,n[9]=h-m,n[10]=1-s-l,n[11]=0,n[12]=0,n[13]=0,n[14]=0,n[15]=1,n}function Lr(n,r,t,e,i,o,a){var u=1/(t-r),c=1/(i-e),s=1/(o-a);return n[0]=2*o*u,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=2*o*c,n[6]=0,n[7]=0,n[8]=(t+r)*u,n[9]=(i+e)*c,n[10]=(a+o)*s,n[11]=-1,n[12]=0,n[13]=0,n[14]=a*o*2*s,n[15]=0,n}function Tr(n,r,t,e,i){var o=1/Math.tan(r/2),a=void 0;return n[0]=o/t,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=o,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[11]=-1,n[12]=0,n[13]=0,n[15]=0,null!=i&&i!==1/0?(a=1/(e-i),n[10]=(i+e)*a,n[14]=2*i*e*a):(n[10]=-1,n[14]=-2*e),n}function Rr(n,r,t,e){var i=Math.tan(r.upDegrees*Math.PI/180),o=Math.tan(r.downDegrees*Math.PI/180),a=Math.tan(r.leftDegrees*Math.PI/180),u=Math.tan(r.rightDegrees*Math.PI/180),c=2/(a+u),s=2/(i+o);return n[0]=c,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=s,n[6]=0,n[7]=0,n[8]=-(a-u)*c*.5,n[9]=(i-o)*s*.5,n[10]=e/(t-e),n[11]=-1,n[12]=0,n[13]=0,n[14]=e*t/(t-e),n[15]=0,n}function Pr(n,r,t,e,i,o,a){var u=1/(r-t),c=1/(e-i),s=1/(o-a);return n[0]=-2*u,n[1]=0,n[2]=0,n[3]=0,n[4]=0,n[5]=-2*c,n[6]=0,n[7]=0,n[8]=0,n[9]=0,n[10]=2*s,n[11]=0,n[12]=(r+t)*u,n[13]=(i+e)*c,n[14]=(a+o)*s,n[15]=1,n}function Ar(n,r,t,e){var i=void 0,o=void 0,a=void 0,u=void 0,c=void 0,s=void 0,f=void 0,l=void 0,d=void 0,v=void 0,m=r[0],_=r[1],M=r[2],g=e[0],x=e[1],p=e[2],I=t[0],b=t[1],E=t[2];return Math.abs(m-I)<h&&Math.abs(_-b)<h&&Math.abs(M-E)<h?rr(n):(f=m-I,l=_-b,d=M-E,i=x*(d*=v=1/Math.sqrt(f*f+l*l+d*d))-p*(l*=v),o=p*(f*=v)-g*d,a=g*l-x*f,(v=Math.sqrt(i*i+o*o+a*a))?(i*=v=1/v,o*=v,a*=v):(i=0,o=0,a=0),u=l*a-d*o,c=d*i-f*a,s=f*o-l*i,(v=Math.sqrt(u*u+c*c+s*s))?(u*=v=1/v,c*=v,s*=v):(u=0,c=0,s=0),n[0]=i,n[1]=u,n[2]=f,n[3]=0,n[4]=o,n[5]=c,n[6]=l,n[7]=0,n[8]=a,n[9]=s,n[10]=d,n[11]=0,n[12]=-(i*m+o*_+a*M),n[13]=-(u*m+c*_+s*M),n[14]=-(f*m+l*_+d*M),n[15]=1,n)}function Or(n,r,t,e){var i=r[0],o=r[1],a=r[2],u=e[0],c=e[1],s=e[2],f=i-t[0],l=o-t[1],d=a-t[2],h=f*f+l*l+d*d;h>0&&(f*=h=1/Math.sqrt(h),l*=h,d*=h);var v=c*d-s*l,m=s*f-u*d,_=u*l-c*f;return(h=v*v+m*m+_*_)>0&&(v*=h=1/Math.sqrt(h),m*=h,_*=h),n[0]=v,n[1]=m,n[2]=_,n[3]=0,n[4]=l*_-d*m,n[5]=d*v-f*_,n[6]=f*m-l*v,n[7]=0,n[8]=f,n[9]=l,n[10]=d,n[11]=0,n[12]=i,n[13]=o,n[14]=a,n[15]=1,n}function Nr(n){return"mat4("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+", "+n[4]+", "+n[5]+", "+n[6]+", "+n[7]+", "+n[8]+", "+n[9]+", "+n[10]+", "+n[11]+", "+n[12]+", "+n[13]+", "+n[14]+", "+n[15]+")"}function zr(n){return Math.sqrt(Math.pow(n[0],2)+Math.pow(n[1],2)+Math.pow(n[2],2)+Math.pow(n[3],2)+Math.pow(n[4],2)+Math.pow(n[5],2)+Math.pow(n[6],2)+Math.pow(n[7],2)+Math.pow(n[8],2)+Math.pow(n[9],2)+Math.pow(n[10],2)+Math.pow(n[11],2)+Math.pow(n[12],2)+Math.pow(n[13],2)+Math.pow(n[14],2)+Math.pow(n[15],2))}function Fr(n,r,t){return n[0]=r[0]+t[0],n[1]=r[1]+t[1],n[2]=r[2]+t[2],n[3]=r[3]+t[3],n[4]=r[4]+t[4],n[5]=r[5]+t[5],n[6]=r[6]+t[6],n[7]=r[7]+t[7],n[8]=r[8]+t[8],n[9]=r[9]+t[9],n[10]=r[10]+t[10],n[11]=r[11]+t[11],n[12]=r[12]+t[12],n[13]=r[13]+t[13],n[14]=r[14]+t[14],n[15]=r[15]+t[15],n}function qr(n,r,t){return n[0]=r[0]-t[0],n[1]=r[1]-t[1],n[2]=r[2]-t[2],n[3]=r[3]-t[3],n[4]=r[4]-t[4],n[5]=r[5]-t[5],n[6]=r[6]-t[6],n[7]=r[7]-t[7],n[8]=r[8]-t[8],n[9]=r[9]-t[9],n[10]=r[10]-t[10],n[11]=r[11]-t[11],n[12]=r[12]-t[12],n[13]=r[13]-t[13],n[14]=r[14]-t[14],n[15]=r[15]-t[15],n}function Dr(n,r,t){return n[0]=r[0]*t,n[1]=r[1]*t,n[2]=r[2]*t,n[3]=r[3]*t,n[4]=r[4]*t,n[5]=r[5]*t,n[6]=r[6]*t,n[7]=r[7]*t,n[8]=r[8]*t,n[9]=r[9]*t,n[10]=r[10]*t,n[11]=r[11]*t,n[12]=r[12]*t,n[13]=r[13]*t,n[14]=r[14]*t,n[15]=r[15]*t,n}function Cr(n,r,t,e){return n[0]=r[0]+t[0]*e,n[1]=r[1]+t[1]*e,n[2]=r[2]+t[2]*e,n[3]=r[3]+t[3]*e,n[4]=r[4]+t[4]*e,n[5]=r[5]+t[5]*e,n[6]=r[6]+t[6]*e,n[7]=r[7]+t[7]*e,n[8]=r[8]+t[8]*e,n[9]=r[9]+t[9]*e,n[10]=r[10]+t[10]*e,n[11]=r[11]+t[11]*e,n[12]=r[12]+t[12]*e,n[13]=r[13]+t[13]*e,n[14]=r[14]+t[14]*e,n[15]=r[15]+t[15]*e,n}function Gr(n,r){return n[0]===r[0]&&n[1]===r[1]&&n[2]===r[2]&&n[3]===r[3]&&n[4]===r[4]&&n[5]===r[5]&&n[6]===r[6]&&n[7]===r[7]&&n[8]===r[8]&&n[9]===r[9]&&n[10]===r[10]&&n[11]===r[11]&&n[12]===r[12]&&n[13]===r[13]&&n[14]===r[14]&&n[15]===r[15]}function Hr(n,r){var t=n[0],e=n[1],i=n[2],o=n[3],a=n[4],u=n[5],c=n[6],s=n[7],f=n[8],l=n[9],d=n[10],v=n[11],m=n[12],_=n[13],M=n[14],g=n[15],x=r[0],p=r[1],I=r[2],b=r[3],E=r[4],y=r[5],S=r[6],w=r[7],L=r[8],T=r[9],R=r[10],P=r[11],A=r[12],O=r[13],N=r[14],z=r[15];return Math.abs(t-x)<=h*Math.max(1,Math.abs(t),Math.abs(x))&&Math.abs(e-p)<=h*Math.max(1,Math.abs(e),Math.abs(p))&&Math.abs(i-I)<=h*Math.max(1,Math.abs(i),Math.abs(I))&&Math.abs(o-b)<=h*Math.max(1,Math.abs(o),Math.abs(b))&&Math.abs(a-E)<=h*Math.max(1,Math.abs(a),Math.abs(E))&&Math.abs(u-y)<=h*Math.max(1,Math.abs(u),Math.abs(y))&&Math.abs(c-S)<=h*Math.max(1,Math.abs(c),Math.abs(S))&&Math.abs(s-w)<=h*Math.max(1,Math.abs(s),Math.abs(w))&&Math.abs(f-L)<=h*Math.max(1,Math.abs(f),Math.abs(L))&&Math.abs(l-T)<=h*Math.max(1,Math.abs(l),Math.abs(T))&&Math.abs(d-R)<=h*Math.max(1,Math.abs(d),Math.abs(R))&&Math.abs(v-P)<=h*Math.max(1,Math.abs(v),Math.abs(P))&&Math.abs(m-A)<=h*Math.max(1,Math.abs(m),Math.abs(A))&&Math.abs(_-O)<=h*Math.max(1,Math.abs(_),Math.abs(O))&&Math.abs(M-N)<=h*Math.max(1,Math.abs(M),Math.abs(N))&&Math.abs(g-z)<=h*Math.max(1,Math.abs(g),Math.abs(z))}var Ur=ar,Br=qr;function Zr(){var n=new v(3);return v!=Float32Array&&(n[0]=0,n[1]=0,n[2]=0),n}function Vr(n){var r=new v(3);return r[0]=n[0],r[1]=n[1],r[2]=n[2],r}function kr(n){var r=n[0],t=n[1],e=n[2];return Math.sqrt(r*r+t*t+e*e)}function Yr(n,r,t){var e=new v(3);return e[0]=n,e[1]=r,e[2]=t,e}function jr(n,r){return n[0]=r[0],n[1]=r[1],n[2]=r[2],n}function Xr(n,r,t,e){return n[0]=r,n[1]=t,n[2]=e,n}function Wr(n,r,t){return n[0]=r[0]+t[0],n[1]=r[1]+t[1],n[2]=r[2]+t[2],n}function Qr(n,r,t){return n[0]=r[0]-t[0],n[1]=r[1]-t[1],n[2]=r[2]-t[2],n}function Kr(n,r,t){return n[0]=r[0]*t[0],n[1]=r[1]*t[1],n[2]=r[2]*t[2],n}function Jr(n,r,t){return n[0]=r[0]/t[0],n[1]=r[1]/t[1],n[2]=r[2]/t[2],n}function $r(n,r){return n[0]=Math.ceil(r[0]),n[1]=Math.ceil(r[1]),n[2]=Math.ceil(r[2]),n}function nt(n,r){return n[0]=Math.floor(r[0]),n[1]=Math.floor(r[1]),n[2]=Math.floor(r[2]),n}function rt(n,r,t){return n[0]=Math.min(r[0],t[0]),n[1]=Math.min(r[1],t[1]),n[2]=Math.min(r[2],t[2]),n}function tt(n,r,t){return n[0]=Math.max(r[0],t[0]),n[1]=Math.max(r[1],t[1]),n[2]=Math.max(r[2],t[2]),n}function et(n,r){return n[0]=Math.round(r[0]),n[1]=Math.round(r[1]),n[2]=Math.round(r[2]),n}function it(n,r,t){return n[0]=r[0]*t,n[1]=r[1]*t,n[2]=r[2]*t,n}function ot(n,r,t,e){return n[0]=r[0]+t[0]*e,n[1]=r[1]+t[1]*e,n[2]=r[2]+t[2]*e,n}function at(n,r){var t=r[0]-n[0],e=r[1]-n[1],i=r[2]-n[2];return Math.sqrt(t*t+e*e+i*i)}function ut(n,r){var t=r[0]-n[0],e=r[1]-n[1],i=r[2]-n[2];return t*t+e*e+i*i}function ct(n){var r=n[0],t=n[1],e=n[2];return r*r+t*t+e*e}function st(n,r){return n[0]=-r[0],n[1]=-r[1],n[2]=-r[2],n}function ft(n,r){return n[0]=1/r[0],n[1]=1/r[1],n[2]=1/r[2],n}function lt(n,r){var t=r[0],e=r[1],i=r[2],o=t*t+e*e+i*i;return o>0&&(o=1/Math.sqrt(o),n[0]=r[0]*o,n[1]=r[1]*o,n[2]=r[2]*o),n}function dt(n,r){return n[0]*r[0]+n[1]*r[1]+n[2]*r[2]}function ht(n,r,t){var e=r[0],i=r[1],o=r[2],a=t[0],u=t[1],c=t[2];return n[0]=i*c-o*u,n[1]=o*a-e*c,n[2]=e*u-i*a,n}function vt(n,r,t,e){var i=r[0],o=r[1],a=r[2];return n[0]=i+e*(t[0]-i),n[1]=o+e*(t[1]-o),n[2]=a+e*(t[2]-a),n}function mt(n,r,t,e,i,o){var a=o*o,u=a*(2*o-3)+1,c=a*(o-2)+o,s=a*(o-1),f=a*(3-2*o);return n[0]=r[0]*u+t[0]*c+e[0]*s+i[0]*f,n[1]=r[1]*u+t[1]*c+e[1]*s+i[1]*f,n[2]=r[2]*u+t[2]*c+e[2]*s+i[2]*f,n}function _t(n,r,t,e,i,o){var a=1-o,u=a*a,c=o*o,s=u*a,f=3*o*u,l=3*c*a,d=c*o;return n[0]=r[0]*s+t[0]*f+e[0]*l+i[0]*d,n[1]=r[1]*s+t[1]*f+e[1]*l+i[1]*d,n[2]=r[2]*s+t[2]*f+e[2]*l+i[2]*d,n}function Mt(n,r){r=r||1;var t=2*m()*Math.PI,e=2*m()-1,i=Math.sqrt(1-e*e)*r;return n[0]=Math.cos(t)*i,n[1]=Math.sin(t)*i,n[2]=e*r,n}function gt(n,r,t){var e=r[0],i=r[1],o=r[2],a=t[3]*e+t[7]*i+t[11]*o+t[15];return a=a||1,n[0]=(t[0]*e+t[4]*i+t[8]*o+t[12])/a,n[1]=(t[1]*e+t[5]*i+t[9]*o+t[13])/a,n[2]=(t[2]*e+t[6]*i+t[10]*o+t[14])/a,n}function xt(n,r,t){var e=r[0],i=r[1],o=r[2];return n[0]=e*t[0]+i*t[3]+o*t[6],n[1]=e*t[1]+i*t[4]+o*t[7],n[2]=e*t[2]+i*t[5]+o*t[8],n}function pt(n,r,t){var e=t[0],i=t[1],o=t[2],a=t[3],u=r[0],c=r[1],s=r[2],f=i*s-o*c,l=o*u-e*s,d=e*c-i*u,h=i*d-o*l,v=o*f-e*d,m=e*l-i*f,_=2*a;return f*=_,l*=_,d*=_,h*=2,v*=2,m*=2,n[0]=u+f+h,n[1]=c+l+v,n[2]=s+d+m,n}function It(n,r,t,e){var i=[],o=[];return i[0]=r[0]-t[0],i[1]=r[1]-t[1],i[2]=r[2]-t[2],o[0]=i[0],o[1]=i[1]*Math.cos(e)-i[2]*Math.sin(e),o[2]=i[1]*Math.sin(e)+i[2]*Math.cos(e),n[0]=o[0]+t[0],n[1]=o[1]+t[1],n[2]=o[2]+t[2],n}function bt(n,r,t,e){var i=[],o=[];return i[0]=r[0]-t[0],i[1]=r[1]-t[1],i[2]=r[2]-t[2],o[0]=i[2]*Math.sin(e)+i[0]*Math.cos(e),o[1]=i[1],o[2]=i[2]*Math.cos(e)-i[0]*Math.sin(e),n[0]=o[0]+t[0],n[1]=o[1]+t[1],n[2]=o[2]+t[2],n}function Et(n,r,t,e){var i=[],o=[];return i[0]=r[0]-t[0],i[1]=r[1]-t[1],i[2]=r[2]-t[2],o[0]=i[0]*Math.cos(e)-i[1]*Math.sin(e),o[1]=i[0]*Math.sin(e)+i[1]*Math.cos(e),o[2]=i[2],n[0]=o[0]+t[0],n[1]=o[1]+t[1],n[2]=o[2]+t[2],n}function yt(n,r){var t=Yr(n[0],n[1],n[2]),e=Yr(r[0],r[1],r[2]);lt(t,t),lt(e,e);var i=dt(t,e);return i>1?0:i<-1?Math.PI:Math.acos(i)}function St(n){return"vec3("+n[0]+", "+n[1]+", "+n[2]+")"}function wt(n,r){return n[0]===r[0]&&n[1]===r[1]&&n[2]===r[2]}function Lt(n,r){var t=n[0],e=n[1],i=n[2],o=r[0],a=r[1],u=r[2];return Math.abs(t-o)<=h*Math.max(1,Math.abs(t),Math.abs(o))&&Math.abs(e-a)<=h*Math.max(1,Math.abs(e),Math.abs(a))&&Math.abs(i-u)<=h*Math.max(1,Math.abs(i),Math.abs(u))}var Tt=Qr,Rt=Kr,Pt=Jr,At=at,Ot=ut,Nt=kr,zt=ct,Ft=function(){var n=Zr();return function(r,t,e,i,o,a){var u=void 0,c=void 0;for(t||(t=3),e||(e=0),c=i?Math.min(i*t+e,r.length):r.length,u=e;u<c;u+=t)n[0]=r[u],n[1]=r[u+1],n[2]=r[u+2],o(n,n,a),r[u]=n[0],r[u+1]=n[1],r[u+2]=n[2];return r}}();function qt(){var n=new v(4);return v!=Float32Array&&(n[0]=0,n[1]=0,n[2]=0,n[3]=0),n}function Dt(n){var r=new v(4);return r[0]=n[0],r[1]=n[1],r[2]=n[2],r[3]=n[3],r}function Ct(n,r,t,e){var i=new v(4);return i[0]=n,i[1]=r,i[2]=t,i[3]=e,i}function Gt(n,r){return n[0]=r[0],n[1]=r[1],n[2]=r[2],n[3]=r[3],n}function Ht(n,r,t,e,i){return n[0]=r,n[1]=t,n[2]=e,n[3]=i,n}function Ut(n,r,t){return n[0]=r[0]+t[0],n[1]=r[1]+t[1],n[2]=r[2]+t[2],n[3]=r[3]+t[3],n}function Bt(n,r,t){return n[0]=r[0]-t[0],n[1]=r[1]-t[1],n[2]=r[2]-t[2],n[3]=r[3]-t[3],n}function Zt(n,r,t){return n[0]=r[0]*t[0],n[1]=r[1]*t[1],n[2]=r[2]*t[2],n[3]=r[3]*t[3],n}function Vt(n,r,t){return n[0]=r[0]/t[0],n[1]=r[1]/t[1],n[2]=r[2]/t[2],n[3]=r[3]/t[3],n}function kt(n,r){return n[0]=Math.ceil(r[0]),n[1]=Math.ceil(r[1]),n[2]=Math.ceil(r[2]),n[3]=Math.ceil(r[3]),n}function Yt(n,r){return n[0]=Math.floor(r[0]),n[1]=Math.floor(r[1]),n[2]=Math.floor(r[2]),n[3]=Math.floor(r[3]),n}function jt(n,r,t){return n[0]=Math.min(r[0],t[0]),n[1]=Math.min(r[1],t[1]),n[2]=Math.min(r[2],t[2]),n[3]=Math.min(r[3],t[3]),n}function Xt(n,r,t){return n[0]=Math.max(r[0],t[0]),n[1]=Math.max(r[1],t[1]),n[2]=Math.max(r[2],t[2]),n[3]=Math.max(r[3],t[3]),n}function Wt(n,r){return n[0]=Math.round(r[0]),n[1]=Math.round(r[1]),n[2]=Math.round(r[2]),n[3]=Math.round(r[3]),n}function Qt(n,r,t){return n[0]=r[0]*t,n[1]=r[1]*t,n[2]=r[2]*t,n[3]=r[3]*t,n}function Kt(n,r,t,e){return n[0]=r[0]+t[0]*e,n[1]=r[1]+t[1]*e,n[2]=r[2]+t[2]*e,n[3]=r[3]+t[3]*e,n}function Jt(n,r){var t=r[0]-n[0],e=r[1]-n[1],i=r[2]-n[2],o=r[3]-n[3];return Math.sqrt(t*t+e*e+i*i+o*o)}function $t(n,r){var t=r[0]-n[0],e=r[1]-n[1],i=r[2]-n[2],o=r[3]-n[3];return t*t+e*e+i*i+o*o}function ne(n){var r=n[0],t=n[1],e=n[2],i=n[3];return Math.sqrt(r*r+t*t+e*e+i*i)}function re(n){var r=n[0],t=n[1],e=n[2],i=n[3];return r*r+t*t+e*e+i*i}function te(n,r){return n[0]=-r[0],n[1]=-r[1],n[2]=-r[2],n[3]=-r[3],n}function ee(n,r){return n[0]=1/r[0],n[1]=1/r[1],n[2]=1/r[2],n[3]=1/r[3],n}function ie(n,r){var t=r[0],e=r[1],i=r[2],o=r[3],a=t*t+e*e+i*i+o*o;return a>0&&(a=1/Math.sqrt(a),n[0]=t*a,n[1]=e*a,n[2]=i*a,n[3]=o*a),n}function oe(n,r){return n[0]*r[0]+n[1]*r[1]+n[2]*r[2]+n[3]*r[3]}function ae(n,r,t,e){var i=r[0],o=r[1],a=r[2],u=r[3];return n[0]=i+e*(t[0]-i),n[1]=o+e*(t[1]-o),n[2]=a+e*(t[2]-a),n[3]=u+e*(t[3]-u),n}function ue(n,r){var t,e,i,o,a,u;r=r||1;do{a=(t=2*m()-1)*t+(e=2*m()-1)*e}while(a>=1);do{u=(i=2*m()-1)*i+(o=2*m()-1)*o}while(u>=1);var c=Math.sqrt((1-a)/u);return n[0]=r*t,n[1]=r*e,n[2]=r*i*c,n[3]=r*o*c,n}function ce(n,r,t){var e=r[0],i=r[1],o=r[2],a=r[3];return n[0]=t[0]*e+t[4]*i+t[8]*o+t[12]*a,n[1]=t[1]*e+t[5]*i+t[9]*o+t[13]*a,n[2]=t[2]*e+t[6]*i+t[10]*o+t[14]*a,n[3]=t[3]*e+t[7]*i+t[11]*o+t[15]*a,n}function se(n,r,t){var e=r[0],i=r[1],o=r[2],a=t[0],u=t[1],c=t[2],s=t[3],f=s*e+u*o-c*i,l=s*i+c*e-a*o,d=s*o+a*i-u*e,h=-a*e-u*i-c*o;return n[0]=f*s+h*-a+l*-c-d*-u,n[1]=l*s+h*-u+d*-a-f*-c,n[2]=d*s+h*-c+f*-u-l*-a,n[3]=r[3],n}function fe(n){return"vec4("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+")"}function le(n,r){return n[0]===r[0]&&n[1]===r[1]&&n[2]===r[2]&&n[3]===r[3]}function de(n,r){var t=n[0],e=n[1],i=n[2],o=n[3],a=r[0],u=r[1],c=r[2],s=r[3];return Math.abs(t-a)<=h*Math.max(1,Math.abs(t),Math.abs(a))&&Math.abs(e-u)<=h*Math.max(1,Math.abs(e),Math.abs(u))&&Math.abs(i-c)<=h*Math.max(1,Math.abs(i),Math.abs(c))&&Math.abs(o-s)<=h*Math.max(1,Math.abs(o),Math.abs(s))}var he=Bt,ve=Zt,me=Vt,_e=Jt,Me=$t,ge=ne,xe=re,pe=function(){var n=qt();return function(r,t,e,i,o,a){var u=void 0,c=void 0;for(t||(t=4),e||(e=0),c=i?Math.min(i*t+e,r.length):r.length,u=e;u<c;u+=t)n[0]=r[u],n[1]=r[u+1],n[2]=r[u+2],n[3]=r[u+3],o(n,n,a),r[u]=n[0],r[u+1]=n[1],r[u+2]=n[2],r[u+3]=n[3];return r}}();function Ie(){var n=new v(4);return v!=Float32Array&&(n[0]=0,n[1]=0,n[2]=0),n[3]=1,n}function be(n){return n[0]=0,n[1]=0,n[2]=0,n[3]=1,n}function Ee(n,r,t){t*=.5;var e=Math.sin(t);return n[0]=e*r[0],n[1]=e*r[1],n[2]=e*r[2],n[3]=Math.cos(t),n}function ye(n,r){var t=2*Math.acos(r[3]),e=Math.sin(t/2);return e>h?(n[0]=r[0]/e,n[1]=r[1]/e,n[2]=r[2]/e):(n[0]=1,n[1]=0,n[2]=0),t}function Se(n,r,t){var e=r[0],i=r[1],o=r[2],a=r[3],u=t[0],c=t[1],s=t[2],f=t[3];return n[0]=e*f+a*u+i*s-o*c,n[1]=i*f+a*c+o*u-e*s,n[2]=o*f+a*s+e*c-i*u,n[3]=a*f-e*u-i*c-o*s,n}function we(n,r,t){t*=.5;var e=r[0],i=r[1],o=r[2],a=r[3],u=Math.sin(t),c=Math.cos(t);return n[0]=e*c+a*u,n[1]=i*c+o*u,n[2]=o*c-i*u,n[3]=a*c-e*u,n}function Le(n,r,t){t*=.5;var e=r[0],i=r[1],o=r[2],a=r[3],u=Math.sin(t),c=Math.cos(t);return n[0]=e*c-o*u,n[1]=i*c+a*u,n[2]=o*c+e*u,n[3]=a*c-i*u,n}function Te(n,r,t){t*=.5;var e=r[0],i=r[1],o=r[2],a=r[3],u=Math.sin(t),c=Math.cos(t);return n[0]=e*c+i*u,n[1]=i*c-e*u,n[2]=o*c+a*u,n[3]=a*c-o*u,n}function Re(n,r){var t=r[0],e=r[1],i=r[2];return n[0]=t,n[1]=e,n[2]=i,n[3]=Math.sqrt(Math.abs(1-t*t-e*e-i*i)),n}function Pe(n,r,t,e){var i=r[0],o=r[1],a=r[2],u=r[3],c=t[0],s=t[1],f=t[2],l=t[3],d=void 0,v=void 0,m=void 0,_=void 0,M=void 0;return(v=i*c+o*s+a*f+u*l)<0&&(v=-v,c=-c,s=-s,f=-f,l=-l),1-v>h?(d=Math.acos(v),m=Math.sin(d),_=Math.sin((1-e)*d)/m,M=Math.sin(e*d)/m):(_=1-e,M=e),n[0]=_*i+M*c,n[1]=_*o+M*s,n[2]=_*a+M*f,n[3]=_*u+M*l,n}function Ae(n){var r=m(),t=m(),e=m(),i=Math.sqrt(1-r),o=Math.sqrt(r);return n[0]=i*Math.sin(2*Math.PI*t),n[1]=i*Math.cos(2*Math.PI*t),n[2]=o*Math.sin(2*Math.PI*e),n[3]=o*Math.cos(2*Math.PI*e),n}function Oe(n,r){var t=r[0],e=r[1],i=r[2],o=r[3],a=t*t+e*e+i*i+o*o,u=a?1/a:0;return n[0]=-t*u,n[1]=-e*u,n[2]=-i*u,n[3]=o*u,n}function Ne(n,r){return n[0]=-r[0],n[1]=-r[1],n[2]=-r[2],n[3]=r[3],n}function ze(n,r){var t=r[0]+r[4]+r[8],e=void 0;if(t>0)e=Math.sqrt(t+1),n[3]=.5*e,e=.5/e,n[0]=(r[5]-r[7])*e,n[1]=(r[6]-r[2])*e,n[2]=(r[1]-r[3])*e;else{var i=0;r[4]>r[0]&&(i=1),r[8]>r[3*i+i]&&(i=2);var o=(i+1)%3,a=(i+2)%3;e=Math.sqrt(r[3*i+i]-r[3*o+o]-r[3*a+a]+1),n[i]=.5*e,e=.5/e,n[3]=(r[3*o+a]-r[3*a+o])*e,n[o]=(r[3*o+i]+r[3*i+o])*e,n[a]=(r[3*a+i]+r[3*i+a])*e}return n}function Fe(n,r,t,e){var i=.5*Math.PI/180;r*=i,t*=i,e*=i;var o=Math.sin(r),a=Math.cos(r),u=Math.sin(t),c=Math.cos(t),s=Math.sin(e),f=Math.cos(e);return n[0]=o*c*f-a*u*s,n[1]=a*u*f+o*c*s,n[2]=a*c*s-o*u*f,n[3]=a*c*f+o*u*s,n}function qe(n){return"quat("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+")"}var De=Dt,Ce=Ct,Ge=Gt,He=Ht,Ue=Ut,Be=Se,Ze=Qt,Ve=oe,ke=ae,Ye=ne,je=Ye,Xe=re,We=Xe,Qe=ie,Ke=le,Je=de,$e=function(){var n=Zr(),r=Yr(1,0,0),t=Yr(0,1,0);return function(e,i,o){var a=dt(i,o);return a<-.999999?(ht(n,r,i),Nt(n)<1e-6&&ht(n,t,i),lt(n,n),Ee(e,n,Math.PI),e):a>.999999?(e[0]=0,e[1]=0,e[2]=0,e[3]=1,e):(ht(n,i,o),e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=1+a,Qe(e,e))}}(),ni=function(){var n=Ie(),r=Ie();return function(t,e,i,o,a,u){return Pe(n,e,a,u),Pe(r,i,o,u),Pe(t,n,r,2*u*(1-u)),t}}(),ri=function(){var n=gn();return function(r,t,e,i){return n[0]=e[0],n[3]=e[1],n[6]=e[2],n[1]=i[0],n[4]=i[1],n[7]=i[2],n[2]=-t[0],n[5]=-t[1],n[8]=-t[2],Qe(r,ze(r,n))}}();function ti(){var n=new v(8);return v!=Float32Array&&(n[0]=0,n[1]=0,n[2]=0,n[4]=0,n[5]=0,n[6]=0,n[7]=0),n[3]=1,n}function ei(n){var r=new v(8);return r[0]=n[0],r[1]=n[1],r[2]=n[2],r[3]=n[3],r[4]=n[4],r[5]=n[5],r[6]=n[6],r[7]=n[7],r}function ii(n,r,t,e,i,o,a,u){var c=new v(8);return c[0]=n,c[1]=r,c[2]=t,c[3]=e,c[4]=i,c[5]=o,c[6]=a,c[7]=u,c}function oi(n,r,t,e,i,o,a){var u=new v(8);u[0]=n,u[1]=r,u[2]=t,u[3]=e;var c=.5*i,s=.5*o,f=.5*a;return u[4]=c*e+s*t-f*r,u[5]=s*e+f*n-c*t,u[6]=f*e+c*r-s*n,u[7]=-c*n-s*r-f*t,u}function ai(n,r,t){var e=.5*t[0],i=.5*t[1],o=.5*t[2],a=r[0],u=r[1],c=r[2],s=r[3];return n[0]=a,n[1]=u,n[2]=c,n[3]=s,n[4]=e*s+i*c-o*u,n[5]=i*s+o*a-e*c,n[6]=o*s+e*u-i*a,n[7]=-e*a-i*u-o*c,n}function ui(n,r){return n[0]=0,n[1]=0,n[2]=0,n[3]=1,n[4]=.5*r[0],n[5]=.5*r[1],n[6]=.5*r[2],n[7]=0,n}function ci(n,r){return n[0]=r[0],n[1]=r[1],n[2]=r[2],n[3]=r[3],n[4]=0,n[5]=0,n[6]=0,n[7]=0,n}function si(n,r){var t=Ie();Er(t,r);var e=new v(3);return Ir(e,r),ai(n,t,e),n}function fi(n,r){return n[0]=r[0],n[1]=r[1],n[2]=r[2],n[3]=r[3],n[4]=r[4],n[5]=r[5],n[6]=r[6],n[7]=r[7],n}function li(n){return n[0]=0,n[1]=0,n[2]=0,n[3]=1,n[4]=0,n[5]=0,n[6]=0,n[7]=0,n}function di(n,r,t,e,i,o,a,u,c){return n[0]=r,n[1]=t,n[2]=e,n[3]=i,n[4]=o,n[5]=a,n[6]=u,n[7]=c,n}var hi=Ge;function vi(n,r){return n[0]=r[4],n[1]=r[5],n[2]=r[6],n[3]=r[7],n}var mi=Ge;function _i(n,r){return n[4]=r[0],n[5]=r[1],n[6]=r[2],n[7]=r[3],n}function Mi(n,r){var t=r[4],e=r[5],i=r[6],o=r[7],a=-r[0],u=-r[1],c=-r[2],s=r[3];return n[0]=2*(t*s+o*a+e*c-i*u),n[1]=2*(e*s+o*u+i*a-t*c),n[2]=2*(i*s+o*c+t*u-e*a),n}function gi(n,r,t){var e=r[0],i=r[1],o=r[2],a=r[3],u=.5*t[0],c=.5*t[1],s=.5*t[2],f=r[4],l=r[5],d=r[6],h=r[7];return n[0]=e,n[1]=i,n[2]=o,n[3]=a,n[4]=a*u+i*s-o*c+f,n[5]=a*c+o*u-e*s+l,n[6]=a*s+e*c-i*u+d,n[7]=-e*u-i*c-o*s+h,n}function xi(n,r,t){var e=-r[0],i=-r[1],o=-r[2],a=r[3],u=r[4],c=r[5],s=r[6],f=r[7],l=u*a+f*e+c*o-s*i,d=c*a+f*i+s*e-u*o,h=s*a+f*o+u*i-c*e,v=f*a-u*e-c*i-s*o;return we(n,r,t),e=n[0],i=n[1],o=n[2],a=n[3],n[4]=l*a+v*e+d*o-h*i,n[5]=d*a+v*i+h*e-l*o,n[6]=h*a+v*o+l*i-d*e,n[7]=v*a-l*e-d*i-h*o,n}function pi(n,r,t){var e=-r[0],i=-r[1],o=-r[2],a=r[3],u=r[4],c=r[5],s=r[6],f=r[7],l=u*a+f*e+c*o-s*i,d=c*a+f*i+s*e-u*o,h=s*a+f*o+u*i-c*e,v=f*a-u*e-c*i-s*o;return Le(n,r,t),e=n[0],i=n[1],o=n[2],a=n[3],n[4]=l*a+v*e+d*o-h*i,n[5]=d*a+v*i+h*e-l*o,n[6]=h*a+v*o+l*i-d*e,n[7]=v*a-l*e-d*i-h*o,n}function Ii(n,r,t){var e=-r[0],i=-r[1],o=-r[2],a=r[3],u=r[4],c=r[5],s=r[6],f=r[7],l=u*a+f*e+c*o-s*i,d=c*a+f*i+s*e-u*o,h=s*a+f*o+u*i-c*e,v=f*a-u*e-c*i-s*o;return Te(n,r,t),e=n[0],i=n[1],o=n[2],a=n[3],n[4]=l*a+v*e+d*o-h*i,n[5]=d*a+v*i+h*e-l*o,n[6]=h*a+v*o+l*i-d*e,n[7]=v*a-l*e-d*i-h*o,n}function bi(n,r,t){var e=t[0],i=t[1],o=t[2],a=t[3],u=r[0],c=r[1],s=r[2],f=r[3];return n[0]=u*a+f*e+c*o-s*i,n[1]=c*a+f*i+s*e-u*o,n[2]=s*a+f*o+u*i-c*e,n[3]=f*a-u*e-c*i-s*o,u=r[4],c=r[5],s=r[6],f=r[7],n[4]=u*a+f*e+c*o-s*i,n[5]=c*a+f*i+s*e-u*o,n[6]=s*a+f*o+u*i-c*e,n[7]=f*a-u*e-c*i-s*o,n}function Ei(n,r,t){var e=r[0],i=r[1],o=r[2],a=r[3],u=t[0],c=t[1],s=t[2],f=t[3];return n[0]=e*f+a*u+i*s-o*c,n[1]=i*f+a*c+o*u-e*s,n[2]=o*f+a*s+e*c-i*u,n[3]=a*f-e*u-i*c-o*s,u=t[4],c=t[5],s=t[6],f=t[7],n[4]=e*f+a*u+i*s-o*c,n[5]=i*f+a*c+o*u-e*s,n[6]=o*f+a*s+e*c-i*u,n[7]=a*f-e*u-i*c-o*s,n}function yi(n,r,t,e){if(Math.abs(e)<h)return fi(n,r);var i=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);e*=.5;var o=Math.sin(e),a=o*t[0]/i,u=o*t[1]/i,c=o*t[2]/i,s=Math.cos(e),f=r[0],l=r[1],d=r[2],v=r[3];n[0]=f*s+v*a+l*c-d*u,n[1]=l*s+v*u+d*a-f*c,n[2]=d*s+v*c+f*u-l*a,n[3]=v*s-f*a-l*u-d*c;var m=r[4],_=r[5],M=r[6],g=r[7];return n[4]=m*s+g*a+_*c-M*u,n[5]=_*s+g*u+M*a-m*c,n[6]=M*s+g*c+m*u-_*a,n[7]=g*s-m*a-_*u-M*c,n}function Si(n,r,t){return n[0]=r[0]+t[0],n[1]=r[1]+t[1],n[2]=r[2]+t[2],n[3]=r[3]+t[3],n[4]=r[4]+t[4],n[5]=r[5]+t[5],n[6]=r[6]+t[6],n[7]=r[7]+t[7],n}function wi(n,r,t){var e=r[0],i=r[1],o=r[2],a=r[3],u=t[4],c=t[5],s=t[6],f=t[7],l=r[4],d=r[5],h=r[6],v=r[7],m=t[0],_=t[1],M=t[2],g=t[3];return n[0]=e*g+a*m+i*M-o*_,n[1]=i*g+a*_+o*m-e*M,n[2]=o*g+a*M+e*_-i*m,n[3]=a*g-e*m-i*_-o*M,n[4]=e*f+a*u+i*s-o*c+l*g+v*m+d*M-h*_,n[5]=i*f+a*c+o*u-e*s+d*g+v*_+h*m-l*M,n[6]=o*f+a*s+e*c-i*u+h*g+v*M+l*_-d*m,n[7]=a*f-e*u-i*c-o*s+v*g-l*m-d*_-h*M,n}var Li=wi;function Ti(n,r,t){return n[0]=r[0]*t,n[1]=r[1]*t,n[2]=r[2]*t,n[3]=r[3]*t,n[4]=r[4]*t,n[5]=r[5]*t,n[6]=r[6]*t,n[7]=r[7]*t,n}var Ri=Ve;function Pi(n,r,t,e){var i=1-e;return Ri(r,t)<0&&(e=-e),n[0]=r[0]*i+t[0]*e,n[1]=r[1]*i+t[1]*e,n[2]=r[2]*i+t[2]*e,n[3]=r[3]*i+t[3]*e,n[4]=r[4]*i+t[4]*e,n[5]=r[5]*i+t[5]*e,n[6]=r[6]*i+t[6]*e,n[7]=r[7]*i+t[7]*e,n}function Ai(n,r){var t=Fi(r);return n[0]=-r[0]/t,n[1]=-r[1]/t,n[2]=-r[2]/t,n[3]=r[3]/t,n[4]=-r[4]/t,n[5]=-r[5]/t,n[6]=-r[6]/t,n[7]=r[7]/t,n}function Oi(n,r){return n[0]=-r[0],n[1]=-r[1],n[2]=-r[2],n[3]=r[3],n[4]=-r[4],n[5]=-r[5],n[6]=-r[6],n[7]=r[7],n}var Ni=Ye,zi=Ni,Fi=Xe,qi=Fi;function Di(n,r){var t=Fi(r);if(t>0){t=Math.sqrt(t);var e=r[0]/t,i=r[1]/t,o=r[2]/t,a=r[3]/t,u=r[4],c=r[5],s=r[6],f=r[7],l=e*u+i*c+o*s+a*f;n[0]=e,n[1]=i,n[2]=o,n[3]=a,n[4]=(u-e*l)/t,n[5]=(c-i*l)/t,n[6]=(s-o*l)/t,n[7]=(f-a*l)/t}return n}function Ci(n){return"quat2("+n[0]+", "+n[1]+", "+n[2]+", "+n[3]+", "+n[4]+", "+n[5]+", "+n[6]+", "+n[7]+")"}function Gi(n,r){return n[0]===r[0]&&n[1]===r[1]&&n[2]===r[2]&&n[3]===r[3]&&n[4]===r[4]&&n[5]===r[5]&&n[6]===r[6]&&n[7]===r[7]}function Hi(n,r){var t=n[0],e=n[1],i=n[2],o=n[3],a=n[4],u=n[5],c=n[6],s=n[7],f=r[0],l=r[1],d=r[2],v=r[3],m=r[4],_=r[5],M=r[6],g=r[7];return Math.abs(t-f)<=h*Math.max(1,Math.abs(t),Math.abs(f))&&Math.abs(e-l)<=h*Math.max(1,Math.abs(e),Math.abs(l))&&Math.abs(i-d)<=h*Math.max(1,Math.abs(i),Math.abs(d))&&Math.abs(o-v)<=h*Math.max(1,Math.abs(o),Math.abs(v))&&Math.abs(a-m)<=h*Math.max(1,Math.abs(a),Math.abs(m))&&Math.abs(u-_)<=h*Math.max(1,Math.abs(u),Math.abs(_))&&Math.abs(c-M)<=h*Math.max(1,Math.abs(c),Math.abs(M))&&Math.abs(s-g)<=h*Math.max(1,Math.abs(s),Math.abs(g))}function Ui(){var n=new v(2);return v!=Float32Array&&(n[0]=0,n[1]=0),n}function Bi(n){var r=new v(2);return r[0]=n[0],r[1]=n[1],r}function Zi(n,r){var t=new v(2);return t[0]=n,t[1]=r,t}function Vi(n,r){return n[0]=r[0],n[1]=r[1],n}function ki(n,r,t){return n[0]=r,n[1]=t,n}function Yi(n,r,t){return n[0]=r[0]+t[0],n[1]=r[1]+t[1],n}function ji(n,r,t){return n[0]=r[0]-t[0],n[1]=r[1]-t[1],n}function Xi(n,r,t){return n[0]=r[0]*t[0],n[1]=r[1]*t[1],n}function Wi(n,r,t){return n[0]=r[0]/t[0],n[1]=r[1]/t[1],n}function Qi(n,r){return n[0]=Math.ceil(r[0]),n[1]=Math.ceil(r[1]),n}function Ki(n,r){return n[0]=Math.floor(r[0]),n[1]=Math.floor(r[1]),n}function Ji(n,r,t){return n[0]=Math.min(r[0],t[0]),n[1]=Math.min(r[1],t[1]),n}function $i(n,r,t){return n[0]=Math.max(r[0],t[0]),n[1]=Math.max(r[1],t[1]),n}function no(n,r){return n[0]=Math.round(r[0]),n[1]=Math.round(r[1]),n}function ro(n,r,t){return n[0]=r[0]*t,n[1]=r[1]*t,n}function to(n,r,t,e){return n[0]=r[0]+t[0]*e,n[1]=r[1]+t[1]*e,n}function eo(n,r){var t=r[0]-n[0],e=r[1]-n[1];return Math.sqrt(t*t+e*e)}function io(n,r){var t=r[0]-n[0],e=r[1]-n[1];return t*t+e*e}function oo(n){var r=n[0],t=n[1];return Math.sqrt(r*r+t*t)}function ao(n){var r=n[0],t=n[1];return r*r+t*t}function uo(n,r){return n[0]=-r[0],n[1]=-r[1],n}function co(n,r){return n[0]=1/r[0],n[1]=1/r[1],n}function so(n,r){var t=r[0],e=r[1],i=t*t+e*e;return i>0&&(i=1/Math.sqrt(i),n[0]=r[0]*i,n[1]=r[1]*i),n}function fo(n,r){return n[0]*r[0]+n[1]*r[1]}function lo(n,r,t){var e=r[0]*t[1]-r[1]*t[0];return n[0]=n[1]=0,n[2]=e,n}function ho(n,r,t,e){var i=r[0],o=r[1];return n[0]=i+e*(t[0]-i),n[1]=o+e*(t[1]-o),n}function vo(n,r){r=r||1;var t=2*m()*Math.PI;return n[0]=Math.cos(t)*r,n[1]=Math.sin(t)*r,n}function mo(n,r,t){var e=r[0],i=r[1];return n[0]=t[0]*e+t[2]*i,n[1]=t[1]*e+t[3]*i,n}function _o(n,r,t){var e=r[0],i=r[1];return n[0]=t[0]*e+t[2]*i+t[4],n[1]=t[1]*e+t[3]*i+t[5],n}function Mo(n,r,t){var e=r[0],i=r[1];return n[0]=t[0]*e+t[3]*i+t[6],n[1]=t[1]*e+t[4]*i+t[7],n}function go(n,r,t){var e=r[0],i=r[1];return n[0]=t[0]*e+t[4]*i+t[12],n[1]=t[1]*e+t[5]*i+t[13],n}function xo(n,r,t,e){var i=r[0]-t[0],o=r[1]-t[1],a=Math.sin(e),u=Math.cos(e);return n[0]=i*u-o*a+t[0],n[1]=i*a+o*u+t[1],n}function po(n,r){var t=n[0],e=n[1],i=r[0],o=r[1],a=t*t+e*e;a>0&&(a=1/Math.sqrt(a));var u=i*i+o*o;u>0&&(u=1/Math.sqrt(u));var c=(t*i+e*o)*a*u;return c>1?0:c<-1?Math.PI:Math.acos(c)}function Io(n){return"vec2("+n[0]+", "+n[1]+")"}function bo(n,r){return n[0]===r[0]&&n[1]===r[1]}function Eo(n,r){var t=n[0],e=n[1],i=r[0],o=r[1];return Math.abs(t-i)<=h*Math.max(1,Math.abs(t),Math.abs(i))&&Math.abs(e-o)<=h*Math.max(1,Math.abs(e),Math.abs(o))}var yo=oo,So=ji,wo=Xi,Lo=Wi,To=eo,Ro=io,Po=ao,Ao=function(){var n=Ui();return function(r,t,e,i,o,a){var u=void 0,c=void 0;for(t||(t=2),e||(e=0),c=i?Math.min(i*t+e,r.length):r.length,u=e;u<c;u+=t)n[0]=r[u],n[1]=r[u+1],o(n,n,a),r[u]=n[0],r[u+1]=n[1];return r}}();t.d(r,"glMatrix",function(){return e}),t.d(r,"mat2",function(){return i}),t.d(r,"mat2d",function(){return o}),t.d(r,"mat3",function(){return a}),t.d(r,"mat4",function(){return u}),t.d(r,"quat",function(){return f}),t.d(r,"quat2",function(){return l}),t.d(r,"vec2",function(){return d}),t.d(r,"vec3",function(){return c}),t.d(r,"vec4",function(){return s})},function(n,r,t){"use strict"},,,,,,,,,,,,,,,,,,,,,,,,,,,function(n,r,t){t(2),n.exports=t(30)},function(n,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const e=t(0),i=t(31);function o(){const n=new e.Canvas("example-canvas"),r=n.context,t=new i.CornellRenderer;n.renderer=t,n.framePrecision=e.Wizard.Precision.float,n.frameScale=[.5,.5],n.clearColor.fromHex("d6d8db"),n.controller.multiFrameNumber=1024,n.element.addEventListener("click",()=>{n.controller.update()}),window.canvas=n,window.context=r,window.renderer=t}"complete"===window.document.readyState?o():window.onload=o},function(n,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const e=t(0),i=t(1),o=t(32),a=i.vec3.fromValues(0,.005102,-3.86123),u=i.vec3.fromValues(0,0,0),c=i.vec3.fromValues(0,1,0),s=i.vec3.fromValues(-.233813,.98,-.188126),f=i.vec3.fromValues(.233813,.8,.187411);r.CornellRenderer=class extends e.Renderer{constructor(){super(...arguments),this._extensions=!1}onUpdate(){return this._ndcOffsetKernel=new e.AntiAliasingKernel(this._multiFrameNumber),this._navigation.update(),this._altered.any||this._camera.altered}onPrepare(){const n=this._context.gl,r=this._context.gl2facade;this._intermediateFBO.initialized||(this._colorRenderTexture.initialize(this._frameSize[0],this._frameSize[1],this._context.isWebGL2?n.RGBA8:n.RGBA,n.RGBA,n.UNSIGNED_BYTE),this._depthRenderbuffer.initialize(this._frameSize[0],this._frameSize[1],n.DEPTH_COMPONENT16),this._intermediateFBO.initialize([[r.COLOR_ATTACHMENT0,this._colorRenderTexture],[n.DEPTH_ATTACHMENT,this._depthRenderbuffer]])),this._altered.frameSize&&(this._intermediateFBO.resize(this._frameSize[0],this._frameSize[1]),this._camera.viewport=[this._frameSize[0],this._frameSize[1]]),this._altered.canvasSize&&(this._camera.aspect=this._canvasSize[0]/this._canvasSize[1]),this._altered.clearColor&&this._intermediateFBO.clearColor(this._clearColor),this._accumulate.update(),this._camera.altered&&(this._program.bind(),n.uniformMatrix4fv(this._uTransform,n.GL_FALSE,this._camera.viewProjectionInverse),n.uniform3fv(this._uEye,this._camera.eye),n.uniform4f(this._uViewport,this._camera.viewport[0],this._camera.viewport[1],1/this._camera.viewport[0],1/this._camera.viewport[1])),this._altered.reset(),this._camera.altered=!1}onFrame(n){const r=this._context.gl;r.viewport(0,0,this._frameSize[0],this._frameSize[1]),this._camera.viewport=[this._frameSize[0],this._frameSize[1]],this._intermediateFBO.bind(),this._intermediateFBO.clear(r.COLOR_BUFFER_BIT,!1,!1);const t=this._ndcOffsetKernel.get(n);t[0]=2*t[0]/this._frameSize[0],t[1]=2*t[1]/this._frameSize[1],this._program.bind(),r.uniform1i(this._uFrame,n),r.uniform1i(this._uRand,Math.floor(1e6*Math.random())),r.uniform2fv(this._uNdcOffset,t),this._hsphereImage.bind(r.TEXTURE0),this._lightsImage.bind(r.TEXTURE1),this._context.isWebGL1&&(this._verticesImage.bind(r.TEXTURE2),this._indicesImage.bind(r.TEXTURE3),this._colorsImage.bind(r.TEXTURE4)),this._ndcTriangle.bind(),this._ndcTriangle.draw(),this._ndcTriangle.unbind(),this._intermediateFBO.unbind(),this._accumulate.frame(n)}onSwap(){this._blit.framebuffer=this._accumulate.framebuffer?this._accumulate.framebuffer:this._blit.framebuffer=this._intermediateFBO,this._blit.frame()}onInitialize(n,r,i){const l=this._context.gl,d=this._context.gl2facade;!1===this._extensions&&this._context.isWebGL1&&(e.auxiliaries.assert(this._context.supportsStandardDerivatives,"expected OES_standard_derivatives support"),this._context.standardDerivatives,this._extensions=!0),this._camera=new e.Camera,this._camera.eye=a,this._camera.center=u,this._camera.up=c,this._camera.near=.1,this._camera.far=4,this._navigation=new e.Navigation(r,i),this._navigation.camera=this._camera;const h=new e.Shader(this._context,l.VERTEX_SHADER,"cornell.vert");h.initialize(t(33));const v=new e.Shader(this._context,l.FRAGMENT_SHADER,"cornell.frag");v.initialize(t(this._context.isWebGL1?this._context.supportsTextureFloat?34:35:36)),this._program=new e.Program(this._context),this._program.initialize([h,v]),this._uTransform=this._program.uniform("u_transform"),this._uFrame=this._program.uniform("u_frame"),this._uRand=this._program.uniform("u_rand"),this._uEye=this._program.uniform("u_eye"),this._uViewport=this._program.uniform("u_viewport"),this._program.bind(),l.uniform1i(this._program.uniform("u_hsphere"),0),l.uniform1i(this._program.uniform("u_lights"),1),this._program.unbind(),this._ndcTriangle=new e.NdcFillingTriangle(this._context);const m=this._program.attribute("a_vertex",0);this._ndcTriangle.initialize(m),this._hsphereImage=new e.Texture2(this._context,"hsphereImage"),this._lightsImage=new e.Texture2(this._context,"lightsImage");const _=this.pointsOnSphere(1024),M=Math.floor(Math.sqrt(_.length)),g=new Float32Array(M*M*3);for(let n=0;n<M*M;++n)g[3*n+0]=_[n][0],g[3*n+1]=_[n][1],g[3*n+2]=_[n][2];const x=this.pointsInLight(s,f,1024),p=new Float32Array(3*x.length);let I=0;for(const n of x)p[I++]=n[0],p[I++]=n[1],p[I++]=n[2];if(this._context.isWebGL1&&!this._context.supportsTextureFloat)this._hsphereImage.initialize(96,32,l.RGB,l.RGB,l.UNSIGNED_BYTE),this._hsphereImage.data(this.encodeFloatArrayAndScale(g)),this._lightsImage.initialize(96,32,l.RGB,l.RGB,l.UNSIGNED_BYTE),this._lightsImage.data(this.encodeFloatArrayAndScale(p));else{const n=e.Wizard.queryInternalTextureFormat(this._context,l.RGB,e.Wizard.Precision.float);this._hsphereImage.initialize(M,M,n[0],l.RGB,n[1]),this._hsphereImage.data(g),this._lightsImage.initialize(32,32,n[0],l.RGB,n[1]),this._lightsImage.data(p)}return this._hsphereImage.wrap(l.CLAMP_TO_EDGE,l.CLAMP_TO_EDGE),this._hsphereImage.filter(l.NEAREST,l.NEAREST),this._lightsImage.wrap(l.CLAMP_TO_EDGE,l.CLAMP_TO_EDGE),this._lightsImage.filter(l.NEAREST,l.NEAREST),this._context.isWebGL1&&(this._program.bind(),l.uniform1i(this._program.uniform("u_vertices"),2),l.uniform1i(this._program.uniform("u_indices"),3),l.uniform1i(this._program.uniform("u_colors"),4),this._program.unbind(),this._verticesImage=new e.Texture2(this._context,"verticesImage"),this._indicesImage=new e.Texture2(this._context,"indicesImage"),this._colorsImage=new e.Texture2(this._context,"colorsImage"),this._indicesImage.initialize(o.indices.length/4,1,l.RGBA,l.RGBA,l.UNSIGNED_BYTE),this._indicesImage.data(o.indices),n.supportsTextureFloat?(this._verticesImage.initialize(o.vertices.length/3,1,l.RGB,l.RGB,l.FLOAT),this._verticesImage.data(o.vertices),this._colorsImage.initialize(o.colors.length/3,1,l.RGB,l.RGB,l.FLOAT),this._colorsImage.data(o.colors)):(this._verticesImage.initialize(o.vertices.length/3*3,1,l.RGB,l.RGB,l.UNSIGNED_BYTE),this._verticesImage.data(this.encodeFloatArrayAndScale(o.vertices)),this._colorsImage.initialize(o.colors.length/3*3,1,l.RGB,l.RGB,l.UNSIGNED_BYTE),this._colorsImage.data(this.encodeFloatArray(o.colors))),this._verticesImage.wrap(l.CLAMP_TO_EDGE,l.CLAMP_TO_EDGE),this._verticesImage.filter(l.NEAREST,l.NEAREST),this._indicesImage.wrap(l.CLAMP_TO_EDGE,l.CLAMP_TO_EDGE),this._indicesImage.filter(l.NEAREST,l.NEAREST),this._colorsImage.wrap(l.CLAMP_TO_EDGE,l.CLAMP_TO_EDGE),this._colorsImage.filter(l.NEAREST,l.NEAREST)),this._uNdcOffset=this._program.uniform("u_ndcOffset"),this._defaultFBO=new e.DefaultFramebuffer(this._context,"DefaultFBO"),this._defaultFBO.initialize(),this._colorRenderTexture=new e.Texture2(this._context,"ColorRenderTexture"),this._depthRenderbuffer=new e.Renderbuffer(this._context,"DepthRenderbuffer"),this._intermediateFBO=new e.Framebuffer(this._context,"IntermediateFBO"),this._accumulate=new e.AccumulatePass(this._context),this._accumulate.initialize(this._ndcTriangle),this._accumulate.precision=this._framePrecision,this._accumulate.texture=this._colorRenderTexture,this._blit=new e.BlitPass(this._context),this._blit.initialize(this._ndcTriangle),this._blit.readBuffer=d.COLOR_ATTACHMENT0,this._blit.drawBuffer=l.BACK,this._blit.target=this._defaultFBO,!0}onUninitialize(){this._program.uninitialize(),this._ndcTriangle.uninitialize(),this._hsphereImage.uninitialize(),this._lightsImage.uninitialize(),this._context.isWebGL1&&(this._verticesImage.uninitialize(),this._indicesImage.uninitialize(),this._colorsImage.uninitialize()),this._intermediateFBO.uninitialize(),this._defaultFBO.uninitialize(),this._colorRenderTexture.uninitialize(),this._depthRenderbuffer.uninitialize(),this._blit.uninitialize()}shuffle(n){const r=[],t=n.slice();for(;0!==t.length;){const n=Math.floor(t.length*Math.random());r.push(t[n]),t.splice(n,1)}return r}pointsInLight(n,r,t){const o=Array(),a=i.vec3.min(i.vec3.create(),n,r),u=i.vec3.max(i.vec3.create(),n,r),c=i.vec3.subtract(i.vec3.create(),u,a),s=Math.ceil(Math.sqrt(1*t)),f=i.vec3.scale(i.vec3.create(),c,.9999/(s-1));for(let n=a[0];n<=u[0];n+=f[0])for(let r=a[2];r<=u[2];r+=f[2])o.push(i.vec3.fromValues(n,e.auxiliaries.rand(a[1],u[1]),r));return this.shuffle(o)}pointsOnSphere(n){const r=new Array(n);for(let n=0;n<r.length;++n){const t=.9999,o=e.auxiliaries.rand(-t,t),a=e.auxiliaries.rand(-t,t),u=Math.sqrt(Math.max(1-o*o-a*a,1e-4));r[n]=i.vec3.normalize(i.vec3.create(),i.vec3.fromValues(o,u,a))}return r}fract(n){return n>0?n-Math.floor(n):n-Math.ceil(n)}encode_float24x1_to_uint8x3(n,r){return n[0]=Math.floor(255*r),n[1]=Math.floor(255*this.fract(255*r)),n[2]=Math.floor(255*this.fract(65536*r)),n}encodeFloatArray(n){const r=new Uint8Array(3*n.length);for(let t=0;t<n.length;t++){const e=this.encode_float24x1_to_uint8x3(i.vec3.create(),n[t]);r[3*t+0]=e[0],r[3*t+1]=e[1],r[3*t+2]=e[2]}return r}encodeFloatArrayAndScale(n){const r=new Uint8Array(3*n.length);for(let t=0;t<n.length;t++){const e=this.encode_float24x1_to_uint8x3(i.vec3.create(),.5*n[t]+.5);r[3*t+0]=e[0],r[3*t+1]=e[1],r[3*t+2]=e[2]}return r}}},function(n,r,t){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.vertices=new Float32Array([-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,.988489,-1,-1,.976978,-1,1,1,1,-1,1,1,1,.043165,-1,-.592275,.043165,-.398688,-.592275,-.136691,-1,-.027182,-.136691,-.398688,-.027182,-.705036,-1,-.195279,-.705036,-.398688,-.195279,-.532374,-1,-.767525,-.532374,-.398688,-.767525,.521583,-1,-.116595,.521583,.202624,-.116595,.697842,-1,.452074,.697842,.202624,.452074,.129496,-1,.630901,.129496,.202624,.630901,-.046763,-1,.058655,-.046763,.202624,.058655]),r.indices=new Uint8Array([6,7,3,1,6,3,2,1,4,0,1,1,4,1,5,1,5,1,3,1,5,3,7,1,1,0,2,3,1,2,3,3,4,5,7,2,4,7,6,2,15,13,11,1,15,11,9,1,8,9,11,1,8,11,10,1,14,15,9,1,14,9,8,1,12,13,15,1,12,15,14,1,10,11,13,1,10,13,12,1,23,21,19,1,23,19,17,1,16,17,19,1,16,19,18,1,22,23,17,1,22,17,16,1,20,21,23,1,20,23,22,1,18,19,21,1,18,21,20,1]),r.colors=new Float32Array([0,0,0,.7295,.7355,.729,.611,.0555,.062,.117,.4125,.115,.062,.0555,.611])},function(n,r){n.exports="\r\nprecision lowp float;\r\n\r\n\r\n#if __VERSION__ == 100\r\n#else \r\n    #define varying out\r\n#endif\r\n\r\n\r\n\r\n#if __VERSION__ == 100\r\n    attribute vec2 a_vertex;\r\n#else \r\n    layout(location = 0) in vec2 a_vertex;\r\n#endif\r\n\r\n\r\nuniform mat4 u_transform;\r\nuniform mediump vec3 u_eye;\r\nuniform vec2 u_ndcOffset;\r\n\r\nvarying mediump vec2 v_uv;\r\nvarying mediump vec4 v_ray;\r\n\r\nvoid main()\r\n{\r\n    v_uv = a_vertex * 0.5 + 0.5; \r\n    v_ray = u_transform * vec4(u_ndcOffset + a_vertex, 1.0, 1.0);\r\n\r\n    gl_Position = vec4(a_vertex, 1.0, 1.0);\r\n}\r\n"},function(n,r){n.exports="\r\n\r\n#if __VERSION__ == 100\r\n    #define texture(sampler, coord) texture2D(sampler, coord)\r\n#else \r\n    #define varying in\r\n#endif\r\n\r\n\r\n#if __VERSION__ == 100\r\n    #define fragColor gl_FragColor\r\n    #extension GL_OES_standard_derivatives : enable\r\n    precision mediump float;\r\n#else\r\n    precision mediump float;\r\n    layout(location = 0) out vec4 fragColor;\r\n#endif\r\n\r\n\r\nuniform sampler2D u_vertices; // 1D\r\nuniform sampler2D u_indices;  // 1D\r\nuniform sampler2D u_colors;   // 1D\r\nconst float NUM_VERTICES = 24.0;\r\nconst float NUM_TRIANGLES = 30.0;\r\nconst float NUM_COLORS = 5.0;\r\n\r\nuniform sampler2D u_hsphere;\r\nuniform sampler2D u_lights;\r\nconst vec2 SPHERE_SAMPLER_SIZE = vec2(32, 32); // textureSize(u_hsphere, 0);\r\nconst vec2 LIGHT_SAMPLER_SIZE = vec2(32, 32); // textureSize(u_lights, 0);\r\n\r\n\r\nvec3 vertexFetch(const in float index) {\r\n    return texture(u_vertices, vec2(index / (NUM_VERTICES-1.0), 0)).xyz;\r\n}\r\n\r\nvec4 indexFetch(const in float index) {\r\n    return texture(u_indices, vec2(index / (NUM_TRIANGLES-1.0), 0)) * 255.0;\r\n}\r\n\r\nvec3 colorFetch(const in float index) {\r\n    return texture(u_colors, vec2(index / (NUM_COLORS-1.0), 0)).xyz;\r\n}\r\n\r\nvec3 hsphereFetch(const in vec2 index) {\r\n    return texture(u_hsphere, index / (SPHERE_SAMPLER_SIZE-1.0)).xyz;\r\n}\r\n\r\nvec3 lightFetch(const in vec2 index) {\r\n    return texture(u_lights, index / (LIGHT_SAMPLER_SIZE-1.0)).xyz;\r\n}\r\n\r\n\r\n\r\n/*\r\nneeds version specific stuff:\r\nlayout(location = 0) out vec4 fragColor;\r\n\r\nconst float NUM_TRIANGLES\r\nconst vec2 SPHERE_SAMPLER_SIZE\r\nconst vec2 LIGHT_SAMPLER_SIZE\r\n\r\n// functions to access the static data (vertices, indices, colors, hsphere samples, light samples):\r\nvec3 vertexFetch(const in float index) {}\r\nvec4 indexFetch(const in float index) {}\r\nvec3 colorFetch(const in float index) {}\r\nvec3 hsphereFetch(const in vec2 index) {}\r\nvec3 lightFetch(const in vec2 index) {}\r\n*/\r\n\r\nuniform int u_frame;\r\nuniform int u_rand;\r\nuniform vec3 u_eye;\r\nuniform vec4 u_viewport;\r\n\r\nvarying vec2 v_uv;\r\nvarying vec4 v_ray;\r\n\r\nconst vec3 up = vec3(0.0, 1.0, 0.0);\r\nconst vec4 SPHERE = vec4(-0.5, +0.0, +0.5, 0.25); // center, radius\r\nconst vec3 LIGHT_COLOR = vec3(1.0, 10.76 / 16.86, 3.7 / 16.86);\r\n\r\nconst float EPSILON  = 1e-6;\r\nconst float INFINITY = 1e+4;\r\n\r\nconst int BOUNCES = 4;\r\nconst float EXPOSURE = 4.0;\r\nconst float GAMMA = 2.1;\r\n\r\n\r\n\r\n// intersection with triangle\r\nbool intersectionTriangle(\r\n\tconst in vec3  triangle[3]\r\n,\tconst in vec3  origin\r\n,\tconst in vec3  ray\r\n,\tconst in float t_min\r\n,   out float t)\r\n{\r\n    vec3 e0 = triangle[1] - triangle[0];\r\n\tvec3 e1 = triangle[2] - triangle[0];\r\n\r\n\tvec3  h = cross(ray, e1);\r\n\tfloat a = dot(e0, h);\r\n\r\n\t// if(a > -EPSILON && a < EPSILON) // backface culling off\r\n\tif(a < EPSILON) // backface culling on\r\n\t\treturn false;\r\n\r\n\tfloat f = 1.0 / a;\r\n\r\n\tvec3  s = origin - triangle[0];\r\n\tfloat u = f * dot(s, h);\r\n\r\n\tif(u < 0.0 || u > 1.0)\r\n\t\treturn false;\r\n\r\n\tvec3  q = cross(s, e0);\r\n\tfloat v = f * dot(ray, q);\r\n\r\n\tif(v < 0.0 || u + v > 1.0)\r\n\t\treturn false;\r\n\r\n\tt = f * dot(e1, q);\r\n\r\n\treturn EPSILON < t && t < t_min;\r\n}\r\n\r\nbool intersectionSphere(\r\n    const in vec4  sphere\r\n,   const in vec3  origin\r\n,   const in vec3  ray\r\n,   const in float t_min\r\n,   out float t)\r\n{\r\n    float radius = sphere.w;\r\n    vec3 center = sphere.xyz; \r\n    vec3 rayOriginToSphereCenter = origin - center;\r\n    float dist = length(rayOriginToSphereCenter);\r\n    float dot_term = dot(ray, rayOriginToSphereCenter);\r\n    float someVar = dot_term * dot_term - dist * dist + radius * radius;\r\n    if (someVar < EPSILON) { // no intersection\r\n        return false;\r\n    }\r\n    t = -dot_term - sqrt(someVar);\r\n    return EPSILON < t && t < t_min;\r\n}\r\n\r\n// intersection with scene geometry\r\nfloat intersection(\r\n    const in vec3 origin\r\n,   const in vec3 ray\r\n,   out vec3 normal\r\n,   out vec3 color\r\n,   out bool reflecting)\r\n{\r\n    float t_min = INFINITY;\r\n    float t = INFINITY;\r\n\r\n    float colorIndex;\r\n\r\n    // intersection with triangles\r\n\tfor(int i = 0; i < int(NUM_TRIANGLES); ++i)\r\n\t{\r\n        vec3 triangle[3];\r\n        vec4 triangleIndices = indexFetch(float(i));\r\n\t\ttriangle[0] = vertexFetch(triangleIndices[0]);\r\n\t\ttriangle[1] = vertexFetch(triangleIndices[1]);\r\n\t\ttriangle[2] = vertexFetch(triangleIndices[2]);\r\n\r\n\t\tif(intersectionTriangle(triangle, origin, ray, t_min, t))\r\n\t\t{\r\n\t\t\tnormal = normalize(cross(\r\n                triangle[1] - triangle[0],\r\n                triangle[2] - triangle[0]\r\n            ));\r\n\t\t\tcolorIndex = triangleIndices[3];\r\n\t\t\tt_min = t;\r\n            reflecting = colorIndex == 5.0;\r\n\t\t}\r\n\t}\r\n\r\n    // intersection with sphere\r\n    if(intersectionSphere(SPHERE, origin, ray, t_min, t))\r\n    {\r\n        vec3 intersectionPoint = origin + ray*t;\r\n        normal = normalize(intersectionPoint - SPHERE.xyz);\r\n        colorIndex = 4.0;\r\n        t_min = t;\r\n        reflecting = true;\r\n    }\r\n\r\n    color = colorFetch(colorIndex);\r\n\r\n    return t_min;\r\n}\r\n\r\nvec3 randomPointOnHemisphere(const in int fragID)\r\n{\r\n\tfloat i = mod(float(fragID), (SPHERE_SAMPLER_SIZE[0] * SPHERE_SAMPLER_SIZE[1]));\r\n\r\n    float x = mod(i, SPHERE_SAMPLER_SIZE[0]);\r\n    float y = i / SPHERE_SAMPLER_SIZE[0];\r\n\r\n\treturn hsphereFetch(vec2(x,y));\r\n}\r\n\r\nvec3 randomPointInLight(const in int fragID)\r\n{\r\n\tfloat i = mod(float(fragID), LIGHT_SAMPLER_SIZE[0] * LIGHT_SAMPLER_SIZE[1]);\r\n\r\n    float x = mod(i, LIGHT_SAMPLER_SIZE[0]);\r\n    float y = i / LIGHT_SAMPLER_SIZE[0];\r\n\r\n\treturn lightFetch(vec2(x,y));\r\n}\r\n\r\n// intersection with scene geometry\r\nfloat shadow(\r\n\tconst in int fragID\r\n,\tconst in vec3 origin\r\n,\tconst in vec3 normal\r\n,   out float sqDistToLight)\r\n{\r\n    vec3 pointInLight = randomPointInLight(fragID);\r\n    float distToLight = distance(pointInLight, origin);\r\n\r\n\tvec3 ray_direction = normalize(pointInLight - origin);\r\n\r\n\tfloat a = dot(ray_direction, normal);\r\n\tif(a < EPSILON)\r\n\t \treturn 0.0;\r\n\r\n    vec3 v1,v2; bool r; // unused\r\n    float dist = intersection(origin, ray_direction, v1, v2, r);\r\n    if(EPSILON < dist && dist <= distToLight)\r\n        return 0.0;\r\n        \r\n    sqDistToLight = distToLight * distToLight;\r\n\treturn a;\r\n}\r\n\r\nmat3 computeTbn(in vec3 normal)\r\n{\r\n    vec3 arbNormal = vec3(-1.241284e-02, -7.011432e-01, +2.043006e-01);\r\n    arbNormal = mix(arbNormal, vec3(+2.019038e-01, +9.717299e-01, +1.223763e-01), \r\n        step(0.0, abs(dot(arbNormal, normal))));\r\n\r\n    vec3 e0 = cross(arbNormal, normal);\r\n\tvec3 e1 = cross(e0, normal);\r\n\r\n    return mat3(e0, normal, e1);\r\n}\r\n\r\n// http://gpupathtracer.blogspot.de/\r\n// http://www.iquilezles.org/www/articles/simplepathtracing/simplepathtracing.htm\r\n// http://undernones.blogspot.de/2010/12/gpu-ray-tracing-with-glsl.html\r\n// http://www.iquilezles.org/www/articles/simplegpurt/simplegpurt.htm\r\n// http://www.lighthouse3d.com/tutorials/maths/ray-triangle-intersection/\r\n\r\nvoid main()\r\n{\r\n    vec3 ray_origin = u_eye;\r\n    vec3 ray_direction = normalize((v_ray.xyz / v_ray.w) - ray_origin);\r\n\r\n    // fragment index for random variation\r\n\tvec2 xy = v_uv * vec2(u_viewport[0], u_viewport[1]);\r\n\tint fragID = int(xy.y * u_viewport[0] + xy.x + float(u_frame) + float(u_rand));\r\n\r\n\t// path color accumulation\r\n\tvec3 maskColor = vec3(1.0);\r\n\tvec3 pathColor = vec3(0.0);\r\n\r\n    // fragment is transparent before any intersection\r\n    float alpha = 0.0;\r\n\r\n\tfor(int bounce = 0; bounce < BOUNCES; ++bounce)\r\n\t{\r\n        // check intersection with scene geometry\r\n        vec3 normal;\r\n        vec3 color;\r\n        bool reflecting;\r\n        float dist = intersection(ray_origin, ray_direction, normal, color, reflecting); \r\n\r\n        if(dist == INFINITY)\r\n            break; // TODO: break on no intersection, with correct path color weight?\r\n\r\n        // update ray for next bounce\r\n        ray_origin = ray_origin + ray_direction * dist;\r\n        if(reflecting){\r\n            ray_direction = reflect(ray_direction, normal);\r\n            if(bounce == 0) {\r\n                alpha = 1.0;\r\n            }\r\n            continue;\r\n        }\r\n        ray_direction = computeTbn(normal) * randomPointOnHemisphere(fragID + bounce);\r\n\r\n        // compute lighting and color\r\n        alpha = 1.0;\r\n        float squaredDistToLight = 1.0;\r\n  \t\tfloat lighting = shadow(fragID + bounce, ray_origin, normal, squaredDistToLight);\r\n  \t    maskColor *= color;\r\n  \t\tpathColor += maskColor * LIGHT_COLOR * lighting / squaredDistToLight;\r\n    }\r\n\r\n    fragColor = vec4(pow(EXPOSURE * pathColor, vec3(1.0 / GAMMA)), alpha);\r\n}\r\n\r\n"},function(n,r){n.exports="\r\n\r\n#if __VERSION__ == 100\r\n    #define texture(sampler, coord) texture2D(sampler, coord)\r\n#else \r\n    #define varying in\r\n#endif\r\n\r\n\r\n#if __VERSION__ == 100\r\n    #define fragColor gl_FragColor\r\n    #extension GL_OES_standard_derivatives : enable\r\n    precision mediump float;\r\n#else\r\n    precision mediump float;\r\n    layout(location = 0) out vec4 fragColor;\r\n#endif\r\n\r\n\r\nuniform sampler2D u_vertices; // 1D\r\nuniform sampler2D u_indices;  // 1D\r\nuniform sampler2D u_colors;   // 1D\r\nconst float NUM_VERTICES = 24.0;\r\nconst float NUM_TRIANGLES = 30.0;\r\nconst float NUM_COLORS = 5.0;\r\n\r\nuniform sampler2D u_hsphere;\r\nuniform sampler2D u_lights;\r\nconst vec2 SPHERE_SAMPLER_SIZE = vec2(32, 32); // textureSize(u_hsphere, 0);\r\nconst vec2 LIGHT_SAMPLER_SIZE = vec2(32, 32); // textureSize(u_lights, 0);\r\n\r\n\r\nconst vec3 premultUint8x3 = vec3(255.0 / 256.0, 255.0 / 65536.0, 255.0 / 16777216.0);\r\nfloat uint8x3_to_float24x1(const in vec3 v) {\r\n    return dot(v, premultUint8x3); // a1 * b1 + a2 * b2 + a3 * b3  ;)\r\n}\r\n\r\nvec3 vertexFetch(const in float index) {\r\n    // *3 because every vertex has 3 floats\r\n    float realIndex = index * 3.0;\r\n    // one lookup for each float; a float is encoded in 3 bytes (xyz)\r\n    vec2 floatIndex1 = vec2((realIndex      ) / (NUM_VERTICES* 3.0 - 1.0), 0);\r\n    vec2 floatIndex2 = vec2((realIndex + 1.0) / (NUM_VERTICES* 3.0 - 1.0), 0);\r\n    vec2 floatIndex3 = vec2((realIndex + 2.0) / (NUM_VERTICES* 3.0 - 1.0), 0);\r\n    // read and scale from [0..1] to [-1..+1]\r\n    float x = uint8x3_to_float24x1(texture(u_vertices, floatIndex1).xyz) * 2.0 - 1.0;\r\n    float y = uint8x3_to_float24x1(texture(u_vertices, floatIndex2).xyz) * 2.0 - 1.0;\r\n    float z = uint8x3_to_float24x1(texture(u_vertices, floatIndex3).xyz) * 2.0 - 1.0;\r\n\r\n    return vec3(x,y,z);\r\n}\r\n\r\nvec4 indexFetch(const in float index) {\r\n    // * 255 because openGL scales to [0..1]\r\n    return texture(u_indices, vec2(index / (NUM_TRIANGLES-1.0), 0)) * 255.0;\r\n}\r\n\r\nvec3 colorFetch(const in float index) {\r\n    // *3 because every color has 3 floats\r\n    float realIndex = index * 3.0;\r\n    // one lookup for each float; a float is encoded in 3 bytes (xyz)\r\n    vec2 floatIndex1 = vec2((realIndex      ) / (NUM_COLORS* 3.0 - 1.0), 0);\r\n    vec2 floatIndex2 = vec2((realIndex + 1.0) / (NUM_COLORS* 3.0 - 1.0), 0);\r\n    vec2 floatIndex3 = vec2((realIndex + 2.0) / (NUM_COLORS* 3.0 - 1.0), 0);\r\n\r\n    float x = uint8x3_to_float24x1(texture(u_colors, floatIndex1).xyz);\r\n    float y = uint8x3_to_float24x1(texture(u_colors, floatIndex2).xyz);\r\n    float z = uint8x3_to_float24x1(texture(u_colors, floatIndex3).xyz);\r\n\r\n    return vec3(x,y,z);\r\n}\r\n\r\nvec3 hsphereFetch(const in vec2 index) {\r\n    // *3 because every vector has 3 floats\r\n    vec2 realIndex = vec2(index.x * 3.0, index.y);\r\n    // one lookup for each float; a float is encoded in 3 bytes (xyz)\r\n    vec2 floatIndex1 = vec2((realIndex.x      ), realIndex.y) / (SPHERE_SAMPLER_SIZE * 3.0 - 1.0);\r\n    vec2 floatIndex2 = vec2((realIndex.x + 1.0), realIndex.y) / (SPHERE_SAMPLER_SIZE * 3.0 - 1.0);\r\n    vec2 floatIndex3 = vec2((realIndex.x + 2.0), realIndex.y) / (SPHERE_SAMPLER_SIZE * 3.0 - 1.0);\r\n\r\n    float x = uint8x3_to_float24x1(texture(u_hsphere, floatIndex1).xyz) * 2.0 - 1.0;\r\n    float y = uint8x3_to_float24x1(texture(u_hsphere, floatIndex2).xyz) * 2.0 - 1.0;\r\n    float z = uint8x3_to_float24x1(texture(u_hsphere, floatIndex3).xyz) * 2.0 - 1.0;\r\n\r\n    return vec3(x,y,z);\r\n}\r\n\r\nvec3 lightFetch(const in vec2 index) {\r\n    // *3 because every vector has 3 floats\r\n    vec2 realIndex = vec2(index.x * 3.0, index.y);\r\n    // one lookup for each float; a float is encoded in 3 bytes (xyz)\r\n    vec2 floatIndex1 = vec2((realIndex.x      ), realIndex.y) / (LIGHT_SAMPLER_SIZE * 3.0 - 1.0);\r\n    vec2 floatIndex2 = vec2((realIndex.x + 1.0), realIndex.y) / (LIGHT_SAMPLER_SIZE * 3.0 - 1.0);\r\n    vec2 floatIndex3 = vec2((realIndex.x + 2.0), realIndex.y) / (LIGHT_SAMPLER_SIZE * 3.0 - 1.0);\r\n    // read and scale from [0..1] to [-1..+1]\r\n    float x = uint8x3_to_float24x1(texture(u_lights, floatIndex1).xyz) * 2.0 - 1.0;\r\n    float y = uint8x3_to_float24x1(texture(u_lights, floatIndex2).xyz) * 2.0 - 1.0;\r\n    float z = uint8x3_to_float24x1(texture(u_lights, floatIndex3).xyz) * 2.0 - 1.0;\r\n\r\n    return vec3(x,y,z);\r\n}\r\n\r\n\r\n\r\n/*\r\nneeds version specific stuff:\r\nlayout(location = 0) out vec4 fragColor;\r\n\r\nconst float NUM_TRIANGLES\r\nconst vec2 SPHERE_SAMPLER_SIZE\r\nconst vec2 LIGHT_SAMPLER_SIZE\r\n\r\n// functions to access the static data (vertices, indices, colors, hsphere samples, light samples):\r\nvec3 vertexFetch(const in float index) {}\r\nvec4 indexFetch(const in float index) {}\r\nvec3 colorFetch(const in float index) {}\r\nvec3 hsphereFetch(const in vec2 index) {}\r\nvec3 lightFetch(const in vec2 index) {}\r\n*/\r\n\r\nuniform int u_frame;\r\nuniform int u_rand;\r\nuniform vec3 u_eye;\r\nuniform vec4 u_viewport;\r\n\r\nvarying vec2 v_uv;\r\nvarying vec4 v_ray;\r\n\r\nconst vec3 up = vec3(0.0, 1.0, 0.0);\r\nconst vec4 SPHERE = vec4(-0.5, +0.0, +0.5, 0.25); // center, radius\r\nconst vec3 LIGHT_COLOR = vec3(1.0, 10.76 / 16.86, 3.7 / 16.86);\r\n\r\nconst float EPSILON  = 1e-6;\r\nconst float INFINITY = 1e+4;\r\n\r\nconst int BOUNCES = 4;\r\nconst float EXPOSURE = 4.0;\r\nconst float GAMMA = 2.1;\r\n\r\n\r\n\r\n// intersection with triangle\r\nbool intersectionTriangle(\r\n\tconst in vec3  triangle[3]\r\n,\tconst in vec3  origin\r\n,\tconst in vec3  ray\r\n,\tconst in float t_min\r\n,   out float t)\r\n{\r\n    vec3 e0 = triangle[1] - triangle[0];\r\n\tvec3 e1 = triangle[2] - triangle[0];\r\n\r\n\tvec3  h = cross(ray, e1);\r\n\tfloat a = dot(e0, h);\r\n\r\n\t// if(a > -EPSILON && a < EPSILON) // backface culling off\r\n\tif(a < EPSILON) // backface culling on\r\n\t\treturn false;\r\n\r\n\tfloat f = 1.0 / a;\r\n\r\n\tvec3  s = origin - triangle[0];\r\n\tfloat u = f * dot(s, h);\r\n\r\n\tif(u < 0.0 || u > 1.0)\r\n\t\treturn false;\r\n\r\n\tvec3  q = cross(s, e0);\r\n\tfloat v = f * dot(ray, q);\r\n\r\n\tif(v < 0.0 || u + v > 1.0)\r\n\t\treturn false;\r\n\r\n\tt = f * dot(e1, q);\r\n\r\n\treturn EPSILON < t && t < t_min;\r\n}\r\n\r\nbool intersectionSphere(\r\n    const in vec4  sphere\r\n,   const in vec3  origin\r\n,   const in vec3  ray\r\n,   const in float t_min\r\n,   out float t)\r\n{\r\n    float radius = sphere.w;\r\n    vec3 center = sphere.xyz; \r\n    vec3 rayOriginToSphereCenter = origin - center;\r\n    float dist = length(rayOriginToSphereCenter);\r\n    float dot_term = dot(ray, rayOriginToSphereCenter);\r\n    float someVar = dot_term * dot_term - dist * dist + radius * radius;\r\n    if (someVar < EPSILON) { // no intersection\r\n        return false;\r\n    }\r\n    t = -dot_term - sqrt(someVar);\r\n    return EPSILON < t && t < t_min;\r\n}\r\n\r\n// intersection with scene geometry\r\nfloat intersection(\r\n    const in vec3 origin\r\n,   const in vec3 ray\r\n,   out vec3 normal\r\n,   out vec3 color\r\n,   out bool reflecting)\r\n{\r\n    float t_min = INFINITY;\r\n    float t = INFINITY;\r\n\r\n    float colorIndex;\r\n\r\n    // intersection with triangles\r\n\tfor(int i = 0; i < int(NUM_TRIANGLES); ++i)\r\n\t{\r\n        vec3 triangle[3];\r\n        vec4 triangleIndices = indexFetch(float(i));\r\n\t\ttriangle[0] = vertexFetch(triangleIndices[0]);\r\n\t\ttriangle[1] = vertexFetch(triangleIndices[1]);\r\n\t\ttriangle[2] = vertexFetch(triangleIndices[2]);\r\n\r\n\t\tif(intersectionTriangle(triangle, origin, ray, t_min, t))\r\n\t\t{\r\n\t\t\tnormal = normalize(cross(\r\n                triangle[1] - triangle[0],\r\n                triangle[2] - triangle[0]\r\n            ));\r\n\t\t\tcolorIndex = triangleIndices[3];\r\n\t\t\tt_min = t;\r\n            reflecting = colorIndex == 5.0;\r\n\t\t}\r\n\t}\r\n\r\n    // intersection with sphere\r\n    if(intersectionSphere(SPHERE, origin, ray, t_min, t))\r\n    {\r\n        vec3 intersectionPoint = origin + ray*t;\r\n        normal = normalize(intersectionPoint - SPHERE.xyz);\r\n        colorIndex = 4.0;\r\n        t_min = t;\r\n        reflecting = true;\r\n    }\r\n\r\n    color = colorFetch(colorIndex);\r\n\r\n    return t_min;\r\n}\r\n\r\nvec3 randomPointOnHemisphere(const in int fragID)\r\n{\r\n\tfloat i = mod(float(fragID), (SPHERE_SAMPLER_SIZE[0] * SPHERE_SAMPLER_SIZE[1]));\r\n\r\n    float x = mod(i, SPHERE_SAMPLER_SIZE[0]);\r\n    float y = i / SPHERE_SAMPLER_SIZE[0];\r\n\r\n\treturn hsphereFetch(vec2(x,y));\r\n}\r\n\r\nvec3 randomPointInLight(const in int fragID)\r\n{\r\n\tfloat i = mod(float(fragID), LIGHT_SAMPLER_SIZE[0] * LIGHT_SAMPLER_SIZE[1]);\r\n\r\n    float x = mod(i, LIGHT_SAMPLER_SIZE[0]);\r\n    float y = i / LIGHT_SAMPLER_SIZE[0];\r\n\r\n\treturn lightFetch(vec2(x,y));\r\n}\r\n\r\n// intersection with scene geometry\r\nfloat shadow(\r\n\tconst in int fragID\r\n,\tconst in vec3 origin\r\n,\tconst in vec3 normal\r\n,   out float sqDistToLight)\r\n{\r\n    vec3 pointInLight = randomPointInLight(fragID);\r\n    float distToLight = distance(pointInLight, origin);\r\n\r\n\tvec3 ray_direction = normalize(pointInLight - origin);\r\n\r\n\tfloat a = dot(ray_direction, normal);\r\n\tif(a < EPSILON)\r\n\t \treturn 0.0;\r\n\r\n    vec3 v1,v2; bool r; // unused\r\n    float dist = intersection(origin, ray_direction, v1, v2, r);\r\n    if(EPSILON < dist && dist <= distToLight)\r\n        return 0.0;\r\n        \r\n    sqDistToLight = distToLight * distToLight;\r\n\treturn a;\r\n}\r\n\r\nmat3 computeTbn(in vec3 normal)\r\n{\r\n    vec3 arbNormal = vec3(-1.241284e-02, -7.011432e-01, +2.043006e-01);\r\n    arbNormal = mix(arbNormal, vec3(+2.019038e-01, +9.717299e-01, +1.223763e-01), \r\n        step(0.0, abs(dot(arbNormal, normal))));\r\n\r\n    vec3 e0 = cross(arbNormal, normal);\r\n\tvec3 e1 = cross(e0, normal);\r\n\r\n    return mat3(e0, normal, e1);\r\n}\r\n\r\n// http://gpupathtracer.blogspot.de/\r\n// http://www.iquilezles.org/www/articles/simplepathtracing/simplepathtracing.htm\r\n// http://undernones.blogspot.de/2010/12/gpu-ray-tracing-with-glsl.html\r\n// http://www.iquilezles.org/www/articles/simplegpurt/simplegpurt.htm\r\n// http://www.lighthouse3d.com/tutorials/maths/ray-triangle-intersection/\r\n\r\nvoid main()\r\n{\r\n    vec3 ray_origin = u_eye;\r\n    vec3 ray_direction = normalize((v_ray.xyz / v_ray.w) - ray_origin);\r\n\r\n    // fragment index for random variation\r\n\tvec2 xy = v_uv * vec2(u_viewport[0], u_viewport[1]);\r\n\tint fragID = int(xy.y * u_viewport[0] + xy.x + float(u_frame) + float(u_rand));\r\n\r\n\t// path color accumulation\r\n\tvec3 maskColor = vec3(1.0);\r\n\tvec3 pathColor = vec3(0.0);\r\n\r\n    // fragment is transparent before any intersection\r\n    float alpha = 0.0;\r\n\r\n\tfor(int bounce = 0; bounce < BOUNCES; ++bounce)\r\n\t{\r\n        // check intersection with scene geometry\r\n        vec3 normal;\r\n        vec3 color;\r\n        bool reflecting;\r\n        float dist = intersection(ray_origin, ray_direction, normal, color, reflecting); \r\n\r\n        if(dist == INFINITY)\r\n            break; // TODO: break on no intersection, with correct path color weight?\r\n\r\n        // update ray for next bounce\r\n        ray_origin = ray_origin + ray_direction * dist;\r\n        if(reflecting){\r\n            ray_direction = reflect(ray_direction, normal);\r\n            if(bounce == 0) {\r\n                alpha = 1.0;\r\n            }\r\n            continue;\r\n        }\r\n        ray_direction = computeTbn(normal) * randomPointOnHemisphere(fragID + bounce);\r\n\r\n        // compute lighting and color\r\n        alpha = 1.0;\r\n        float squaredDistToLight = 1.0;\r\n  \t\tfloat lighting = shadow(fragID + bounce, ray_origin, normal, squaredDistToLight);\r\n  \t    maskColor *= color;\r\n  \t\tpathColor += maskColor * LIGHT_COLOR * lighting / squaredDistToLight;\r\n    }\r\n\r\n    fragColor = vec4(pow(EXPOSURE * pathColor, vec3(1.0 / GAMMA)), alpha);\r\n}\r\n\r\n"},function(n,r){n.exports="\r\nprecision mediump float;\r\nprecision mediump usampler2D;\r\n\r\n\r\n#if __VERSION__ == 100\r\n    #define texture(sampler, coord) texture2D(sampler, coord)\r\n#else \r\n    #define varying in\r\n#endif\r\n\r\n\r\n#if __VERSION__ == 100\r\n    #define fragColor gl_FragColor\r\n    #extension GL_OES_standard_derivatives : enable\r\n#else\r\n    layout(location = 0) out vec4 fragColor;\r\n#endif\r\n\r\n\r\nconst int NUM_TRIANGLES = 30;\r\nconst int NUM_VERTICES = 24;\r\nconst int NUM_COLORS = 5;\r\n\r\nconst float vertices[NUM_VERTICES * 3] = float[NUM_VERTICES * 3]\r\n(   // room\r\n    -1.000000, -1.000000, -1.000000, -1.000000, -1.000000, +1.000000,\r\n    -1.000000, +1.000000, -1.000000, -1.000000, +1.000000, +1.000000,\r\n    +0.988489, -1.000000, -1.000000, +0.976978, -1.000000, +1.000000,\r\n    +1.000000, +1.000000, -1.000000, +1.000000, +1.000000, +1.000000,\r\n    // short block\r\n    +0.043165, -1.000000, -0.592275, +0.043165, -0.398688, -0.592275,\r\n    -0.136691, -1.000000, -0.027182, -0.136691, -0.398688, -0.027182,\r\n    -0.705036, -1.000000, -0.195279, -0.705036, -0.398688, -0.195279,\r\n    -0.532374, -1.000000, -0.767525, -0.532374, -0.398688, -0.767525,\r\n    // tall block\r\n    +0.521583, -1.000000, -0.116595, +0.521583, +0.202624, -0.116595,\r\n    +0.697842, -1.000000, +0.452074, +0.697842, +0.202624, +0.452074,\r\n    +0.129496, -1.000000, +0.630901, +0.129496, +0.202624, +0.630901,\r\n    -0.046763, -1.000000, +0.058655, -0.046763, +0.202624, +0.058655\r\n);\r\n\r\n// v0, v1, v2, color\r\nconst int indices[NUM_TRIANGLES * 4] = int[NUM_TRIANGLES * 4]\r\n(\r\n    // room ceiling\r\n    6, 7, 3, 1,\r\n    6, 3, 2, 1,\r\n    // room floor\r\n    4, 0, 1, 1,\r\n    4, 1, 5, 1,\r\n    // room front wall\r\n    // 6, 2, 0, 1,\r\n    // 6, 0, 4, 1,\r\n    // room back wall\r\n    5, 1, 3, 1,\r\n    5, 3, 7, 1,\r\n    // room right wall\r\n    1, 0, 2, 3,\r\n    1, 2, 3, 3,\r\n    // room left wall\r\n    4, 5, 7, 2,\r\n    4, 7, 6, 2,\r\n    // short block\r\n    15, 13, 11, 1,\r\n    15, 11,  9, 1,\r\n     8,  9, 11, 1,\r\n     8, 11, 10, 1,\r\n    14, 15,  9, 1,\r\n    14,  9,  8, 1,\r\n    12, 13, 15, 1,\r\n    12, 15, 14, 1,\r\n    10, 11, 13, 1,\r\n    10, 13, 12, 1,\r\n    // tall block\r\n    23, 21, 19, 1,\r\n    23, 19, 17, 1,\r\n    16, 17, 19, 1,\r\n    16, 19, 18, 1,\r\n    22, 23, 17, 1,\r\n    22, 17, 16, 1,\r\n    20, 21, 23, 1,\r\n    20, 23, 22, 1,\r\n    18, 19, 21, 1,\r\n    18, 21, 20, 1\r\n);\r\n\r\nconst float colors[NUM_COLORS * 3] = float[NUM_COLORS * 3]\r\n(\r\n    0.0000, 0.0000, 0.0000,  // 0 black\r\n    0.7295, 0.7355, 0.7290,  // 1 white\r\n    0.6110, 0.0555, 0.0620,  // 2 red\r\n    0.1170, 0.4125, 0.1150,  // 3 green\r\n    0.0620, 0.0555, 0.6110   // 4 blue\r\n);\r\n\r\n\r\nuniform sampler2D u_hsphere;\r\nuniform sampler2D u_lights;\r\nconst vec2 SPHERE_SAMPLER_SIZE = vec2(32, 32); // textureSize(u_hsphere, 0);\r\nconst vec2 LIGHT_SAMPLER_SIZE = vec2(32, 32); // textureSize(u_lights, 0);\r\n\r\n\r\nvec3 vertexFetch(const in float index) {\r\n    return vec3(\r\n        vertices[int(round(index)) * 3 + 0],\r\n        vertices[int(round(index)) * 3 + 1],\r\n        vertices[int(round(index)) * 3 + 2]\r\n    );\r\n}\r\n\r\nvec4 indexFetch(const in float index) {\r\n    return vec4(\r\n        indices[int(round(index)) * 4 + 0],\r\n        indices[int(round(index)) * 4 + 1],\r\n        indices[int(round(index)) * 4 + 2],\r\n        indices[int(round(index)) * 4 + 3]\r\n    );\r\n}\r\n\r\nvec3 colorFetch(const in float index) {\r\n    return vec3(\r\n        colors[int(round(index)) * 3 + 0],\r\n        colors[int(round(index)) * 3 + 1],\r\n        colors[int(round(index)) * 3 + 2]\r\n    );\r\n}\r\n\r\nvec3 hsphereFetch(const in vec2 index) {\r\n    return texture(u_hsphere, index / (SPHERE_SAMPLER_SIZE-1.0)).xyz;\r\n}\r\n\r\nvec3 lightFetch(const in vec2 index) {\r\n    return texture(u_lights, index / (LIGHT_SAMPLER_SIZE-1.0)).xyz;\r\n}\r\n\r\n\r\n\r\n/*\r\nneeds version specific stuff:\r\nlayout(location = 0) out vec4 fragColor;\r\n\r\nconst float NUM_TRIANGLES\r\nconst vec2 SPHERE_SAMPLER_SIZE\r\nconst vec2 LIGHT_SAMPLER_SIZE\r\n\r\n// functions to access the static data (vertices, indices, colors, hsphere samples, light samples):\r\nvec3 vertexFetch(const in float index) {}\r\nvec4 indexFetch(const in float index) {}\r\nvec3 colorFetch(const in float index) {}\r\nvec3 hsphereFetch(const in vec2 index) {}\r\nvec3 lightFetch(const in vec2 index) {}\r\n*/\r\n\r\nuniform int u_frame;\r\nuniform int u_rand;\r\nuniform vec3 u_eye;\r\nuniform vec4 u_viewport;\r\n\r\nvarying vec2 v_uv;\r\nvarying vec4 v_ray;\r\n\r\nconst vec3 up = vec3(0.0, 1.0, 0.0);\r\nconst vec4 SPHERE = vec4(-0.5, +0.0, +0.5, 0.25); // center, radius\r\nconst vec3 LIGHT_COLOR = vec3(1.0, 10.76 / 16.86, 3.7 / 16.86);\r\n\r\nconst float EPSILON  = 1e-6;\r\nconst float INFINITY = 1e+4;\r\n\r\nconst int BOUNCES = 4;\r\nconst float EXPOSURE = 4.0;\r\nconst float GAMMA = 2.1;\r\n\r\n\r\n\r\n// intersection with triangle\r\nbool intersectionTriangle(\r\n\tconst in vec3  triangle[3]\r\n,\tconst in vec3  origin\r\n,\tconst in vec3  ray\r\n,\tconst in float t_min\r\n,   out float t)\r\n{\r\n    vec3 e0 = triangle[1] - triangle[0];\r\n\tvec3 e1 = triangle[2] - triangle[0];\r\n\r\n\tvec3  h = cross(ray, e1);\r\n\tfloat a = dot(e0, h);\r\n\r\n\t// if(a > -EPSILON && a < EPSILON) // backface culling off\r\n\tif(a < EPSILON) // backface culling on\r\n\t\treturn false;\r\n\r\n\tfloat f = 1.0 / a;\r\n\r\n\tvec3  s = origin - triangle[0];\r\n\tfloat u = f * dot(s, h);\r\n\r\n\tif(u < 0.0 || u > 1.0)\r\n\t\treturn false;\r\n\r\n\tvec3  q = cross(s, e0);\r\n\tfloat v = f * dot(ray, q);\r\n\r\n\tif(v < 0.0 || u + v > 1.0)\r\n\t\treturn false;\r\n\r\n\tt = f * dot(e1, q);\r\n\r\n\treturn EPSILON < t && t < t_min;\r\n}\r\n\r\nbool intersectionSphere(\r\n    const in vec4  sphere\r\n,   const in vec3  origin\r\n,   const in vec3  ray\r\n,   const in float t_min\r\n,   out float t)\r\n{\r\n    float radius = sphere.w;\r\n    vec3 center = sphere.xyz; \r\n    vec3 rayOriginToSphereCenter = origin - center;\r\n    float dist = length(rayOriginToSphereCenter);\r\n    float dot_term = dot(ray, rayOriginToSphereCenter);\r\n    float someVar = dot_term * dot_term - dist * dist + radius * radius;\r\n    if (someVar < EPSILON) { // no intersection\r\n        return false;\r\n    }\r\n    t = -dot_term - sqrt(someVar);\r\n    return EPSILON < t && t < t_min;\r\n}\r\n\r\n// intersection with scene geometry\r\nfloat intersection(\r\n    const in vec3 origin\r\n,   const in vec3 ray\r\n,   out vec3 normal\r\n,   out vec3 color\r\n,   out bool reflecting)\r\n{\r\n    float t_min = INFINITY;\r\n    float t = INFINITY;\r\n\r\n    float colorIndex;\r\n\r\n    // intersection with triangles\r\n\tfor(int i = 0; i < int(NUM_TRIANGLES); ++i)\r\n\t{\r\n        vec3 triangle[3];\r\n        vec4 triangleIndices = indexFetch(float(i));\r\n\t\ttriangle[0] = vertexFetch(triangleIndices[0]);\r\n\t\ttriangle[1] = vertexFetch(triangleIndices[1]);\r\n\t\ttriangle[2] = vertexFetch(triangleIndices[2]);\r\n\r\n\t\tif(intersectionTriangle(triangle, origin, ray, t_min, t))\r\n\t\t{\r\n\t\t\tnormal = normalize(cross(\r\n                triangle[1] - triangle[0],\r\n                triangle[2] - triangle[0]\r\n            ));\r\n\t\t\tcolorIndex = triangleIndices[3];\r\n\t\t\tt_min = t;\r\n            reflecting = colorIndex == 5.0;\r\n\t\t}\r\n\t}\r\n\r\n    // intersection with sphere\r\n    if(intersectionSphere(SPHERE, origin, ray, t_min, t))\r\n    {\r\n        vec3 intersectionPoint = origin + ray*t;\r\n        normal = normalize(intersectionPoint - SPHERE.xyz);\r\n        colorIndex = 4.0;\r\n        t_min = t;\r\n        reflecting = true;\r\n    }\r\n\r\n    color = colorFetch(colorIndex);\r\n\r\n    return t_min;\r\n}\r\n\r\nvec3 randomPointOnHemisphere(const in int fragID)\r\n{\r\n\tfloat i = mod(float(fragID), (SPHERE_SAMPLER_SIZE[0] * SPHERE_SAMPLER_SIZE[1]));\r\n\r\n    float x = mod(i, SPHERE_SAMPLER_SIZE[0]);\r\n    float y = i / SPHERE_SAMPLER_SIZE[0];\r\n\r\n\treturn hsphereFetch(vec2(x,y));\r\n}\r\n\r\nvec3 randomPointInLight(const in int fragID)\r\n{\r\n\tfloat i = mod(float(fragID), LIGHT_SAMPLER_SIZE[0] * LIGHT_SAMPLER_SIZE[1]);\r\n\r\n    float x = mod(i, LIGHT_SAMPLER_SIZE[0]);\r\n    float y = i / LIGHT_SAMPLER_SIZE[0];\r\n\r\n\treturn lightFetch(vec2(x,y));\r\n}\r\n\r\n// intersection with scene geometry\r\nfloat shadow(\r\n\tconst in int fragID\r\n,\tconst in vec3 origin\r\n,\tconst in vec3 normal\r\n,   out float sqDistToLight)\r\n{\r\n    vec3 pointInLight = randomPointInLight(fragID);\r\n    float distToLight = distance(pointInLight, origin);\r\n\r\n\tvec3 ray_direction = normalize(pointInLight - origin);\r\n\r\n\tfloat a = dot(ray_direction, normal);\r\n\tif(a < EPSILON)\r\n\t \treturn 0.0;\r\n\r\n    vec3 v1,v2; bool r; // unused\r\n    float dist = intersection(origin, ray_direction, v1, v2, r);\r\n    if(EPSILON < dist && dist <= distToLight)\r\n        return 0.0;\r\n        \r\n    sqDistToLight = distToLight * distToLight;\r\n\treturn a;\r\n}\r\n\r\nmat3 computeTbn(in vec3 normal)\r\n{\r\n    vec3 arbNormal = vec3(-1.241284e-02, -7.011432e-01, +2.043006e-01);\r\n    arbNormal = mix(arbNormal, vec3(+2.019038e-01, +9.717299e-01, +1.223763e-01), \r\n        step(0.0, abs(dot(arbNormal, normal))));\r\n\r\n    vec3 e0 = cross(arbNormal, normal);\r\n\tvec3 e1 = cross(e0, normal);\r\n\r\n    return mat3(e0, normal, e1);\r\n}\r\n\r\n// http://gpupathtracer.blogspot.de/\r\n// http://www.iquilezles.org/www/articles/simplepathtracing/simplepathtracing.htm\r\n// http://undernones.blogspot.de/2010/12/gpu-ray-tracing-with-glsl.html\r\n// http://www.iquilezles.org/www/articles/simplegpurt/simplegpurt.htm\r\n// http://www.lighthouse3d.com/tutorials/maths/ray-triangle-intersection/\r\n\r\nvoid main()\r\n{\r\n    vec3 ray_origin = u_eye;\r\n    vec3 ray_direction = normalize((v_ray.xyz / v_ray.w) - ray_origin);\r\n\r\n    // fragment index for random variation\r\n\tvec2 xy = v_uv * vec2(u_viewport[0], u_viewport[1]);\r\n\tint fragID = int(xy.y * u_viewport[0] + xy.x + float(u_frame) + float(u_rand));\r\n\r\n\t// path color accumulation\r\n\tvec3 maskColor = vec3(1.0);\r\n\tvec3 pathColor = vec3(0.0);\r\n\r\n    // fragment is transparent before any intersection\r\n    float alpha = 0.0;\r\n\r\n\tfor(int bounce = 0; bounce < BOUNCES; ++bounce)\r\n\t{\r\n        // check intersection with scene geometry\r\n        vec3 normal;\r\n        vec3 color;\r\n        bool reflecting;\r\n        float dist = intersection(ray_origin, ray_direction, normal, color, reflecting); \r\n\r\n        if(dist == INFINITY)\r\n            break; // TODO: break on no intersection, with correct path color weight?\r\n\r\n        // update ray for next bounce\r\n        ray_origin = ray_origin + ray_direction * dist;\r\n        if(reflecting){\r\n            ray_direction = reflect(ray_direction, normal);\r\n            if(bounce == 0) {\r\n                alpha = 1.0;\r\n            }\r\n            continue;\r\n        }\r\n        ray_direction = computeTbn(normal) * randomPointOnHemisphere(fragID + bounce);\r\n\r\n        // compute lighting and color\r\n        alpha = 1.0;\r\n        float squaredDistToLight = 1.0;\r\n  \t\tfloat lighting = shadow(fragID + bounce, ray_origin, normal, squaredDistToLight);\r\n  \t    maskColor *= color;\r\n  \t\tpathColor += maskColor * LIGHT_COLOR * lighting / squaredDistToLight;\r\n    }\r\n\r\n    fragColor = vec4(pow(EXPOSURE * pathColor, vec3(1.0 / GAMMA)), alpha);\r\n}\r\n\r\n"}])});
//# sourceMappingURL=cornell-box.js.map