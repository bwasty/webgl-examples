{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external \"gloperate\"","webpack:///../node_modules/gl-matrix/lib/gl-matrix/common.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat2.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat2d.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/mat4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec3.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec4.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/quat.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/quat2.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix/vec2.js","webpack:///../node_modules/gl-matrix/lib/gl-matrix.js","webpack:///./gltf/mesh.ts","webpack:///./gltf/primitive.ts","webpack:///./gltf/scene.ts","webpack:///./gltf/node.ts","webpack:///./gltf/aabb3.ts","webpack:///./gltf/material.ts","webpack:///./gltf/pbrshader.ts","webpack:///../node_modules/gltf-loader-ts/lib/gltf-loader.js","webpack:///./webxr/example.ts","webpack:///./webxr/webxrrenderer.ts","webpack:///./gltf/asset.ts","webpack:///./gltf/shaders/pbr-vert.glsl","webpack:///./gltf/shaders/pbr-frag.glsl"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","equals","b","abs","max","out","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","sin","cos","mat2_scale","v","v0","v1","fromRotation","fromScaling","str","frob","sqrt","pow","LDU","L","D","U","add","subtract","exactEquals","mat2_equals","multiplyScalar","multiplyScalarAndAdd","scale","mul","sub","mat2d_create","mat2d_clone","mat2d_copy","mat2d_identity","mat2d_fromValues","tx","ty","mat2d_set","mat2d_invert","aa","ab","ac","ad","atx","aty","mat2d_determinant","mat2d_multiply","a4","a5","b4","b5","mat2d_rotate","mat2d_scale","translate","mat2d_fromRotation","mat2d_fromScaling","fromTranslation","mat2d_str","mat2d_frob","mat2d_add","mat2d_subtract","mat2d_multiplyScalar","mat2d_multiplyScalarAndAdd","mat2d_exactEquals","mat2d_equals","mat2d_mul","mat2d_sub","mat3_create","fromMat4","mat3_clone","mat3_copy","mat3_fromValues","m02","m12","m20","m21","m22","mat3_set","mat3_identity","mat3_transpose","a01","a02","a12","mat3_invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","mat3_adjoint","mat3_determinant","mat3_multiply","b00","b02","b10","b12","b20","b22","mat3_translate","x","y","mat3_rotate","mat3_scale","mat3_fromTranslation","mat3_fromRotation","mat3_fromScaling","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","mat3_str","mat3_frob","mat3_add","mat3_subtract","mat3_multiplyScalar","mat3_multiplyScalarAndAdd","mat3_exactEquals","mat3_equals","a6","a7","a8","b6","b7","b8","mat3_mul","mat3_sub","mat4_create","mat4_clone","mat4_copy","mat4_fromValues","m03","m13","m23","m30","m31","m32","m33","mat4_set","mat4_identity","mat4_transpose","mat4_invert","mat4_adjoint","mat4_determinant","mat4_multiply","mat4_translate","mat4_scale","mat4_rotate","axis","len","rotateX","rotateY","rotateZ","mat4_fromTranslation","mat4_fromScaling","mat4_fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","mat4_fromQuat","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","mat4_str","mat4_frob","mat4_add","mat4_subtract","mat4_multiplyScalar","mat4_multiplyScalarAndAdd","mat4_exactEquals","mat4_equals","a9","a14","a15","b9","b13","b14","b15","mat4_mul","mat4_sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","min","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","vec3_dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","forEach","vec","stride","offset","count","fn","arg","length","vec4_create","vec4_clone","vec4_fromValues","vec4_copy","vec4_set","vec4_add","vec4_subtract","vec4_multiply","vec4_divide","vec4_ceil","vec4_floor","vec4_min","vec4_max","vec4_round","vec4_scale","vec4_scaleAndAdd","vec4_distance","vec4_squaredDistance","vec4_length","vec4_squaredLength","vec4_negate","vec4_inverse","vec4_normalize","vec4_dot","vec4_lerp","vec4_random","v2","v3","v4","s1","s2","vec4_transformMat4","vec4_transformQuat","ix","iy","iz","iw","vec4_str","vec4_exactEquals","vec4_equals","vec4_sub","vec4_mul","vec4_div","vec4_dist","vec4_sqrDist","vec4_len","vec4_sqrLen","vec4_forEach","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","fTrace","fRoot","j","k","fromEuler","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","view","quat2_create","dq","quat2_clone","quat2_fromValues","w1","fromRotationTranslationValues","quat2_fromRotationTranslation","quat2_fromTranslation","quat2_fromRotation","quat2_fromMat4","outer","quat2_copy","quat2_identity","quat2_set","getReal","getDual","setReal","setDual","quat2_getTranslation","quat2_translate","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","quat2_rotateX","quat2_rotateY","quat2_rotateZ","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","quat2_add","quat2_multiply","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","quat2_mul","quat2_scale","quat2_dot","quat2_lerp","mt","quat2_invert","sqlen","quat2_squaredLength","quat2_conjugate","quat2_length","quat2_len","quat2_sqrLen","quat2_normalize","a_dot_b","quat2_str","quat2_exactEquals","quat2_equals","vec2_create","vec2_clone","vec2_fromValues","vec2_copy","vec2_set","vec2_add","vec2_subtract","vec2_multiply","vec2_divide","vec2_ceil","vec2_floor","vec2_min","vec2_max","vec2_round","vec2_scale","vec2_scaleAndAdd","vec2_distance","vec2_squaredDistance","vec2_length","vec2_squaredLength","vec2_negate","vec2_inverse","vec2_normalize","vec2_dot","vec2_cross","vec2_lerp","vec2_random","transformMat2","transformMat2d","vec2_transformMat3","vec2_transformMat4","vec2_rotate","p0","p1","sinC","cosC","vec2_angle","len1","len2","vec2_str","vec2_exactEquals","vec2_equals","vec2_len","vec2_sub","vec2_mul","vec2_div","vec2_dist","vec2_sqrDist","vec2_sqrLen","vec2_forEach","__webpack_exports__","common_namespaceObject","mat2_namespaceObject","mat2d_namespaceObject","mat3_namespaceObject","mat4_namespaceObject","quat_namespaceObject","quat2_namespaceObject","vec2_namespaceObject","vec3_namespaceObject","vec4_namespaceObject","aabb3_1","primitive_1","Mesh","[object Object]","this","bounds","Aabb3","meshIndex","asset","gMesh","gAsset","gltf","meshes","mesh","context","primitives","Promise","all","map","gPrim","identifier","Primitive","fromGltf","primitive","union","uninitialize","webgl_operate_1","assert","auxiliaries","gl_matrix_1","gltf_loader_ts_1","material_1","pbrshader_1","VertexAttribute","buffer","size","normalized","accessor","byteStride","GLTF_ELEMENTS_PER_TYPE","componentType","byteOffset","index","attribEnable","attribDisable","Initializable","super","attributes","vertexArray","VertexArray","gPrimitive","prim","gl","undefined","POSITION","bufferViews","Error","buffersByView","semantic","accessorIndex","accessors","numVertices","bufferViewIndex","bufferView","bufferViewData","accessorData","Buffer","keys","initialize","ARRAY_BUFFER","data","STATIC_DRAW","vec3","apply","shaderFlags","NORMAL","ShaderFlags","HAS_NORMALS","TANGENT","HAS_TANGENTS","TEXCOORD_0","HAS_UV","COLOR_0","HAS_COLORS","indices","indexAccessor","indexBufferData","indexBuffer","numIndices","indexByteOffset","indexType","UNSIGNED_INT","isWebGL1","supportsElementIndexUint","elementIndexUint","ELEMENT_ARRAY_BUFFER","WebGLBuffer","material","Material","getMaterial","location","shader","attribLocations","enable","disable","unbind","args","drawCall","drawElements","drawArrays","bindBuffers","unbindBuffers","valid","initialized","renderViews","uniform1i","uniforms","u_PbrFlags","vp","viewport","uniformMatrix4fv","u_ViewProjection","viewProjectionMatrix","uniform3fv","u_Camera","cameraPosition","node_1","Scene","nodes","batchesByMaterial","Map","gScene","scene","rootNodes","gNode","Node","rootTransform","mat4","node","updateTransform","updateBounds","rootNode","push","stack","pop","children","batches","materials","from","opaqueMaterials","filter","alphaMode","AlphaMode","OPAQUE","transparentMaterials","sortedMaterials","concat","u_ModelMatrix","FALSE","finalTransform","uniformMatrix3fv","u_NormalMatrix","normalMatrix","draw","mat3","matrix","rotation","quat","getMesh","parentTransform","transform","newMin","newMax","point","transformPoint","other","baseColorFactor","vec4","metallicFactor","roughnessFactor","emissiveFactor","alphaCutoff","doubleSided","emptyTexture","Texture2","RGBA","UNSIGNED_BYTE","materialIndex","gMaterial","toString","pbr","pbrMetallicRoughness","texPromises","baseColorTexture","metallicRoghnessTexture","normalTexture","occlusionTexture","emissiveTexture","loadTexture","baseColorTexCoord","texCoord","metallicRoughnessTexture","metallicRoughnessTexCoord","normalTexInfo","normalTexCoord","normalScale","occTexInfo","occlusionTexCoord","occlusionStrength","strength","emissiveTexCoord","values","texInfo","textures","texture","image","imageData","source","sampler","samplers","tex2","wrap","wrapS","REPEAT","wrapT","mag","magFilter","LINEAR","minFilter","LINEAR_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","generateMipmap","TEXTURE_2D","flags","HAS_BASECOLORMAP","HAS_NORMALMAP","HAS_EMISSIVEMAP","HAS_METALROUGHNESSMAP","HAS_OCCLUSIONMAP","CULL_FACE","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","uniform1f","u_AlphaBlend","MASK","u_AlphaCutoff","uniform4fv","u_BaseColorFactor","TEXTURE0","u_BaseColorTexCoord","TEXTURE1","u_NormalTexCoord","u_NormalScale","TEXTURE2","u_EmissiveTexCoord","u_EmissiveFactor","TEXTURE3","u_MetallicRoughnessTexCoord","uniform2f","u_MetallicRoughnessValues","TEXTURE4","u_OcclusionTexCoord","u_OcclusionStrength","attribName","toLowerCase","ATTRIB_LOCATIONS","TEXCOORD_1","JOINTS_0","WEIGHTS_0","PbrUniformLocations","program","u_LightDirection","u_LightColor","u_BaseColorSampler","u_NormalSampler","u_EmissiveSampler","u_MetallicRoughnessSampler","u_OcclusionSampler","uniform","endsWith","console","warn","uniform3f","PbrShader","supportsShaderTextureLOD","shaderTextureLOD","supportsStandardDerivatives","standardDerivatives","vert","Shader","VERTEX_SHADER","frag","FRAGMENT_SHADER","Program","isWebGL2","assign","attrib","attribute","e","default","LoadingManager","urlModifier","onStart","onProgress","onLoad","onError","isLoading","itemsLoaded","itemsTotal","__awaiter","u","next","throw","done","then","GLTF_COMPONENT_TYPE_ARRAYS","5120","Int8Array","5121","Uint8Array","5122","Int16Array","5123","Uint16Array","5125","Uint32Array","5126","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","GltfAsset","glbData","bufferData","byteLength","BYTES_PER_ELEMENT","sparse","h","preFetchAll","bufferCache","baseUri","manager","loader","FileLoader","responseType","buffers","uri","binaryChunk","load","BufferData","crossOrigin","imageCache","images","Blob","mimeType","URL","createObjectURL","resolveURL","Image","onerror","itemEnd","itemError","onload","revokeObjectURL","src","itemStart","test","ImageData","LoaderUtils","TextDecoder","decode","String","fromCharCode","decodeURIComponent","escape","split","join","runningRequests","path","XMLHttpRequest","open","response","status","url","statusText","onprogress","withCredentials","overrideMimeType","requestHeaders","setRequestHeader","send","BINARY_HEADER_MAGIC","GLTFBinaryData","DataView","decodeText","getUint32","json","GltfLoader","extractUrlBase","parse","match","replace","has","JSON","version","gloperate","asset_1","webxrrenderer_1","loadScene","renderer","time","Asset","getScene","timeEnd","gltfAsset","getQueryParam","param","re","RegExp","document","search","SAMPLE_ASSETS_BASE","SPACE_MODEL","initializeRenderer","canvas","WebXRRenderer","error","alert","detail","loadGltf","initFallback","Canvas","depth","WebXRPolyfill","WebXRVersionShim","messageEl","getElementById","message","msg","color","innerHTML","style","xrButton","xrc","requestDevice","XRController","supportsXR","immersive","getContext","sessionCreationOptions","outputContext","requestSession","supportsSession","disabled","onclick","session","endSession","addEventListener","readyState","XRRenderer","frameCount","_scene","setCameraFromBounds","invalidate","_context","callback","mouseEventProvider","pbrShader","_camera","Camera","_navigation","Navigation","camera","DEPTH_TEST","clearColor","_altered","frameSize","_frameSize","canvasSize","_canvasSize","update","altered","any","reset","frameNumber","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","viewProjection","frameData","mesh_1","scene_1","scenes"],"mappings":"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","file":"webxr.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"gloperate\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"gloperate\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"gloperate\")) : factory(root[\"gloperate\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 61);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nexport var EPSILON = 0.000001;\r\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\r\nexport var RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nexport function setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nexport function toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\r\n\r\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {mat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\r\nexport function fromValues(m00, m01, m10, m11) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m10;\r\n  out[3] = m11;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\r\nexport function set(out, m00, m01, m10, m11) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m10;\r\n  out[3] = m11;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache\r\n  // some values\r\n  if (out === a) {\r\n    var a1 = a[1];\r\n    out[1] = a[2];\r\n    out[2] = a1;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[2];\r\n    out[2] = a[1];\r\n    out[3] = a[3];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n\r\n  // Calculate the determinant\r\n  var det = a0 * a3 - a2 * a1;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = a3 * det;\r\n  out[1] = -a1 * det;\r\n  out[2] = -a2 * det;\r\n  out[3] = a0 * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function adjoint(out, a) {\r\n  // Caching this value is nessecary if out == a\r\n  var a0 = a[0];\r\n  out[0] = a[3];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a0;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  return a[0] * a[3] - a[2] * a[1];\r\n}\r\n\r\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = a0 * c + a2 * s;\r\n  out[1] = a1 * c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = -s;\r\n  out[3] = c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = v[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {mat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));\r\n}\r\n\r\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\r\n\r\nexport function LDU(L, D, U, a) {\r\n  L[2] = a[2] / a[0];\r\n  U[0] = a[0];\r\n  U[1] = a[1];\r\n  U[3] = a[3] - L[2] * U[1];\r\n  return [L, D, U];\r\n}\r\n\r\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n *\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty,\r\n *  0, 0, 1]\r\n * </pre>\r\n * The last row is ignored so the array is shorter and operations are faster.\r\n */\r\n\r\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(6);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[4] = 0;\r\n    out[5] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {mat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(6);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\r\nexport function fromValues(a, b, c, d, tx, ty) {\r\n  var out = new glMatrix.ARRAY_TYPE(6);\r\n  out[0] = a;\r\n  out[1] = b;\r\n  out[2] = c;\r\n  out[3] = d;\r\n  out[4] = tx;\r\n  out[5] = ty;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\r\nexport function set(out, a, b, c, d, tx, ty) {\r\n  out[0] = a;\r\n  out[1] = b;\r\n  out[2] = c;\r\n  out[3] = d;\r\n  out[4] = tx;\r\n  out[5] = ty;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\r\nexport function invert(out, a) {\r\n  var aa = a[0],\r\n      ab = a[1],\r\n      ac = a[2],\r\n      ad = a[3];\r\n  var atx = a[4],\r\n      aty = a[5];\r\n\r\n  var det = aa * ad - ab * ac;\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = ad * det;\r\n  out[1] = -ab * det;\r\n  out[2] = -ac * det;\r\n  out[3] = aa * det;\r\n  out[4] = (ac * aty - ad * atx) * det;\r\n  out[5] = (ab * atx - aa * aty) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {mat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  return a[0] * a[3] - a[1] * a[2];\r\n}\r\n\r\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  out[4] = a0 * b4 + a2 * b5 + a4;\r\n  out[5] = a1 * b4 + a3 * b5 + a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = a0 * c + a2 * s;\r\n  out[1] = a1 * c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  out[4] = a4;\r\n  out[5] = a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  out[4] = a4;\r\n  out[5] = a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\r\nexport function translate(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0;\r\n  out[1] = a1;\r\n  out[2] = a2;\r\n  out[3] = a3;\r\n  out[4] = a0 * v0 + a2 * v1 + a4;\r\n  out[5] = a1 * v0 + a3 * v1 + a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = -s;\r\n  out[3] = c;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = v[1];\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = v[0];\r\n  out[5] = v[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {mat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {mat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);\r\n}\r\n\r\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[4] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nexport function fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b01 = a22 * a11 - a12 * a21;\r\n  var b11 = -a22 * a10 + a12 * a20;\r\n  var b21 = a21 * a10 - a11 * a20;\r\n\r\n  // Calculate the determinant\r\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  out[0] = a11 * a22 - a12 * a21;\r\n  out[1] = a02 * a21 - a01 * a22;\r\n  out[2] = a01 * a12 - a02 * a11;\r\n  out[3] = a12 * a20 - a10 * a22;\r\n  out[4] = a00 * a22 - a02 * a20;\r\n  out[5] = a02 * a10 - a00 * a12;\r\n  out[6] = a10 * a21 - a11 * a20;\r\n  out[7] = a01 * a20 - a00 * a21;\r\n  out[8] = a00 * a11 - a01 * a10;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b00 = b[0],\r\n      b01 = b[1],\r\n      b02 = b[2];\r\n  var b10 = b[3],\r\n      b11 = b[4],\r\n      b12 = b[5];\r\n  var b20 = b[6],\r\n      b21 = b[7],\r\n      b22 = b[8];\r\n\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\nexport function fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function normalFromMat4(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nexport function projection(out, width, height) {\r\n  out[0] = 2 / width;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -2 / height;\r\n  out[5] = 0;\r\n  out[6] = -1;\r\n  out[7] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7],\r\n      a8 = a[8];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7],\r\n      b8 = b[8];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    var a12 = a[6],\r\n        a13 = a[7];\r\n    var a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n    a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n    a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n    out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;\r\n    out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;\r\n    out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n  var b00 = void 0,\r\n      b01 = void 0,\r\n      b02 = void 0;\r\n  var b10 = void 0,\r\n      b11 = void 0,\r\n      b12 = void 0;\r\n  var b20 = void 0,\r\n      b21 = void 0,\r\n      b22 = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n  a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n  a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c;b01 = y * x * t + z * s;b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;b11 = y * y * t + c;b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;b21 = y * z * t - x * s;b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotation(out, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromXRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromYRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromZRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\nexport function fromQuat2(out, a) {\r\n  var translation = new glMatrix.ARRAY_TYPE(3);\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n\r\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw;\r\n  //Only scale if it makes sense\r\n  if (magnitude > 0) {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n  var m11 = mat[0];\r\n  var m12 = mat[1];\r\n  var m13 = mat[2];\r\n  var m21 = mat[4];\r\n  var m22 = mat[5];\r\n  var m23 = mat[6];\r\n  var m31 = mat[8];\r\n  var m32 = mat[9];\r\n  var m33 = mat[10];\r\n\r\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport function getRotation(out, mat) {\r\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n  var trace = mat[0] + mat[5] + mat[10];\r\n  var S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (mat[6] - mat[9]) / S;\r\n    out[1] = (mat[8] - mat[2]) / S;\r\n    out[2] = (mat[1] - mat[4]) / S;\r\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n    out[3] = (mat[6] - mat[9]) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (mat[1] + mat[4]) / S;\r\n    out[2] = (mat[8] + mat[2]) / S;\r\n  } else if (mat[5] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n    out[3] = (mat[8] - mat[2]) / S;\r\n    out[0] = (mat[1] + mat[4]) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (mat[6] + mat[9]) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n    out[3] = (mat[1] - mat[4]) / S;\r\n    out[0] = (mat[8] + mat[2]) / S;\r\n    out[1] = (mat[6] + mat[9]) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  var ox = o[0];\r\n  var oy = o[1];\r\n  var oz = o[2];\r\n\r\n  var out0 = (1 - (yy + zz)) * sx;\r\n  var out1 = (xy + wz) * sx;\r\n  var out2 = (xz - wy) * sx;\r\n  var out4 = (xy - wz) * sy;\r\n  var out5 = (1 - (xx + zz)) * sy;\r\n  var out6 = (yz + wx) * sy;\r\n  var out8 = (xz + wy) * sz;\r\n  var out9 = (yz - wx) * sz;\r\n  var out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function frustum(out, left, right, bottom, top, near, far) {\r\n  var rl = 1 / (right - left);\r\n  var tb = 1 / (top - bottom);\r\n  var nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf = void 0;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = far * near / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function lookAt(out, eye, center, up) {\r\n  var x0 = void 0,\r\n      x1 = void 0,\r\n      x2 = void 0,\r\n      y0 = void 0,\r\n      y1 = void 0,\r\n      y2 = void 0,\r\n      z0 = void 0,\r\n      z1 = void 0,\r\n      z2 = void 0,\r\n      len = void 0;\r\n  var eyex = eye[0];\r\n  var eyey = eye[1];\r\n  var eyez = eye[2];\r\n  var upx = up[0];\r\n  var upy = up[1];\r\n  var upz = up[2];\r\n  var centerx = center[0];\r\n  var centery = center[1];\r\n  var centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n  var eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n\r\n  var z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n\r\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  var x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var a8 = a[8],\r\n      a9 = a[9],\r\n      a10 = a[10],\r\n      a11 = a[11];\r\n  var a12 = a[12],\r\n      a13 = a[13],\r\n      a14 = a[14],\r\n      a15 = a[15];\r\n\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  var b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  var b8 = b[8],\r\n      b9 = b[9],\r\n      b10 = b[10],\r\n      b11 = b[11];\r\n  var b12 = b[12],\r\n      b13 = b[13],\r\n      b14 = b[14],\r\n      b15 = b[15];\r\n\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x;\r\n  // var uuv = vec3.cross([], qvec, uv);\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx;\r\n  // vec3.scale(uv, uv, 2 * w);\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2;\r\n  // vec3.scale(uuv, uuv, 2);\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2;\r\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateX(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\r\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateY(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateZ(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\r\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var tempA = fromValues(a[0], a[1], a[2]);\r\n  var tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  var cosine = dot(tempA, tempB);\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as mat3 from \"./mat3.js\";\r\nimport * as vec3 from \"./vec3.js\";\r\nimport * as vec4 from \"./vec4.js\";\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nexport function setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\nexport function getAxisAngle(out_axis, q) {\r\n  var rad = Math.acos(q[3]) * 2.0;\r\n  var s = Math.sin(rad / 2.0);\r\n  if (s > glMatrix.EPSILON) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n  return rad;\r\n}\r\n\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var by = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bz = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\nexport function calculateW(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport function slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  var omega = void 0,\r\n      cosom = void 0,\r\n      sinom = void 0,\r\n      scale0 = void 0,\r\n      scale1 = void 0;\r\n\r\n  // calc cosine\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n  // adjust signs (if necessary)\r\n  if (cosom < 0.0) {\r\n    cosom = -cosom;\r\n    bx = -bx;\r\n    by = -by;\r\n    bz = -bz;\r\n    bw = -bw;\r\n  }\r\n  // calculate coefficients\r\n  if (1.0 - cosom > glMatrix.EPSILON) {\r\n    // standard case (slerp)\r\n    omega = Math.acos(cosom);\r\n    sinom = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  }\r\n  // calculate final values\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function random(out) {\r\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n  // TODO: Calling random 3 times is probably not the fastest solution\r\n  var u1 = glMatrix.RANDOM();\r\n  var u2 = glMatrix.RANDOM();\r\n  var u3 = glMatrix.RANDOM();\r\n\r\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n  var sqrtU1 = Math.sqrt(u1);\r\n\r\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n  var invDot = dot ? 1.0 / dot : 0;\r\n\r\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0 * invDot;\r\n  out[1] = -a1 * invDot;\r\n  out[2] = -a2 * invDot;\r\n  out[3] = a3 * invDot;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  var fTrace = m[0] + m[4] + m[8];\r\n  var fRoot = void 0;\r\n\r\n  if (fTrace > 0.0) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot; // 1/(4w)\r\n    out[0] = (m[5] - m[7]) * fRoot;\r\n    out[1] = (m[6] - m[2]) * fRoot;\r\n    out[2] = (m[1] - m[3]) * fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    var i = 0;\r\n    if (m[4] > m[0]) i = 1;\r\n    if (m[8] > m[i * 3 + i]) i = 2;\r\n    var j = (i + 1) % 3;\r\n    var k = (i + 2) % 3;\r\n\r\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromEuler(out, x, y, z) {\r\n  var halfToRad = 0.5 * Math.PI / 180.0;\r\n  x *= halfToRad;\r\n  y *= halfToRad;\r\n  z *= halfToRad;\r\n\r\n  var sx = Math.sin(x);\r\n  var cx = Math.cos(x);\r\n  var sy = Math.sin(y);\r\n  var cy = Math.cos(y);\r\n  var sz = Math.sin(z);\r\n  var cz = Math.cos(z);\r\n\r\n  out[0] = sx * cy * cz - cx * sy * sz;\r\n  out[1] = cx * sy * cz + sx * cy * sz;\r\n  out[2] = cx * cy * sz - sx * sy * cz;\r\n  out[3] = cx * cy * cz + sx * sy * sz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var clone = vec4.clone;\r\n\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var fromValues = vec4.fromValues;\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var copy = vec4.copy;\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var set = vec4.set;\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var add = vec4.add;\r\n\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var scale = vec4.scale;\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport var dot = vec4.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var lerp = vec4.lerp;\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport var length = vec4.length;\r\n\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport var squaredLength = vec4.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var normalize = vec4.normalize;\r\n\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var exactEquals = vec4.exactEquals;\r\n\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var equals = vec4.equals;\r\n\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\nexport var rotationTo = function () {\r\n  var tmpvec3 = vec3.create();\r\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\r\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\r\n\r\n  return function (out, a, b) {\r\n    var dot = vec3.dot(a, b);\r\n    if (dot < -0.999999) {\r\n      vec3.cross(tmpvec3, xUnitVec3, a);\r\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\r\n      vec3.normalize(tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      vec3.cross(tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n}();\r\n\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport var sqlerp = function () {\r\n  var temp1 = create();\r\n  var temp2 = create();\r\n\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  };\r\n}();\r\n\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\nexport var setAxes = function () {\r\n  var matr = mat3.create();\r\n\r\n  return function (out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as quat from \"./quat.js\";\r\nimport * as mat4 from \"./mat4.js\";\r\n\r\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\r\n\r\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\r\nexport function create() {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    dq[0] = 0;\r\n    dq[1] = 0;\r\n    dq[2] = 0;\r\n    dq[4] = 0;\r\n    dq[5] = 0;\r\n    dq[6] = 0;\r\n    dq[7] = 0;\r\n  }\r\n  dq[3] = 1;\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\nexport function clone(a) {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n  dq[0] = a[0];\r\n  dq[1] = a[1];\r\n  dq[2] = a[2];\r\n  dq[3] = a[3];\r\n  dq[4] = a[4];\r\n  dq[5] = a[5];\r\n  dq[6] = a[6];\r\n  dq[7] = a[7];\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n  dq[0] = x1;\r\n  dq[1] = y1;\r\n  dq[2] = z1;\r\n  dq[3] = w1;\r\n  dq[4] = x2;\r\n  dq[5] = y2;\r\n  dq[6] = z2;\r\n  dq[7] = w2;\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n  dq[0] = x1;\r\n  dq[1] = y1;\r\n  dq[2] = z1;\r\n  dq[3] = w1;\r\n  var ax = x2 * 0.5,\r\n      ay = y2 * 0.5,\r\n      az = z2 * 0.5;\r\n  dq[4] = ax * w1 + ay * z1 - az * y1;\r\n  dq[5] = ay * w1 + az * x1 - ax * z1;\r\n  dq[6] = az * w1 + ax * y1 - ay * x1;\r\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q quaternion\r\n * @param {vec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\nexport function fromRotationTranslation(out, q, t) {\r\n  var ax = t[0] * 0.5,\r\n      ay = t[1] * 0.5,\r\n      az = t[2] * 0.5,\r\n      bx = q[0],\r\n      by = q[1],\r\n      bz = q[2],\r\n      bw = q[3];\r\n  out[0] = bx;\r\n  out[1] = by;\r\n  out[2] = bz;\r\n  out[3] = bw;\r\n  out[4] = ax * bw + ay * bz - az * by;\r\n  out[5] = ay * bw + az * bx - ax * bz;\r\n  out[6] = az * bw + ax * by - ay * bx;\r\n  out[7] = -ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {vec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\nexport function fromTranslation(out, t) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = t[0] * 0.5;\r\n  out[5] = t[1] * 0.5;\r\n  out[6] = t[2] * 0.5;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\nexport function fromRotation(out, q) {\r\n  out[0] = q[0];\r\n  out[1] = q[1];\r\n  out[2] = q[2];\r\n  out[3] = q[3];\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {mat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\r\nexport function fromMat4(out, a) {\r\n  //TODO Optimize this\r\n  var outer = quat.create();\r\n  mat4.getRotation(outer, a);\r\n  var t = new glMatrix.ARRAY_TYPE(3);\r\n  mat4.getTranslation(t, a);\r\n  fromRotationTranslation(out, outer, t);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\r\n  out[0] = x1;\r\n  out[1] = y1;\r\n  out[2] = z1;\r\n  out[3] = w1;\r\n\r\n  out[4] = x2;\r\n  out[5] = y2;\r\n  out[6] = z2;\r\n  out[7] = w2;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\r\nexport var getReal = quat.copy;\r\n\r\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\r\nexport function getDual(out, a) {\r\n  out[0] = a[4];\r\n  out[1] = a[5];\r\n  out[2] = a[6];\r\n  out[3] = a[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport var setReal = quat.copy;\r\n\r\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport function setDual(out, q) {\r\n  out[4] = q[0];\r\n  out[5] = q[1];\r\n  out[6] = q[2];\r\n  out[7] = q[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {quat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\r\nexport function getTranslation(out, a) {\r\n  var ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3];\r\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var ax1 = a[0],\r\n      ay1 = a[1],\r\n      az1 = a[2],\r\n      aw1 = a[3],\r\n      bx1 = v[0] * 0.5,\r\n      by1 = v[1] * 0.5,\r\n      bz1 = v[2] * 0.5,\r\n      ax2 = a[4],\r\n      ay2 = a[5],\r\n      az2 = a[6],\r\n      aw2 = a[7];\r\n  out[0] = ax1;\r\n  out[1] = ay1;\r\n  out[2] = az1;\r\n  out[3] = aw1;\r\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\r\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\r\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\r\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  quat.rotateX(out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  quat.rotateY(out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  quat.rotateZ(out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {quat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\r\nexport function rotateByQuatAppend(out, a, q) {\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3],\r\n      ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n\r\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\r\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\r\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\r\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\r\n  ax = a[4];\r\n  ay = a[5];\r\n  az = a[6];\r\n  aw = a[7];\r\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\r\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\r\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\r\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat} q quaternion to rotate by\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\r\nexport function rotateByQuatPrepend(out, q, a) {\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3],\r\n      bx = a[0],\r\n      by = a[1],\r\n      bz = a[2],\r\n      bw = a[3];\r\n\r\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\r\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\r\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\r\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\r\n  bx = a[4];\r\n  by = a[5];\r\n  bz = a[6];\r\n  bw = a[7];\r\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\r\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\r\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\r\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {vec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\r\nexport function rotateAroundAxis(out, a, axis, rad) {\r\n  //Special case for rad = 0\r\n  if (Math.abs(rad) < glMatrix.EPSILON) {\r\n    return copy(out, a);\r\n  }\r\n  var axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\r\n\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  var bx = s * axis[0] / axisLength;\r\n  var by = s * axis[1] / axisLength;\r\n  var bz = s * axis[2] / axisLength;\r\n  var bw = Math.cos(rad);\r\n\r\n  var ax1 = a[0],\r\n      ay1 = a[1],\r\n      az1 = a[2],\r\n      aw1 = a[3];\r\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n\r\n  var ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var ax0 = a[0],\r\n      ay0 = a[1],\r\n      az0 = a[2],\r\n      aw0 = a[3],\r\n      bx1 = b[4],\r\n      by1 = b[5],\r\n      bz1 = b[6],\r\n      bw1 = b[7],\r\n      ax1 = a[4],\r\n      ay1 = a[5],\r\n      az1 = a[6],\r\n      aw1 = a[7],\r\n      bx0 = b[0],\r\n      by0 = b[1],\r\n      bz0 = b[2],\r\n      bw0 = b[3];\r\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\r\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\r\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\r\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\r\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\r\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\r\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\r\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport var dot = quat.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var mt = 1 - t;\r\n  if (dot(a, b) < 0) t = -t;\r\n\r\n  out[0] = a[0] * mt + b[0] * t;\r\n  out[1] = a[1] * mt + b[1] * t;\r\n  out[2] = a[2] * mt + b[2] * t;\r\n  out[3] = a[3] * mt + b[3] * t;\r\n  out[4] = a[4] * mt + b[4] * t;\r\n  out[5] = a[5] * mt + b[5] * t;\r\n  out[6] = a[6] * mt + b[6] * t;\r\n  out[7] = a[7] * mt + b[7] * t;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\r\nexport function invert(out, a) {\r\n  var sqlen = squaredLength(a);\r\n  out[0] = -a[0] / sqlen;\r\n  out[1] = -a[1] / sqlen;\r\n  out[2] = -a[2] / sqlen;\r\n  out[3] = a[3] / sqlen;\r\n  out[4] = -a[4] / sqlen;\r\n  out[5] = -a[5] / sqlen;\r\n  out[6] = -a[6] / sqlen;\r\n  out[7] = a[7] / sqlen;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  out[4] = -a[4];\r\n  out[5] = -a[5];\r\n  out[6] = -a[6];\r\n  out[7] = a[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\r\nexport var length = quat.length;\r\n\r\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport var squaredLength = quat.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport function normalize(out, a) {\r\n  var magnitude = squaredLength(a);\r\n  if (magnitude > 0) {\r\n    magnitude = Math.sqrt(magnitude);\r\n\r\n    var a0 = a[0] / magnitude;\r\n    var a1 = a[1] / magnitude;\r\n    var a2 = a[2] / magnitude;\r\n    var a3 = a[3] / magnitude;\r\n\r\n    var b0 = a[4];\r\n    var b1 = a[5];\r\n    var b2 = a[6];\r\n    var b3 = a[7];\r\n\r\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\r\n\r\n    out[0] = a0;\r\n    out[1] = a1;\r\n    out[2] = a2;\r\n    out[3] = a3;\r\n\r\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\r\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\r\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\r\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {quat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\r\nexport function str(a) {\r\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat2} a the first dual quaternion.\r\n * @param {quat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\r\n}\r\n\r\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat2} a the first dual quat.\r\n * @param {quat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\r\n}","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(2);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(2);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\r\nexport function fromValues(x, y) {\r\n  var out = new glMatrix.ARRAY_TYPE(2);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\r\nexport function set(out, x, y) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0],\r\n      y = b[1] - a[1];\r\n  return Math.sqrt(x * x + y * y);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0],\r\n      y = b[1] - a[1];\r\n  return x * x + y * y;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  return Math.sqrt(x * x + y * y);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  return x * x + y * y;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  var len = x * x + y * y;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var z = a[0] * b[1] - a[1] * b[0];\r\n  out[0] = out[1] = 0;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0],\r\n      ay = a[1];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  out[0] = Math.cos(r) * scale;\r\n  out[1] = Math.sin(r) * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat2(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[2] * y;\r\n  out[1] = m[1] * x + m[3] * y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat2d(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[2] * y + m[4];\r\n  out[1] = m[1] * x + m[3] * y + m[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[3] * y + m[6];\r\n  out[1] = m[1] * x + m[4] * y + m[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  out[0] = m[0] * x + m[4] * y + m[12];\r\n  out[1] = m[1] * x + m[5] * y + m[13];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\r\nexport function rotate(out, a, b, c) {\r\n  //Translate point to the origin\r\n  var p0 = a[0] - b[0],\r\n      p1 = a[1] - b[1],\r\n      sinC = Math.sin(c),\r\n      cosC = Math.cos(c);\r\n\r\n  //perform rotation and translate to correct position\r\n  out[0] = p0 * cosC - p1 * sinC + b[0];\r\n  out[1] = p0 * sinC + p1 * cosC + b[1];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var x1 = a[0],\r\n      y1 = a[1],\r\n      x2 = b[0],\r\n      y2 = b[1];\r\n\r\n  var len1 = x1 * x1 + y1 * y1;\r\n  if (len1 > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len1 = 1 / Math.sqrt(len1);\r\n  }\r\n\r\n  var len2 = x2 * x2 + y2 * y2;\r\n  if (len2 > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len2 = 1 / Math.sqrt(len2);\r\n  }\r\n\r\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1];\r\n  var b0 = b[0],\r\n      b1 = b[1];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 2;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./gl-matrix/common.js\";\r\nimport * as mat2 from \"./gl-matrix/mat2.js\";\r\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\r\nimport * as mat3 from \"./gl-matrix/mat3.js\";\r\nimport * as mat4 from \"./gl-matrix/mat4.js\";\r\nimport * as quat from \"./gl-matrix/quat.js\";\r\nimport * as quat2 from \"./gl-matrix/quat2.js\";\r\nimport * as vec2 from \"./gl-matrix/vec2.js\";\r\nimport * as vec3 from \"./gl-matrix/vec3.js\";\r\nimport * as vec4 from \"./gl-matrix/vec4.js\";\r\n\r\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","import { mat4, vec3 } from 'gl-matrix';\r\nimport { gltf as GLTF } from 'gltf-loader-ts';\r\nimport { Context, Program } from 'webgl-operate';\r\n\r\nimport { Aabb3 } from './aabb3';\r\nimport { Asset } from './asset';\r\nimport { PbrShader } from './pbrshader';\r\nimport { Primitive } from './primitive';\r\n\r\nexport class Mesh {\r\n    context: Context;\r\n    primitives: Primitive[];\r\n    // TODO: weights\r\n    name: string;\r\n    bounds: Aabb3 = new Aabb3();\r\n\r\n    static async fromGltf(meshIndex: GLTF.GlTfId, asset: Asset): Promise<Mesh> {\r\n        const gMesh = asset.gAsset.gltf.meshes![meshIndex];\r\n        const mesh = new Mesh();\r\n        mesh.context = asset.context;\r\n        mesh.name = gMesh.name;\r\n        mesh.primitives = await Promise.all(gMesh.primitives.map((gPrim, i) => {\r\n            const identifier = `mesh_${gMesh.name || meshIndex}_prim_${i}`;\r\n            return Primitive.fromGltf(gPrim, asset, identifier);\r\n        }));\r\n\r\n        for (const primitive of mesh.primitives) {\r\n            mesh.bounds.union(primitive.bounds);\r\n        }\r\n\r\n        return mesh;\r\n    }\r\n\r\n    uninitialize() {\r\n        for (const primitive of this.primitives) {\r\n            primitive.uninitialize();\r\n        }\r\n    }\r\n}\r\n","import { auxiliaries, Buffer, Context, Initializable, RenderView, VertexArray } from 'webgl-operate';\r\nconst assert = auxiliaries.assert;\r\n\r\nimport { vec3 } from 'gl-matrix';\r\nimport { gltf as GLTF, GLTF_ELEMENTS_PER_TYPE, GltfAsset } from 'gltf-loader-ts';\r\nimport { Aabb3 } from './aabb3';\r\nimport { Asset } from './asset';\r\nimport { Material } from './material';\r\nimport { PbrShader, ShaderFlags } from './pbrshader';\r\n\r\n// tslint:disable:max-classes-per-file\r\n\r\n/** Data needed for `gl.vertexAttribPointer` */\r\nclass VertexAttribute {\r\n    static fromGltf(accessor: GLTF.Accessor, byteStride: number | undefined, buffer: Buffer) {\r\n        return new VertexAttribute(\r\n            buffer,\r\n            GLTF_ELEMENTS_PER_TYPE[accessor.type],\r\n            accessor.componentType,\r\n            accessor.normalized || false,\r\n            byteStride || 0,\r\n            accessor.byteOffset || 0,\r\n        );\r\n    }\r\n\r\n    constructor(\r\n        public buffer: Buffer,\r\n        private size: GLint,\r\n        private type: GLenum,\r\n        private normalized: boolean,\r\n        private stride: GLsizei,\r\n        private offset: GLintptr,\r\n    ) { }\r\n\r\n    enable(index: GLuint) {\r\n        this.buffer.attribEnable(\r\n            index,\r\n            this.size,\r\n            this.type,\r\n            this.normalized,\r\n            this.stride,\r\n            this.offset,\r\n            true,\r\n            false,\r\n        );\r\n    }\r\n\r\n    disable(index: GLuint) {\r\n        this.buffer.attribDisable(index, false, true);\r\n    }\r\n}\r\n\r\nexport class Primitive extends Initializable {\r\n    private identifier: string;\r\n    private vertexArray: VertexArray;\r\n    /** Vertex attributes. Keys match the attribute semantic property names from glTF. */\r\n    private attributes: { [semantic: string]: VertexAttribute } = {};\r\n    private numVertices: number;\r\n\r\n    private indexBuffer: Buffer;\r\n    private numIndices: number;\r\n    private indexType: GLenum;\r\n    private indexByteOffset: number;\r\n\r\n    /** POINTS / LINES / TRIANGLES etc. */\r\n    private mode: GLenum;\r\n\r\n    private shaderFlags: ShaderFlags;\r\n    /** Currently active shader */\r\n    private shader: PbrShader | undefined;\r\n\r\n    private drawCall: () => void;\r\n\r\n    public material: Material;\r\n    public bounds: Aabb3;\r\n\r\n    static async fromGltf(gPrimitive: GLTF.MeshPrimitive, asset: Asset, identifier?: string): Promise<Primitive> {\r\n        const prim = new Primitive(asset.context, identifier);\r\n        prim.mode = gPrimitive.mode || 4; // TRIANGLES (= default in spec)\r\n\r\n        const context = asset.context;\r\n        const gl = prim.context.gl;\r\n        const gAsset = asset.gAsset;\r\n        const gltf = gAsset.gltf;\r\n        assert(gPrimitive.attributes.POSITION !== undefined, 'primitives must have the POSITION attribute');\r\n        if (gltf.bufferViews === undefined) { throw new Error('invalid gltf'); }\r\n\r\n        const buffersByView: { [bufferView: number]: Buffer } = {};\r\n        for (const semantic in gPrimitive.attributes) {\r\n            const accessorIndex = gPrimitive.attributes[semantic];\r\n            const accessor = gltf.accessors![accessorIndex];\r\n            prim.numVertices = accessor.count;\r\n            const bufferViewIndex = accessor.bufferView;\r\n\r\n            let buffer;\r\n            let byteStride;\r\n            if (bufferViewIndex !== undefined && bufferViewIndex in buffersByView) {\r\n                buffer = buffersByView[bufferViewIndex];\r\n                byteStride = gltf.bufferViews[bufferViewIndex].byteStride;\r\n            } else {\r\n                const bufferViewData = await gAsset.accessorData(accessorIndex);\r\n                buffer = new Buffer(prim.context, `${prim.identifier}_VBO_${Object.keys(buffersByView).length}`);\r\n                buffer.initialize(gl.ARRAY_BUFFER);\r\n                buffer.data(bufferViewData, gl.STATIC_DRAW);\r\n                if (bufferViewIndex !== undefined) {\r\n                    buffersByView[bufferViewIndex] = buffer;\r\n                    byteStride = gltf.bufferViews[bufferViewIndex].byteStride;\r\n                }\r\n            }\r\n\r\n            prim.attributes[semantic] = VertexAttribute.fromGltf(accessor, byteStride, buffer);\r\n            if (semantic === 'POSITION') {\r\n                prim.bounds = new Aabb3(\r\n                    vec3.fromValues.apply(undefined, accessor.min!),\r\n                    vec3.fromValues.apply(undefined, accessor.max!),\r\n                );\r\n            }\r\n        }\r\n\r\n        let shaderFlags: ShaderFlags = 0;\r\n        if (gPrimitive.attributes.NORMAL !== undefined) { shaderFlags |= ShaderFlags.HAS_NORMALS; }\r\n        if (gPrimitive.attributes.TANGENT !== undefined) { shaderFlags |= ShaderFlags.HAS_TANGENTS; }\r\n        if (gPrimitive.attributes.TEXCOORD_0 !== undefined) { shaderFlags |= ShaderFlags.HAS_UV; }\r\n        if (gPrimitive.attributes.COLOR_0 !== undefined) { shaderFlags |= ShaderFlags.HAS_COLORS; }\r\n\r\n        if (gPrimitive.indices !== undefined) {\r\n            const indexAccessor = gltf.accessors![gPrimitive.indices];\r\n            const indexBufferData = await gAsset.accessorData(gPrimitive.indices);\r\n            prim.indexBuffer = new Buffer(prim.context, `${prim.identifier}_EBO`);\r\n            prim.numIndices = indexAccessor.count;\r\n            prim.indexByteOffset = indexAccessor.byteOffset || 0;\r\n            prim.indexType = indexAccessor.componentType;\r\n            if (prim.indexType === gl.UNSIGNED_INT && context.isWebGL1) {\r\n                if (context.supportsElementIndexUint) {\r\n                    const _ = context.elementIndexUint; // activate extension\r\n                } else {\r\n                    throw new Error(`Primitive ${prim.identifier} needs unsupported extension OES_element_index_uint`);\r\n                }\r\n            }\r\n\r\n            prim.indexBuffer.initialize(gl.ELEMENT_ARRAY_BUFFER);\r\n            prim.indexBuffer.data(indexBufferData, gl.STATIC_DRAW);\r\n\r\n            auxiliaries.assert(prim.indexBuffer !== undefined &&\r\n                prim.indexBuffer.object instanceof WebGLBuffer,\r\n                `expected valid WebGLBuffer`);\r\n        }\r\n\r\n        if (gPrimitive.material === undefined) {\r\n            // The default material, used when a mesh does not specify a material,\r\n            // is defined to be a material with no properties specified.\r\n            // All the default values of material apply.\r\n            prim.material = new Material(context);\r\n            prim.material.name = 'DefaultMaterial';\r\n        } else {\r\n            prim.material = await asset.getMaterial(gPrimitive.material);\r\n        }\r\n        prim.shaderFlags = shaderFlags | prim.material.shaderFlags;\r\n        prim.initialize();\r\n        return prim;\r\n    }\r\n\r\n    constructor(context: Context, identifier: string | undefined = 'Primitive') {\r\n        super();\r\n\r\n        this.identifier = identifier;\r\n        this.vertexArray = new VertexArray(context, identifier + '_VAO');\r\n    }\r\n\r\n    protected bindBuffers(): void {\r\n        for (const semantic in this.attributes) {\r\n            const location = this.shader!.attribLocations[semantic];\r\n            if (location === undefined || location === -1) { continue; }\r\n            this.attributes[semantic].enable(location);\r\n        }\r\n\r\n        if (this.numIndices) { this.indexBuffer.bind(); }\r\n    }\r\n\r\n    protected unbindBuffers(): void {\r\n        for (const semantic in this.attributes) {\r\n            const location = this.shader!.attribLocations[semantic];\r\n            if (location === undefined || location === -1) { continue; }\r\n            this.attributes[semantic].disable(location);\r\n        }\r\n        if (this.numIndices) { this.indexBuffer.unbind(); }\r\n    }\r\n\r\n    public initialize(...args: any[]): boolean {\r\n        const gl = this.context.gl;\r\n        if (this.numIndices) {\r\n            this.drawCall = () => {\r\n                gl.drawElements(this.mode, this.numIndices, this.indexType, this.indexByteOffset);\r\n            };\r\n        } else {\r\n            this.drawCall = () => {\r\n                gl.drawArrays(this.mode, 0, this.numVertices);\r\n            };\r\n        }\r\n\r\n        this.vertexArray.initialize(() => this.bindBuffers(), () => this.unbindBuffers());\r\n        return this.vertexArray.valid;\r\n    }\r\n\r\n    uninitialize(): void {\r\n        this.vertexArray.uninitialize();\r\n        for (const semantic in this.attributes) {\r\n            const buffer = this.attributes[semantic].buffer;\r\n            if (buffer.initialized) {\r\n                buffer.uninitialize();\r\n            }\r\n        }\r\n        if (this.indexBuffer) {\r\n            this.indexBuffer.uninitialize();\r\n        }\r\n    }\r\n\r\n    draw(shader: PbrShader, renderViews?: RenderView[]): void {\r\n        this.shader = shader;\r\n        this.context.gl.uniform1i(shader.uniforms.u_PbrFlags, this.shaderFlags);\r\n        this.vertexArray.bind();\r\n\r\n        if (renderViews) {\r\n            const gl = this.context.gl;\r\n            // To avoid the overall bind count amount, only set viewport and view/projection-related\r\n            // uniforms and render for each view (= eye in a standard VR setup)\r\n            for (const view of renderViews) {\r\n                const vp = view.viewport;\r\n                gl.viewport(vp.x, vp.y, vp.width, vp.height);\r\n\r\n                gl.uniformMatrix4fv(shader.uniforms.u_ViewProjection, false, view.viewProjectionMatrix);\r\n                gl.uniform3fv(shader.uniforms.u_Camera, view.cameraPosition);\r\n                this.drawCall();\r\n            }\r\n        } else {\r\n            this.drawCall();\r\n        }\r\n        this.vertexArray.unbind();\r\n        this.shader = undefined;\r\n    }\r\n\r\n    get context(): Context {\r\n        return this.vertexArray.context;\r\n    }\r\n}\r\n","import { mat4 } from 'gl-matrix';\r\nimport { gltf as GLTF } from 'gltf-loader-ts';\r\nimport { Camera, Context, RenderView } from 'webgl-operate';\r\n\r\nimport { Aabb3 } from './aabb3';\r\nimport { Asset } from './asset';\r\nimport { AlphaMode, Material } from './material';\r\nimport { Node } from './node';\r\nimport { PbrShader } from './pbrshader';\r\nimport { Primitive } from './primitive';\r\n\r\ninterface RenderBatch {\r\n    node: Node;\r\n    primitive: Primitive;\r\n}\r\n\r\nexport class Scene {\r\n    context: Context;\r\n    name: string;\r\n    /** all nodes */\r\n    nodes: Node[] = [];\r\n    rootNodes: Node[];\r\n    batchesByMaterial: Map<Material, RenderBatch[]> = new Map();\r\n    /** First opaque materials, then (semi)transparent ones */\r\n    sortedMaterials: Material[];\r\n    bounds: Aabb3 = new Aabb3();\r\n\r\n    static async fromGltf(gScene: GLTF.Scene, asset: Asset): Promise<Scene> {\r\n        const scene = new Scene();\r\n        scene.context = asset.context;\r\n        scene.name = gScene.name;\r\n        scene.rootNodes = await Promise.all(gScene.nodes!.map((i) => {\r\n            const gNode = asset.gAsset.gltf.nodes![i];\r\n            return Node.fromGltf(gNode, asset);\r\n        }));\r\n\r\n        // propagate transforms\r\n        const rootTransform = mat4.create(); // identity\r\n        for (const node of scene.rootNodes) {\r\n            node.updateTransform(rootTransform);\r\n            node.updateBounds();\r\n            scene.bounds.union(node.bounds);\r\n        }\r\n\r\n        // gather all nodes\r\n        for (const rootNode of scene.rootNodes) {\r\n            scene.nodes.push(rootNode);\r\n            const stack = [rootNode];\r\n            while (stack.length > 0) {\r\n                const node = stack.pop()!;\r\n                scene.nodes.push(node);\r\n                stack.push.apply(stack, node.children);\r\n            }\r\n        }\r\n\r\n        // gather primitives by material for batched drawing\r\n        for (const node of scene.nodes) {\r\n            if (node.mesh === undefined) { continue; }\r\n            for (const primitive of node.mesh.primitives) {\r\n                const mat = primitive.material;\r\n                const batches = scene.batchesByMaterial.get(mat) || [];\r\n                if (batches.length === 0) { scene.batchesByMaterial.set(mat, batches); }\r\n                batches.push({ node, primitive });\r\n            }\r\n        }\r\n\r\n        const materials = Array.from(scene.batchesByMaterial.keys());\r\n        const opaqueMaterials = materials.filter((m) => m.alphaMode === AlphaMode.OPAQUE);\r\n        const transparentMaterials = materials.filter((m) => m.alphaMode !== AlphaMode.OPAQUE);\r\n        scene.sortedMaterials = opaqueMaterials.concat(transparentMaterials);\r\n\r\n        return scene;\r\n    }\r\n\r\n    draw(shader: PbrShader, renderViews?: RenderView[]) {\r\n        const gl = this.context.gl;\r\n        for (const material of this.sortedMaterials) {\r\n            const batches = this.batchesByMaterial.get(material)!;\r\n            material.bind(shader);\r\n            for (const { primitive, node } of batches) {\r\n                gl.uniformMatrix4fv(shader.uniforms.u_ModelMatrix, gl.FALSE, node.finalTransform);\r\n                gl.uniformMatrix3fv(shader.uniforms.u_NormalMatrix, gl.FALSE, node.normalMatrix);\r\n                primitive.draw(shader, renderViews);\r\n            }\r\n            material.unbind(shader);\r\n        }\r\n    }\r\n\r\n    uninitialize() {\r\n        for (const node of this.rootNodes) {\r\n            node.uninitialize();\r\n        }\r\n    }\r\n}\r\n","import { mat3, mat4, quat, vec3 } from 'gl-matrix';\r\nimport { gltf as GLTF } from 'gltf-loader-ts';\r\nimport { Camera, Context, Program } from 'webgl-operate';\r\n\r\nimport { Aabb3 } from './aabb3';\r\nimport { Asset } from './asset';\r\nimport { Mesh } from './mesh';\r\nimport { PbrShader } from './pbrshader';\r\n\r\nexport class Node {\r\n    context: Context;\r\n    mesh: Mesh | undefined;\r\n    children: Node[] = [];\r\n\r\n    // a node can either have a matrix, or T,R,S properties\r\n    matrix: mat4 | undefined;\r\n    translation: vec3 | undefined;\r\n    rotation: quat | undefined;\r\n    scale: vec3 | undefined;\r\n    // TODO: weights\r\n    // TODO!: camera\r\n    // camera: Camera;\r\n    name: string;\r\n\r\n    finalTransform: mat4 = mat4.create();\r\n    normalMatrix: mat3 = mat3.create();\r\n    bounds: Aabb3;\r\n\r\n    static async fromGltf(gNode: GLTF.Node, asset: Asset): Promise<Node> {\r\n        const node = new Node();\r\n        node.name = gNode.name;\r\n        node.context = asset.context;\r\n\r\n        if (gNode.matrix !== undefined) {\r\n            node.matrix = mat4.fromValues.apply(undefined, gNode.matrix);\r\n        } else if (gNode.translation || gNode.rotation || gNode.scale) {\r\n            node.translation = gNode.translation ?\r\n                vec3.fromValues.apply(undefined, gNode.translation) :\r\n                vec3.create();\r\n\r\n            node.rotation = gNode.rotation ?\r\n                quat.fromValues.apply(undefined, gNode.rotation) :\r\n                quat.create();\r\n\r\n            node.scale = gNode.scale ?\r\n                vec3.fromValues.apply(undefined, gNode.scale) :\r\n                vec3.fromValues(1, 1, 1);\r\n        } else {\r\n            node.matrix = mat4.create();\r\n        }\r\n\r\n        // NOTE: no waiting on mesh and children in parallel because generally\r\n        // only one of them exists on a node\r\n        if (gNode.mesh !== undefined) {\r\n            node.mesh = await asset.getMesh(gNode.mesh);\r\n        }\r\n\r\n        if (gNode.children) {\r\n            node.children = await Promise.all(gNode.children.map((i) => {\r\n                return Node.fromGltf(asset.gAsset.gltf.nodes![i], asset);\r\n            }));\r\n        }\r\n\r\n        // TODO!!: camera (including switcher in dat gui)\r\n\r\n        return node;\r\n    }\r\n\r\n    updateTransform(parentTransform: mat4) {\r\n        this.finalTransform = mat4.clone(parentTransform);\r\n\r\n        if (this.matrix) {\r\n            mat4.mul(this.finalTransform, this.finalTransform, this.matrix);\r\n        } else {\r\n            const m = mat4.fromRotationTranslationScale(mat4.create(), this.rotation!, this.translation!, this.scale!);\r\n            mat4.mul(this.finalTransform, this.finalTransform, m);\r\n        }\r\n\r\n        mat3.normalFromMat4(this.normalMatrix, this.finalTransform);\r\n\r\n        for (const node of this.children) {\r\n            node.updateTransform(this.finalTransform);\r\n        }\r\n    }\r\n\r\n    updateBounds() {\r\n        if (this.mesh) {\r\n            this.bounds = this.mesh.bounds.clone();\r\n            this.bounds.transform(this.finalTransform);\r\n        } else if (this.children.length === 0) {\r\n            // Cameras (others?) have neither mesh nor children. Their position is the origin\r\n            // TODO!: are there other cases? Do bounds matter for cameras?\r\n            this.bounds = new Aabb3(vec3.fromValues(0, 0, 0), vec3.fromValues(0, 0, 0));\r\n            this.bounds.transform(this.finalTransform);\r\n        } else {\r\n            // TODO!: mesh AND children?\r\n            this.bounds = new Aabb3();\r\n            for (const node of this.children) {\r\n                node.updateBounds();\r\n                this.bounds.union(node.bounds);\r\n            }\r\n        }\r\n    }\r\n\r\n    uninitialize() {\r\n        if (this.mesh) {\r\n            this.mesh.uninitialize();\r\n        }\r\n        for (const node of this.children) {\r\n            node.uninitialize();\r\n        }\r\n    }\r\n}\r\n","import { mat4, vec3 } from 'gl-matrix';\r\n\r\n/** An axis aligned bounding box */\r\nexport class Aabb3 {\r\n    /**\r\n     * Note: Aabb3 may change the arguments later.\r\n     * Clone them before to avoid unintended side-effects.\r\n     */\r\n    constructor(\r\n        public min: vec3 = vec3.fromValues(+Infinity, +Infinity, +Infinity),\r\n        public max: vec3 = vec3.fromValues(-Infinity, -Infinity, -Infinity)) {\r\n    }\r\n\r\n    /** Transforms this bounding box in place. */\r\n    transform(matrix: mat4) {\r\n        const newMin = vec3.fromValues(+Infinity, +Infinity, +Infinity);\r\n        const newMax = vec3.fromValues(-Infinity, -Infinity, -Infinity);\r\n        const point = vec3.create();\r\n\r\n        const transformPoint = (matrix: mat4) => {\r\n            vec3.transformMat4(point, point, matrix);\r\n            vec3.min(newMin, newMin, point);\r\n            vec3.max(newMax, newMax, point);\r\n        };\r\n\r\n        vec3.set(point, this.min[0], this.min[1], this.min[2]); // 000\r\n        transformPoint(matrix);\r\n        vec3.set(point, this.min[0], this.min[1], this.max[2]); // 001\r\n        transformPoint(matrix);\r\n        vec3.set(point, this.min[0], this.max[1], this.min[2]); // 010\r\n        transformPoint(matrix);\r\n        vec3.set(point, this.min[0], this.max[1], this.max[2]); // 011\r\n        transformPoint(matrix);\r\n        vec3.set(point, this.max[0], this.min[1], this.min[2]); // 100\r\n        transformPoint(matrix);\r\n        vec3.set(point, this.max[0], this.min[1], this.max[2]); // 101\r\n        transformPoint(matrix);\r\n        vec3.set(point, this.max[0], this.max[1], this.min[2]); // 110\r\n        transformPoint(matrix);\r\n        vec3.set(point, this.max[0], this.max[1], this.max[2]); // 111\r\n        transformPoint(matrix);\r\n\r\n        this.min = newMin;\r\n        this.max = newMax;\r\n    }\r\n\r\n    /** The width, height and depth of this box. */\r\n    get size(): vec3 {\r\n        return vec3.sub(vec3.create(), this.max, this.min);\r\n    }\r\n\r\n    get center(): vec3 {\r\n        const center = vec3.create();\r\n        vec3.add(center, this.min, this.max);\r\n        return vec3.scale(center, center, 0.5);\r\n    }\r\n\r\n    /** Make this box the union of `this` and `other` and returns `this`  */\r\n    union(other: Aabb3): Aabb3 {\r\n        vec3.min(this.min, this.min, other.min);\r\n        vec3.max(this.max, this.max, other.max);\r\n        return this;\r\n    }\r\n\r\n    clone() {\r\n        return new Aabb3(vec3.clone(this.min), vec3.clone(this.max));\r\n    }\r\n}\r\n","import { vec3, vec4 } from 'gl-matrix';\r\nimport { gltf as GLTF } from 'gltf-loader-ts';\r\nimport { Context, Texture2 } from 'webgl-operate';\r\nimport { Asset } from './asset';\r\nimport { PbrShader, ShaderFlags } from './pbrshader';\r\n\r\nexport enum AlphaMode { OPAQUE, MASK, BLEND }\r\n\r\nexport class Material {\r\n    context: Context;\r\n    /** Material name (if none: GLTF index) */\r\n    name: string;\r\n\r\n    // NOTE: all defaults are from the spec\r\n\r\n    // pbr_metallic_roughness properties\r\n    baseColorFactor: vec4 = vec4.fromValues(1, 1, 1, 1);\r\n    baseColorTexture: Texture2;\r\n    baseColorTexCoord: number;\r\n    metallicFactor = 1;\r\n    roughnessFactor = 1;\r\n    metallicRoughnessTexture: Texture2;\r\n    metallicRoughnessTexCoord: number;\r\n\r\n    normalTexture: Texture2;\r\n    normalTexCoord: number;\r\n    normalScale: number;\r\n\r\n    occlusionTexture: Texture2;\r\n    occlusionTexCoord: number;\r\n    occlusionStrength: number;\r\n    emissiveFactor: vec3 = vec3.fromValues(0, 0, 0);\r\n    emissiveTexture: Texture2;\r\n    emissiveTexCoord: number;\r\n\r\n    alphaCutoff = 0.5;\r\n    alphaMode: AlphaMode = AlphaMode.OPAQUE;\r\n\r\n    doubleSided = false;\r\n\r\n    // This texture is bound to unused units used to avoid annoying warnings in Chrome\r\n    // (e.g. `WARNING: there is no texture bound to the unit 0`)\r\n    emptyTexture: Texture2;\r\n\r\n    static async fromGltf(materialIndex: GLTF.GlTfId, asset: Asset): Promise<Material> {\r\n        const gMaterial = asset.gAsset.gltf.materials![materialIndex];\r\n        const mat = new Material(asset.context);\r\n        mat.name = gMaterial.name || materialIndex.toString();\r\n        const pbr = gMaterial.pbrMetallicRoughness;\r\n        const texPromises: { [key: string]: Promise<Texture2> | undefined } = {\r\n            baseColorTexture: undefined,\r\n            metallicRoghnessTexture: undefined,\r\n            normalTexture: undefined,\r\n            occlusionTexture: undefined,\r\n            emissiveTexture: undefined,\r\n        };\r\n        if (pbr) {\r\n            if (pbr.baseColorFactor) {\r\n                mat.baseColorFactor = vec4.fromValues.apply(undefined, pbr.baseColorFactor);\r\n            }\r\n            if (pbr.baseColorTexture) {\r\n                texPromises.baseColorTexture = this.loadTexture(pbr.baseColorTexture, asset,\r\n                    `mat_${mat.name}_baseColorTexture`);\r\n                mat.baseColorTexCoord = pbr.baseColorTexture.texCoord || 0;\r\n            }\r\n            if (pbr.metallicFactor !== undefined) { mat.metallicFactor = pbr.metallicFactor; }\r\n            if (pbr.roughnessFactor !== undefined) { mat.roughnessFactor = pbr.roughnessFactor; }\r\n            if (pbr.metallicRoughnessTexture) {\r\n                texPromises.metallicRoughnessTexture = this.loadTexture(pbr.metallicRoughnessTexture, asset,\r\n                    `mat_${mat.name}_metallicRoughnessTexture`);\r\n                mat.metallicRoughnessTexCoord = pbr.metallicRoughnessTexture.texCoord || 0;\r\n            }\r\n        }\r\n\r\n        const normalTexInfo = gMaterial.normalTexture;\r\n        if (normalTexInfo) {\r\n            texPromises.normalTexture = this.loadTexture(normalTexInfo, asset,\r\n                `mat_${mat.name}_normalTexture`);\r\n            mat.normalTexCoord = normalTexInfo.texCoord || 0;\r\n            mat.normalScale = normalTexInfo.scale || 1;\r\n        }\r\n\r\n        const occTexInfo = gMaterial.occlusionTexture;\r\n        if (occTexInfo) {\r\n            texPromises.occlusionTexture = this.loadTexture(occTexInfo, asset,\r\n                `mat_${mat.name}_occlusionTexture`);\r\n            mat.occlusionTexCoord = occTexInfo.texCoord || 0;\r\n            mat.occlusionStrength = occTexInfo.strength || 1;\r\n        }\r\n\r\n        if (gMaterial.emissiveTexture) {\r\n            texPromises.emissiveTexture = this.loadTexture(gMaterial.emissiveTexture, asset,\r\n                `mat_${mat.name}_emissiveTexture`);\r\n            mat.emissiveTexCoord = gMaterial.emissiveTexture.texCoord || 0;\r\n        }\r\n        if (gMaterial.emissiveFactor) {\r\n            mat.emissiveFactor = vec3.fromValues.apply(undefined, gMaterial.emissiveFactor);\r\n        }\r\n\r\n        if (gMaterial.alphaCutoff !== undefined) { mat.alphaCutoff = gMaterial.alphaCutoff; }\r\n        if (gMaterial.alphaMode) {\r\n            mat.alphaMode = (AlphaMode as any)[gMaterial.alphaMode];\r\n        }\r\n\r\n        if (gMaterial.doubleSided !== undefined) { mat.doubleSided = gMaterial.doubleSided; }\r\n\r\n        await Promise.all((Object as any).values(texPromises));\r\n        for (const key in texPromises) {\r\n            (mat as any)[key] = await texPromises[key]; // actually synchronous due to Promise.all above\r\n        }\r\n\r\n        return mat;\r\n    }\r\n\r\n    static async loadTexture(texInfo: GLTF.TextureInfo | GLTF.MaterialNormalTextureInfo,\r\n        asset: Asset, identifier: string): Promise<Texture2> {\r\n        const gl = asset.context.gl;\r\n        const gltf = asset.gAsset.gltf;\r\n\r\n        if (asset.textures[texInfo.index]) {\r\n            return asset.textures[texInfo.index];\r\n        }\r\n\r\n        const texture = gltf.textures![texInfo.index];\r\n\r\n        // NOTE: spec allows texture.source to be undefined, unclear why\r\n        const image = await asset.gAsset.imageData.get(texture.source!);\r\n        // spec: when undefined, a sampler with repeat wrapping and auto filtering should be used.\r\n        const sampler: GLTF.Sampler = texture.sampler !== undefined ?\r\n            gltf.samplers![texture.sampler] :\r\n            {};\r\n\r\n        const tex2 = new Texture2(asset.context, identifier);\r\n        tex2.initialize(image.width, image.height, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE);\r\n        tex2.wrap(sampler.wrapS || gl.REPEAT, sampler.wrapT || gl.REPEAT, true, false);\r\n\r\n        // **Default Filtering Implementation Note:** When filtering options are defined,\r\n        // runtime must use them. Otherwise, it is free to adapt filtering to performance or quality goals.\r\n        const mag = sampler.magFilter || gl.LINEAR;\r\n        const min = sampler.minFilter || gl.LINEAR_MIPMAP_LINEAR;\r\n        tex2.filter(mag, min, false, false);\r\n\r\n        tex2.data(image, false, false);\r\n\r\n        // **Mipmapping Implementation Note**: When a sampler's minification filter (`minFilter`)\r\n        // uses mipmapping (`NEAREST_MIPMAP_NEAREST`, `NEAREST_MIPMAP_LINEAR`, `LINEAR_MIPMAP_NEAREST`,\r\n        // or `LINEAR_MIPMAP_LINEAR`), any texture referencing the sampler needs to have mipmaps,\r\n        // e.g., by calling GL's `generateMipmap()` function.\r\n        const mipMaps =\r\n            min === gl.LINEAR_MIPMAP_LINEAR ||\r\n            min === gl.LINEAR_MIPMAP_NEAREST ||\r\n            min === gl.NEAREST_MIPMAP_LINEAR ||\r\n            min === gl.NEAREST_MIPMAP_NEAREST;\r\n        if (mipMaps) {\r\n            // TODO!!: fails on WebGL1 for NPOT textures\r\n            gl.generateMipmap(gl.TEXTURE_2D);\r\n        }\r\n\r\n        // TODO!!: NPOT handling (hint: three.js resizes by rendering the into a 2D canvas...)\r\n        // **Non-Power-Of-Two Texture Implementation Note**: glTF does not guarantee that a texture's\r\n        // dimensions are a power-of-two.  At runtime, if a texture's width or height is not a\r\n        // power-of-two, the texture needs to be resized so its dimensions are powers-of-two if the\r\n        // `sampler` the texture references\r\n        // * Has a wrapping mode (either `wrapS` or `wrapT`) equal to `REPEAT` or `MIRRORED_REPEAT`, or\r\n        // * Has a minification filter (`minFilter`) that uses mipmapping (`NEAREST_MIPMAP_NEAREST`, \\\\\r\n        //   `NEAREST_MIPMAP_LINEAR`, `LINEAR_MIPMAP_NEAREST`, or `LINEAR_MIPMAP_LINEAR`).\r\n\r\n        tex2.unbind();\r\n\r\n        asset.textures[texInfo.index] = tex2;\r\n\r\n        return tex2;\r\n    }\r\n\r\n    constructor(context: Context) {\r\n        this.context = context;\r\n        const gl = this.context.gl;\r\n\r\n        this.emptyTexture = new Texture2(this.context, 'emptyTexture');\r\n        this.emptyTexture.initialize(1, 1, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE);\r\n    }\r\n\r\n    get shaderFlags(): ShaderFlags {\r\n        let flags = 0;\r\n        if (this.baseColorTexture) { flags |= ShaderFlags.HAS_BASECOLORMAP; }\r\n        if (this.normalTexture) { flags |= ShaderFlags.HAS_NORMALMAP; }\r\n        if (this.emissiveTexture) { flags |= ShaderFlags.HAS_EMISSIVEMAP; }\r\n        if (this.metallicRoughnessTexture) { flags |= ShaderFlags.HAS_METALROUGHNESSMAP; }\r\n        if (this.occlusionTexture) { flags |= ShaderFlags.HAS_OCCLUSIONMAP; }\r\n\r\n        return flags;\r\n    }\r\n\r\n    bind(shader: PbrShader) {\r\n        const gl = this.context.gl;\r\n        const uniforms = shader.uniforms;\r\n\r\n        if (this.doubleSided) {\r\n            gl.disable(gl.CULL_FACE);\r\n        } else {\r\n            gl.enable(gl.CULL_FACE);\r\n        }\r\n\r\n        if (this.alphaMode !== AlphaMode.OPAQUE) {\r\n            // BLEND + MASK\r\n            gl.enable(gl.BLEND);\r\n            gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n            gl.uniform1f(uniforms.u_AlphaBlend, 1.0);\r\n\r\n            if (this.alphaMode === AlphaMode.MASK) {\r\n                gl.uniform1f(uniforms.u_AlphaCutoff, this.alphaCutoff);\r\n            }\r\n        }\r\n\r\n        // NOTE: for sampler numbers, see also PbrShader constructor\r\n        gl.uniform4fv(uniforms.u_BaseColorFactor!, this.baseColorFactor);\r\n        if (this.baseColorTexture) {\r\n            this.baseColorTexture.bind(gl.TEXTURE0);\r\n            gl.uniform1i(uniforms.u_BaseColorTexCoord, this.baseColorTexCoord);\r\n        } else {\r\n            this.emptyTexture.bind(gl.TEXTURE0);\r\n        }\r\n        if (this.normalTexture) {\r\n            this.normalTexture.bind(gl.TEXTURE1);\r\n            gl.uniform1i(uniforms.u_NormalTexCoord, this.normalTexCoord);\r\n            gl.uniform1f(uniforms.u_NormalScale, this.normalScale);\r\n        } else {\r\n            this.emptyTexture.bind(gl.TEXTURE1);\r\n        }\r\n        if (this.emissiveTexture) {\r\n            this.emissiveTexture.bind(gl.TEXTURE2);\r\n            gl.uniform1i(uniforms.u_EmissiveTexCoord, this.emissiveTexCoord);\r\n            gl.uniform3fv(uniforms.u_EmissiveFactor!, this.emissiveFactor);\r\n        } else {\r\n            this.emptyTexture.bind(gl.TEXTURE2);\r\n        }\r\n        if (this.metallicRoughnessTexture) {\r\n            this.metallicRoughnessTexture.bind(gl.TEXTURE3);\r\n            gl.uniform1i(uniforms.u_MetallicRoughnessTexCoord, this.metallicRoughnessTexCoord);\r\n        } else {\r\n            this.emptyTexture.bind(gl.TEXTURE3);\r\n        }\r\n        gl.uniform2f(uniforms.u_MetallicRoughnessValues, this.metallicFactor, this.roughnessFactor);\r\n        if (this.occlusionTexture) {\r\n            this.occlusionTexture.bind(gl.TEXTURE4);\r\n            gl.uniform1i(uniforms.u_OcclusionTexCoord, this.occlusionTexCoord);\r\n            gl.uniform1f(uniforms.u_OcclusionStrength, this.occlusionStrength);\r\n        } else {\r\n            this.emptyTexture.bind(gl.TEXTURE4);\r\n        }\r\n    }\r\n\r\n    unbind(shader: PbrShader) {\r\n        const gl = this.context.gl;\r\n        if (this.alphaMode !== AlphaMode.OPAQUE) {\r\n            gl.disable(gl.BLEND);\r\n            gl.uniform1f(shader.uniforms.u_AlphaBlend, 0.0);\r\n            if (this.alphaMode === AlphaMode.MASK) {\r\n                gl.uniform1f(shader.uniforms.u_AlphaCutoff, 0);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Context, Program, Shader } from 'webgl-operate';\r\n\r\n/** Standard vertex attrib locations for all semantics in the spec (for WebGL2) */\r\nexport const ATTRIB_LOCATIONS: { [semantic: string]: number } = {\r\n    POSITION: 0,\r\n    NORMAL: 1,\r\n    TANGENT: 2,\r\n    TEXCOORD_0: 3,\r\n    TEXCOORD_1: 4,\r\n    COLOR_0: 5,\r\n    JOINTS_0: 6,\r\n    WEIGHTS_0: 7,\r\n};\r\n\r\n/**\r\n * Converts a GLTF attribute semantic to the corresponding attribute\r\n * in the shader\r\n */\r\nexport function attribName(semantic: string): string {\r\n    return `a_${semantic.toLowerCase()}`;\r\n}\r\n\r\nexport enum ShaderFlags {\r\n    // vertex shader + fragment shader\r\n    HAS_NORMALS = 1,\r\n    HAS_TANGENTS = 1 << 1,\r\n    HAS_UV = 1 << 2,\r\n    HAS_COLORS = 1 << 3,\r\n\r\n    // fragment shader only\r\n    USE_IBL = 1 << 4,\r\n    HAS_BASECOLORMAP = 1 << 5,\r\n    HAS_NORMALMAP = 1 << 6,\r\n    HAS_EMISSIVEMAP = 1 << 7,\r\n    HAS_METALROUGHNESSMAP = 1 << 8,\r\n    HAS_OCCLUSIONMAP = 1 << 9,\r\n    USE_TEX_LOD = 1 << 10,\r\n}\r\n\r\n// tslint:disable:variable-name\r\n// tslint:disable:no-null-keyword\r\nclass PbrUniformLocations {\r\n    u_ViewProjection: WebGLUniformLocation | null = null;\r\n    u_ModelMatrix: WebGLUniformLocation | null = null;\r\n    u_NormalMatrix: WebGLUniformLocation | null = null;\r\n    u_Camera: WebGLUniformLocation | null = null;\r\n\r\n    u_LightDirection: WebGLUniformLocation | null = null;\r\n    u_LightColor: WebGLUniformLocation | null = null;\r\n\r\n    // TODO!?: ambient light\r\n    // u_AmbientLightColor: WebGLUniformLocation | null = null;\r\n    // u_AmbientLightIntensity: WebGLUniformLocation | null = null;\r\n\r\n    // TODO!: set when integrating IBL (unused now)\r\n    // u_DiffuseEnvSampler: WebGLUniformLocation | null = null;\r\n    // u_SpecularEnvSampler: WebGLUniformLocation | null = null;\r\n    // u_brdfLUT: WebGLUniformLocation | null = null;\r\n\r\n    ///\r\n\r\n    u_BaseColorSampler: WebGLUniformLocation | null = null;\r\n    u_BaseColorTexCoord: WebGLUniformLocation | null = null;\r\n    u_BaseColorFactor: WebGLUniformLocation | null = null;\r\n\r\n    u_NormalSampler: WebGLUniformLocation | null = null;\r\n    u_NormalTexCoord: WebGLUniformLocation | null = null;\r\n    u_NormalScale: WebGLUniformLocation | null = null;\r\n\r\n    u_EmissiveSampler: WebGLUniformLocation | null = null;\r\n    u_EmissiveTexCoord: WebGLUniformLocation | null = null;\r\n    u_EmissiveFactor: WebGLUniformLocation | null = null;\r\n\r\n    u_MetallicRoughnessSampler: WebGLUniformLocation | null = null;\r\n    u_MetallicRoughnessTexCoord: WebGLUniformLocation | null = null;\r\n    u_MetallicRoughnessValues: WebGLUniformLocation | null = null;\r\n\r\n    u_OcclusionSampler: WebGLUniformLocation | null = null;\r\n    u_OcclusionTexCoord: WebGLUniformLocation | null = null;\r\n    u_OcclusionStrength: WebGLUniformLocation | null = null;\r\n\r\n    u_AlphaBlend: WebGLUniformLocation | null = null;\r\n    u_AlphaCutoff: WebGLUniformLocation | null = null;\r\n\r\n    u_PbrFlags: WebGLUniformLocation | null = null;\r\n\r\n    // TODO!: use/remove debugging uniforms\r\n    // debugging flags used for shader output of intermediate PBR variables\r\n    // u_ScaleDiffBaseMR: WebGLUniformLocation | null = null;\r\n    // u_ScaleFGDSpec: WebGLUniformLocation | null = null;\r\n    // u_ScaleIBLAmbient: WebGLUniformLocation | null = null;\r\n\r\n    constructor(program: Program) {\r\n        for (const uniform in this) {\r\n            (this as any)[uniform] = program.uniform(uniform);\r\n            if (this[uniform] === null && !uniform.endsWith('Sampler')) {\r\n                console.warn('Failed to get uniform location for ' + uniform);\r\n            }\r\n        }\r\n\r\n        program.bind();\r\n        const gl = program.context.gl;\r\n        // TODO!: chrome warnings 'there is no texture bound to the unit 1' mostly disappear without the uniform calls..\r\n        gl.uniform1i(this.u_BaseColorSampler, 0);\r\n        gl.uniform1i(this.u_NormalSampler, 1);\r\n        gl.uniform1i(this.u_EmissiveSampler, 2);\r\n        gl.uniform1i(this.u_MetallicRoughnessSampler, 3);\r\n        gl.uniform1i(this.u_OcclusionSampler, 4);\r\n\r\n        gl.uniform3f(this.u_LightColor, 4.0, 4.0, 4.0);\r\n        gl.uniform3f(this.u_LightDirection, 0.0, 0.5, 0.5);\r\n\r\n        // gl.uniform3f(this.u_AmbientLightColor, 1.0, 1.0, 1.0);\r\n        // gl.uniformf(this.u_AmbientLightIntensity, 0.2);\r\n    }\r\n}\r\n\r\n// tslint:disable:max-classes-per-file\r\nexport class PbrShader {\r\n    program: Program;\r\n    /**\r\n     * WebGL Attrib locations. Equal to `ATTRIB_LOCATIONS` for WebGL2.\r\n     */\r\n    attribLocations: { [attr: string]: number } = {};\r\n\r\n    uniforms: PbrUniformLocations;\r\n\r\n    constructor(context: Context) {\r\n        const gl = context.gl;\r\n\r\n        if (context.isWebGL1) {\r\n            if (context.supportsShaderTextureLOD) {\r\n                const _ = context.shaderTextureLOD;\r\n            } else {\r\n                throw new Error(`PBR shader needs unsupported extension GL_EXT_shader_texture_lod`);\r\n            }\r\n            if (context.supportsStandardDerivatives) {\r\n                const _ = context.standardDerivatives;\r\n            } else {\r\n                throw new Error(`PBR shader needs unsupported extension GL_OES_standard_derivatives`);\r\n            }\r\n        }\r\n\r\n        const vert = new Shader(context, gl.VERTEX_SHADER, 'pbr-vert.glsl');\r\n        vert.initialize(require('./shaders/pbr-vert.glsl'));\r\n        const frag = new Shader(context, gl.FRAGMENT_SHADER, 'pbr-frag.glsl');\r\n        frag.initialize(require('./shaders/pbr-frag.glsl'));\r\n        this.program = new Program(context);\r\n        this.program.initialize([vert, frag]);\r\n\r\n        if (context.isWebGL2) {\r\n            Object.assign(this.attribLocations, ATTRIB_LOCATIONS);\r\n        } else { // WebGL1\r\n            for (const semantic of Object.keys(ATTRIB_LOCATIONS)) {\r\n                const attrib = attribName(semantic);\r\n                this.attribLocations[semantic] = this.program.attribute(attrib);\r\n            }\r\n        }\r\n\r\n        this.uniforms = new PbrUniformLocations(this.program);\r\n    }\r\n\r\n    bind() {\r\n        this.program.bind();\r\n    }\r\n    unbind() {\r\n        this.program.unbind();\r\n    }\r\n\r\n    uninitialize() {\r\n        this.program.uninitialize();\r\n    }\r\n}\r\n","module.exports=function(e){var t={};function r(i){if(t[i])return t[i].exports;var s=t[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var s in e)r.d(i,s,function(t){return e[t]}.bind(null,s));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=7)}([function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});t.LoadingManager=class{constructor(){this.urlModifier=void 0,this.onStart=void 0,this.onProgress=void 0,this.onLoad=void 0,this.onError=void 0,this.isLoading=!1,this.itemsLoaded=0,this.itemsTotal=0}itemStart(e){this.itemsTotal++,!this.isLoading&&this.onStart&&this.onStart(e,this.itemsLoaded,this.itemsTotal),this.isLoading=!0}itemEnd(e){this.itemsLoaded++,this.onProgress&&this.onProgress(e,this.itemsLoaded,this.itemsTotal),this.itemsLoaded===this.itemsTotal&&(this.isLoading=!1,this.onLoad&&this.onLoad())}itemError(e){this.onError&&this.onError(e)}resolveURL(e){return this.urlModifier?this.urlModifier(e):e}}},function(e,t,r){\"use strict\";var i=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))(function(s,n){function o(e){try{u(i.next(e))}catch(e){n(e)}}function a(e){try{u(i.throw(e))}catch(e){n(e)}}function u(e){e.done?s(e.value):new r(function(t){t(e.value)}).then(o,a)}u((i=i.apply(e,t||[])).next())})};Object.defineProperty(t,\"__esModule\",{value:!0});const s=r(3),n=r(0);t.GLTF_COMPONENT_TYPE_ARRAYS={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},t.GLTF_ELEMENTS_PER_TYPE={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16};t.GltfAsset=class{constructor(e,t,r,i=new n.LoadingManager){this.gltf=e,this.glbData=r,this.bufferData=new o(this,t,i),this.imageData=new a(this,t,i)}bufferViewData(e){return i(this,void 0,void 0,function*(){if(!this.gltf.bufferViews)throw new Error(\"No buffer views found.\");const t=this.gltf.bufferViews[e],r=yield this.bufferData.get(t.buffer),i=t.byteLength||0,s=t.byteOffset||0,n=r.buffer,o=r.byteOffset;return new Uint8Array(n,o+s,i)})}accessorData(e){return i(this,void 0,void 0,function*(){if(!this.gltf.accessors)throw new Error(\"No accessors views found.\");const r=this.gltf.accessors[e],i=t.GLTF_ELEMENTS_PER_TYPE[r.type];let s;if(void 0!==r.bufferView)s=yield this.bufferViewData(r.bufferView);else{const e=t.GLTF_COMPONENT_TYPE_ARRAYS[r.componentType].BYTES_PER_ELEMENT*i*r.count;s=new Uint8Array(e)}if(r.sparse){const{count:e,indices:n,values:o}=r.sparse;let a=t.GLTF_COMPONENT_TYPE_ARRAYS[n.componentType],u=yield this.bufferViewData(n.bufferView);const f=new a(u.buffer,u.byteOffset+(n.byteOffset||0),e);a=t.GLTF_COMPONENT_TYPE_ARRAYS[r.componentType],u=yield this.bufferViewData(o.bufferView);const c=new a((yield this.bufferViewData(o.bufferView)).buffer,u.byteOffset+(o.byteOffset||0),e*i);r.bufferView&&(s=new Uint8Array(s));const h=new t.GLTF_COMPONENT_TYPE_ARRAYS[r.componentType](s.buffer);for(let t=0;t<e;t++)for(let e=0;e<i;e++)h[i*f[t]+e]=c[i*t+e]}return s})}preFetchAll(){return i(this,void 0,void 0,function*(){return Promise.all([this.bufferData.preFetchAll(),this.imageData.preFetchAll()])})}};class o{constructor(e,t,r){this.bufferCache=[],this.asset=e,this.baseUri=t,this.manager=r,this.loader=new s.FileLoader(r),this.loader.responseType=\"arraybuffer\"}get(e){return i(this,void 0,void 0,function*(){if(void 0!==this.bufferCache[e])return this.bufferCache[e];const t=this.asset.gltf;if(!t.buffers)throw new Error(\"No buffers found.\");const r=t.buffers[e];if(void 0===r.uri){if(0!==e)throw new Error(\"GLB container is required to be the first buffer\");if(void 0===this.asset.glbData)throw new Error(\"invalid gltf: buffer has no uri nor is there a GLB buffer\");return this.asset.glbData.binaryChunk}const i=u(r.uri,this.baseUri),s=yield this.loader.load(i),n=new Uint8Array(s);return this.bufferCache[e]=n,n})}preFetchAll(){return i(this,void 0,void 0,function*(){const e=this.asset.gltf.buffers;return e?Promise.all(e.map((e,t)=>this.get(t))):[]})}}t.BufferData=o;class a{constructor(e,t,r){this.crossOrigin=\"anonymous\",this.imageCache=[],this.asset=e,this.baseUri=t,this.manager=r}get(e){return i(this,void 0,void 0,function*(){if(void 0!==this.imageCache[e])return this.imageCache[e];const t=this.asset.gltf;if(!t.images)throw new Error(\"No images found.\");const r=t.images[e];let i,s=!1;if(void 0!==r.bufferView){const e=yield this.asset.bufferViewData(r.bufferView);s=!0;const t=new Blob([e],{type:r.mimeType});i=URL.createObjectURL(t)}else{if(void 0===r.uri)throw new Error(\"Invalid glTF: image must either have a `uri` or a `bufferView`\");i=this.manager.resolveURL(u(r.uri,this.baseUri))}const n=new Image;return n.crossOrigin=this.crossOrigin,new Promise((t,r)=>{n.onerror=(()=>{r(`Failed to load ${i}`),this.manager.itemEnd(i),this.manager.itemError(i)}),n.onload=(()=>{s&&URL.revokeObjectURL(i),this.imageCache[e]=n,t(n),this.manager.itemEnd(i)}),n.src=i,this.manager.itemStart(i)})})}preFetchAll(){return i(this,void 0,void 0,function*(){const e=this.asset.gltf.images;return e?Promise.all(e.map((e,t)=>this.get(t))):[]})}}function u(e,t){return\"string\"!=typeof e||\"\"===e?\"\":/^(https?:)?\\/\\//i.test(e)?e:/^data:.*,.*$/i.test(e)?e:/^blob:.*$/i.test(e)?e:t+e}t.ImageData=a,t.resolveURL=u},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});t.LoaderUtils=class{static decodeText(e){if(\"undefined\"!=typeof TextDecoder)return(new TextDecoder).decode(e);let t=\"\";for(const r of e)t+=String.fromCharCode(r);return decodeURIComponent(escape(t))}static extractUrlBase(e){const t=e.split(\"/\");return 1===t.length?\"./\":(t.pop(),t.join(\"/\")+\"/\")}}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});t.FileLoader=class{constructor(e){this.runningRequests={},this.manager=e}load(e,t){if(void 0!==this.path&&(e=this.path+e),e=this.manager.resolveURL(e),this.runningRequests[e])return this.runningRequests[e];const r=new Promise((r,i)=>{const s=new XMLHttpRequest;s.open(\"GET\",e,!0);const n=this;s.onload=function(t){const o=this.response;0===this.status?(console.warn(\"FileLoader: HTTP Status 0 received.\"),r(o),n.manager.itemEnd(e)):200===this.status?(r(o),n.manager.itemEnd(e)):(i({url:e,status:this.status,statusText:s.statusText}),n.manager.itemEnd(e),n.manager.itemError(e)),delete n.runningRequests[e]},s.onprogress=(e=>{t&&t(e)}),s.onerror=function(t){i({url:e,status:this.status,statusText:s.statusText}),n.manager.itemEnd(e),n.manager.itemError(e),delete n.runningRequests[e]},this.responseType&&(s.responseType=this.responseType),this.withCredentials&&(s.withCredentials=this.withCredentials),this.mimeType&&s.overrideMimeType&&s.overrideMimeType(void 0!==this.mimeType?this.mimeType:\"text/plain\");for(const e in this.requestHeaders)s.setRequestHeader(e,this.requestHeaders[e]);s.send(null),this.manager.itemStart(e)});return this.runningRequests[e]=r,r}setRequestHeader(e,t){return this.requestHeaders[e]=t,this}}},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0})},function(e,t,r){\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0});const i=r(2);t.BINARY_HEADER_MAGIC=\"glTF\";const s=12,n={JSON:1313821514,BIN:5130562};t.GLTFBinaryData=class{constructor(e){const r=new DataView(e,0,s),o=i.LoaderUtils.decodeText(new Uint8Array(e,0,4)),a=r.getUint32(4,!0);if(r.getUint32(8,!0),o!==t.BINARY_HEADER_MAGIC)throw new Error(\"Unsupported glTF-Binary header.\");if(a<2)throw new Error(\"Unsupported legacy binary file detected.\");const u=new DataView(e,s);let f=0;for(;f<u.byteLength;){const t=u.getUint32(f,!0);f+=4;const r=u.getUint32(f,!0);if(f+=4,r===n.JSON){const r=new Uint8Array(e,s+f,t);this.json=i.LoaderUtils.decodeText(r)}else if(r===n.BIN){const r=s+f;this.binaryChunk=new Uint8Array(e,r,t)}f+=t}if(null===this.json)throw new Error(\"glTF-Binary: JSON content not found.\")}}},function(e,t,r){\"use strict\";var i=this&&this.__awaiter||function(e,t,r,i){return new(r||(r=Promise))(function(s,n){function o(e){try{u(i.next(e))}catch(e){n(e)}}function a(e){try{u(i.throw(e))}catch(e){n(e)}}function u(e){e.done?s(e.value):new r(function(t){t(e.value)}).then(o,a)}u((i=i.apply(e,t||[])).next())})};function s(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}Object.defineProperty(t,\"__esModule\",{value:!0});const n=r(3),o=r(5),a=r(1),u=r(2),f=r(0),c=r(4);t.gltf=c,s(r(1)),s(r(0));t.GltfLoader=class{constructor(e){this.manager=e||new f.LoadingManager}load(e,t){return i(this,void 0,void 0,function*(){const r=u.LoaderUtils.extractUrlBase(e),i=new n.FileLoader(this.manager);i.responseType=\"arraybuffer\";const s=yield i.load(e,t);return yield this.parse(s,r)})}loadFromFiles(e){return i(this,void 0,void 0,function*(){let t,r;for(const[i,s]of e)s.name.match(/\\.(gltf|glb)$/)&&(t=s,r=i.replace(s.name,\"\"));if(!t)throw new Error(\"No .gltf or .glb asset found.\");const i=\"string\"==typeof t?t:URL.createObjectURL(t),s=u.LoaderUtils.extractUrlBase(i),n=[];this.manager.urlModifier=(t=>{const i=r+t.replace(s,\"\").replace(/^(\\.?\\/)/,\"\");if(e.has(i)){const t=e.get(i),r=URL.createObjectURL(t);return n.push(r),r}return t});const o=yield this.load(i);return yield o.preFetchAll(),URL.revokeObjectURL(i),n.forEach(URL.revokeObjectURL),o})}parse(e,t){return i(this,void 0,void 0,function*(){let r,i=void 0;r=\"string\"==typeof e?e:u.LoaderUtils.decodeText(new Uint8Array(e,0,4))===o.BINARY_HEADER_MAGIC?(i=new o.GLTFBinaryData(e)).json:u.LoaderUtils.decodeText(new Uint8Array(e));const s=JSON.parse(r);if(void 0===s.asset||s.asset.version[0]<2)throw new Error(\"Unsupported asset. glTF versions >=2.0 are supported.\");return new a.GltfAsset(s,t,i,this.manager)})}}},function(e,t,r){e.exports=r(6)}]);\n//# sourceMappingURL=gltf-loader.js.map","import { GltfAsset, GltfLoader } from 'gltf-loader-ts';\r\nimport * as gloperate from 'webgl-operate';\r\n\r\nimport { Canvas, XRController } from 'webgl-operate';\r\nimport { XRPresentationContext } from 'webgl-operate/lib/webxr';\r\nimport { Asset } from '../gltf/asset';\r\nimport { WebXRRenderer } from './webxrrenderer';\r\n\r\n// tslint:disable:no-console\r\n\r\nasync function loadScene(gAsset: GltfAsset, renderer: WebXRRenderer) {\r\n    console.time('asset.getScene');\r\n    const asset = new Asset(gAsset, renderer.context);\r\n    const scene = await asset.getScene();\r\n    console.timeEnd('asset.getScene');\r\n    renderer.scene = scene;\r\n}\r\n\r\nlet gltfAsset: GltfAsset;\r\n\r\nasync function loadGltf(loader: GltfLoader, uri: string, renderer: WebXRRenderer) {\r\n    try {\r\n        console.time('GltfLoader.load');\r\n        gltfAsset = await loader.load(uri);\r\n        console.timeEnd('GltfLoader.load');\r\n        console.time('asset.preFetchAll');\r\n        await gltfAsset.preFetchAll();\r\n        console.timeEnd('asset.preFetchAll');\r\n        loadScene(gltfAsset, renderer);\r\n    } catch (e) {\r\n        console.error(e);\r\n        if (typeof e === 'string') {\r\n            alert(e);\r\n        } else {\r\n            const detail = e.status ? ` (${e.status} ${e.statusText} ${e.url})` : '';\r\n            alert(`Error loading glTF` + detail);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getQueryParam(param: string): string | undefined {\r\n    const re = new RegExp(`${param}=([^&]+)`);\r\n    const match = document.location.search.match(re);\r\n    if (match) {\r\n        return match[1];\r\n    }\r\n}\r\n\r\nconst SAMPLE_ASSETS_BASE = 'https://raw.githubusercontent.com/immersive-web/webxr-samples/master/media/';\r\nconst SPACE_MODEL = SAMPLE_ASSETS_BASE + 'gltf/space/space.gltf';\r\nconst CONTROLLER_MODEL = SAMPLE_ASSETS_BASE + 'gltf/controller/controller.gltf';\r\n\r\nlet renderer: WebXRRenderer;\r\nfunction initializeRenderer(canvas: Canvas) {\r\n    renderer = new WebXRRenderer();\r\n    canvas.renderer = renderer;\r\n\r\n    if (gltfAsset) {\r\n        // Asset has been loaded before - just need to re-create gl resources\r\n        loadScene(gltfAsset, renderer);\r\n    } else {\r\n        const loader = new GltfLoader();\r\n        // tslint:disable-next-line:max-line-length\r\n        loadGltf(loader, SPACE_MODEL, renderer);\r\n    }\r\n}\r\n\r\nfunction initFallback() {\r\n    const canvas = new gloperate.Canvas('example-canvas', { depth: true });\r\n    initializeRenderer(canvas);\r\n}\r\n\r\ndeclare var WebXRPolyfill: any;\r\ndeclare var WebXRVersionShim: any;\r\n\r\nasync function onload() {\r\n    if ((getQueryParam('allowPolyfill') || '1') === '1') {\r\n        const polyfill = new WebXRPolyfill();\r\n    }\r\n    // Apply the version shim after the polyfill is instantiated, to ensure\r\n    // that the polyfill also gets patched if necessary.\r\n    const versionShim = new WebXRVersionShim();\r\n\r\n    const messageEl = document.getElementById('message')!;\r\n    function message(msg: string, color: 'red' | 'black' | 'green' = 'red') {\r\n        messageEl.innerHTML = msg;\r\n        messageEl.style.color = color;\r\n    }\r\n    const xrButton = document.getElementById('xr-button') as HTMLButtonElement;\r\n\r\n    let xrc: XRController;\r\n    async function requestDevice(): Promise<boolean> {\r\n        try {\r\n            await xrc.requestDevice();\r\n            return true;\r\n        } catch (e) {\r\n            console.error(e);\r\n            message(e.message);\r\n            initFallback();\r\n            return false;\r\n        }\r\n    }\r\n\r\n    if (!XRController.supportsXR()) {\r\n        message('Your browser does not support WebXR.');\r\n        initFallback();\r\n        return;\r\n    }\r\n\r\n    type Mode = 'present' | 'mirror' | 'magic-window';\r\n    const mode = getQueryParam('mode') as Mode || 'magic-window';\r\n\r\n    if (mode === 'present') {\r\n        // This resembles the '1 - XR Presentation' example\r\n        // https://immersive-web.github.io/webxr-samples/xr-presentation.html\r\n\r\n        xrc = new gloperate.XRController({ immersive: true });\r\n        if (!await requestDevice()) {\r\n            return;\r\n        }\r\n    } else if (mode === 'mirror') {\r\n        // 2 - Mirroring\r\n        // https://immersive-web.github.io/webxr-samples/mirroring.html\r\n\r\n        xrc = new gloperate.XRController({ immersive: true });\r\n        if (!await requestDevice()) {\r\n            return;\r\n        }\r\n\r\n        const mirrorCanvas = document.getElementById('example-canvas') as HTMLCanvasElement;\r\n        const context = mirrorCanvas.getContext('xrpresent') as XRPresentationContext;\r\n        xrc.sessionCreationOptions.outputContext = context;\r\n    } else if (mode === 'magic-window') {\r\n        // 3 - Magic Window\r\n        // https://immersive-web.github.io/webxr-samples/magic-window.html\r\n\r\n        xrc = new gloperate.XRController({ immersive: false });\r\n        if (!await requestDevice()) {\r\n            return;\r\n        }\r\n\r\n        const magicWindowCanvas = document.getElementById('example-canvas') as HTMLCanvasElement;\r\n        const context = magicWindowCanvas.getContext('xrpresent') as XRPresentationContext;\r\n        xrc.sessionCreationOptions.outputContext = context;\r\n\r\n        // start non-immersive session and prepare for entering immersive session via button later\r\n        await xrc.requestSession();\r\n        initializeRenderer(xrc.canvas!);\r\n        xrc.sessionCreationOptions.immersive = true;\r\n    } else {\r\n        throw new Error('invalid mode');\r\n    }\r\n\r\n    if (!await xrc.supportsSession()) {\r\n        message('immersive session not supported.');\r\n    }\r\n    message('Ready.', 'green');\r\n    xrButton.disabled = false;\r\n\r\n    xrButton.onclick = async () => {\r\n        if (xrc.session && xrc.session.immersive) {\r\n            await xrc.endSession();\r\n            message('Ready.', 'green');\r\n            xrButton.innerHTML = 'Enter XR';\r\n        } else {\r\n            message('Requesting session...', 'black');\r\n            await xrc.requestSession();\r\n            message('Session active.', 'green');\r\n            xrButton.innerHTML = 'Exit XR';\r\n\r\n            initializeRenderer(xrc.canvas!);\r\n\r\n            xrc.session!.addEventListener('end', () => {\r\n                message('Ready.', 'green');\r\n                xrButton.innerHTML = 'Enter XR';\r\n            });\r\n\r\n            // TODO!!: subscribe to select, selectstart, selectend\r\n        }\r\n    };\r\n\r\n    // canvas.element.addEventListener('dblclick', () => gloperate.viewer.Fullscreen.toggle(canvas.element));\r\n    // canvas.element.addEventListener('touchstart', () => gloperate.viewer.Fullscreen.toggle(canvas.element));\r\n\r\n    // export variables\r\n    (window as any)['xrcontroller'] = xrc;\r\n}\r\n\r\nif (window.document.readyState === 'complete') {\r\n    onload();\r\n} else {\r\n    window.onload = onload;\r\n}\r\n","import { vec3 } from 'gl-matrix';\r\nimport { Camera, Context, Invalidate, MouseEventProvider, Navigation, XRRenderer, RenderView, FrameData } from 'webgl-operate';\r\n\r\nimport { XRInputPose } from 'webgl-operate/lib/webxr';\r\nimport { PbrShader } from '../gltf/pbrshader';\r\nimport { Scene } from '../gltf/scene';\r\n\r\nexport class WebXRRenderer extends XRRenderer {\r\n    private frameCount = 0;\r\n\r\n    protected pbrShader: PbrShader;\r\n\r\n    // Camera and navigation\r\n    protected _camera: Camera;\r\n    protected _navigation: Navigation;\r\n\r\n    protected _scene: Scene;\r\n    set scene(scene: Scene) {\r\n        if (this._scene) {\r\n            this._scene.uninitialize();\r\n        }\r\n        this._scene = scene;\r\n\r\n        this.setCameraFromBounds();\r\n\r\n        this.invalidate(true);\r\n    }\r\n\r\n    get context() {\r\n        return this._context;\r\n    }\r\n\r\n    protected onInitialize(\r\n        context: Context,\r\n        callback: Invalidate,\r\n        mouseEventProvider: MouseEventProvider): boolean {\r\n\r\n        const gl = this._context.gl;\r\n\r\n        this.pbrShader = new PbrShader(context);\r\n\r\n        // Initialize camera\r\n        this._camera = new Camera();\r\n        this._camera.center = vec3.fromValues(0.0, 0.0, 0.0);\r\n        this._camera.up = vec3.fromValues(0.0, 1.0, 0.0);\r\n        this._camera.eye = vec3.fromValues(0.0, 0.0, 3.0);\r\n        this._camera.near = 0.1;\r\n        this._camera.far = 20.0;\r\n\r\n        // Initialize navigation\r\n        this._navigation = new Navigation(callback, mouseEventProvider);\r\n        this._navigation.camera = this._camera;\r\n\r\n        gl.enable(gl.DEPTH_TEST);\r\n        gl.clearColor(0, 0, 0, 1);\r\n\r\n        return true;\r\n    }\r\n\r\n    protected onUninitialize(): void {\r\n        this._scene.uninitialize();\r\n        this.pbrShader.uninitialize();\r\n    }\r\n\r\n    // NOTE: this is ONLY called in fallback mode (when WebXR is not available)\r\n    protected onUpdate(): boolean {\r\n        const gl = this.context.gl;\r\n        // Resize\r\n        if (this._altered.frameSize) {\r\n            this._camera.viewport = [this._frameSize[0], this._frameSize[1]];\r\n            gl.viewport(0, 0, this._frameSize[0], this._frameSize[1]);\r\n        }\r\n        if (this._altered.canvasSize) {\r\n            this._camera.aspect = this._canvasSize[0] / this._canvasSize[1];\r\n        }\r\n\r\n        this._navigation.update();\r\n\r\n        // Reset state\r\n        const altered = this._altered.any ||\r\n            this._camera.altered;\r\n        this._altered.reset();\r\n        this._camera.altered = false;\r\n\r\n        // If anything has changed, render a new frame\r\n        return altered;\r\n    }\r\n\r\n    protected onFrame(frameNumber: number): void {\r\n        const gl = this._context.gl;\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n        this.pbrShader.bind();\r\n\r\n        // if (this.frameCount % 120 === 0) {\r\n        //     console.log(inputPoses);\r\n        // }\r\n\r\n        // fallback - plain WebGL + mouse-based navigation\r\n        gl.uniformMatrix4fv(this.pbrShader.uniforms.u_ViewProjection, false, this._camera.viewProjection);\r\n        gl.uniform3fv(this.pbrShader.uniforms.u_Camera, this._camera.eye);\r\n\r\n        if (this._scene) {\r\n            this._scene.draw(this.pbrShader);\r\n        }\r\n\r\n        this.pbrShader.unbind();\r\n        ++this.frameCount;\r\n    }\r\n\r\n    protected onXRFrame(frameData: FrameData) {\r\n        const gl = this._context.gl;\r\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n        if (!this._scene) {\r\n            return;\r\n        }\r\n\r\n        this.pbrShader.bind();\r\n\r\n        // TODO!: bind frameData.session.baseLayer.framebuffer here? (currently done in XRController)\r\n        const renderViews = frameData.renderViews;\r\n        if (renderViews.length === 1) {\r\n            // Optimization for the single-view case: bind once instead of for each primitive\r\n            // WebXR with a single view can happen for 'magic windows' and 'see-through' phone AR.\r\n            const view = renderViews[0];\r\n            const vp = view.viewport;\r\n            gl.viewport(vp.x, vp.y, vp.width, vp.height);\r\n\r\n            gl.uniformMatrix4fv(this.pbrShader.uniforms.u_ViewProjection, false, view.viewProjectionMatrix);\r\n            gl.uniform3fv(this.pbrShader.uniforms.u_Camera, view.cameraPosition);\r\n\r\n            this._scene.draw(this.pbrShader); // don't pass render views\r\n        } else {\r\n            this._scene.draw(this.pbrShader, renderViews);\r\n        }\r\n\r\n        this.pbrShader.unbind();\r\n        ++this.frameCount;\r\n    }\r\n\r\n    protected setCameraFromBounds() {\r\n        const bounds = this._scene.bounds;\r\n        const size = vec3.len(bounds.size);\r\n        const center = bounds.center;\r\n\r\n        this._camera.eye = vec3.fromValues(\r\n            center[0] + size / 1.5,\r\n            center[1] + size / 5.0,\r\n            center[2] + size / 1.5,\r\n        );\r\n        this._camera.center = center;\r\n        this._camera.far = size * 20;\r\n        this._camera.near = size / 100;\r\n    }\r\n}\r\n","import { Context, Texture2 } from 'webgl-operate';\r\n\r\nimport { GltfAsset } from 'gltf-loader-ts';\r\nimport { GlTfId } from 'gltf-loader-ts/lib/gltf';\r\nimport { Material } from './material';\r\nimport { Mesh } from './mesh';\r\nimport { Scene } from './scene';\r\n\r\n/** Base class holding references to shared entities */\r\nexport class Asset {\r\n    gAsset: GltfAsset;\r\n    context: Context;\r\n\r\n    scenes: Scene[] = [];\r\n    meshes: Mesh[] = [];\r\n    materials: Material[] = [];\r\n    textures: Texture2[] = [];\r\n\r\n    constructor(gAsset: GltfAsset, context: Context) {\r\n        this.gAsset = gAsset;\r\n        this.context = context;\r\n    }\r\n\r\n    /**\r\n     * Get the scene with the given index or the default scene if none given.\r\n     * If there is no default scene, load the first one.\r\n     */\r\n    async getScene(index?: GlTfId) {\r\n        index = index !== undefined ? index : (this.gAsset.gltf.scene || 0);\r\n        if (this.scenes[index]) { return this.scenes[index]; }\r\n        const gScene = this.gAsset.gltf.scenes![index];\r\n        this.scenes[index] = await Scene.fromGltf(gScene, this);\r\n        return this.scenes[index];\r\n    }\r\n\r\n    /** Get mesh - either from cache or parse from Gltf */\r\n    async getMesh(index: GlTfId): Promise<Mesh> {\r\n        if (this.meshes[index]) { return this.meshes[index]; }\r\n        this.meshes[index] = await Mesh.fromGltf(index, this);\r\n        return this.meshes[index];\r\n    }\r\n\r\n    /** Get material - either from cache or parse from Gltf */\r\n    async getMaterial(index: GlTfId): Promise<Material> {\r\n        if (this.materials[index]) { return this.materials[index]; }\r\n        this.materials[index] = await Material.fromGltf(index, this);\r\n        return this.materials[index];\r\n    }\r\n}\r\n","module.exports = \"// Originally taken from https://github.com/KhronosGroup/glTF-WebGL-PBR\\r\\n// Commit c28b5b8f5a83380857ad8395ac5302594ecc13ae\\r\\n\\r\\n\\r\\n#if __VERSION__ == 100\\r\\n#else \\r\\n    #define varying out\\r\\n#endif\\r\\n\\r\\n\\r\\n#if __VERSION__ == 100\\r\\n  attribute vec4 a_position;\\r\\n  attribute vec4 a_normal;\\r\\n  attribute vec4 a_tangent;\\r\\n  attribute vec2 a_texcoord_0;\\r\\n  attribute vec2 a_texcoord_1;\\r\\n  attribute vec4 a_color;\\r\\n#else\\r\\n    layout (location = 0) in vec4 a_position;\\r\\n    layout (location = 1) in vec3 a_normal;\\r\\n    layout (location = 2) in vec4 a_tangent;\\r\\n    layout (location = 3) in vec2 a_texcoord_0;\\r\\n    layout (location = 4) in vec2 a_texcoord_1;\\r\\n    layout (location = 5) in vec4 a_color;\\r\\n#endif\\r\\n\\r\\n// TODO!!!: WebGL1 support (int/bit operators...)\\r\\n// vertex shader + fragment shader\\r\\nconst int HAS_NORMALS           = 1;\\r\\nconst int HAS_TANGENTS          = 1 << 1;\\r\\nconst int HAS_UV                = 1 << 2;\\r\\nconst int HAS_COLORS            = 1 << 3;\\r\\n\\r\\nuniform mediump int u_PbrFlags;\\r\\nuniform mat4 u_ModelMatrix;\\r\\nuniform mat4 u_ViewProjection;\\r\\nuniform mat3 u_NormalMatrix;\\r\\n\\r\\nvarying vec3 v_Position;\\r\\nvarying vec2 v_UV[2];\\r\\nvarying vec4 v_Color;\\r\\n\\r\\nvarying mat3 v_TBN;\\r\\nvarying vec3 v_Normal;\\r\\n\\r\\nbool checkFlag(int flag) {\\r\\n    return (u_PbrFlags & flag) == flag;\\r\\n}\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n  vec4 pos = u_ModelMatrix * a_position;\\r\\n  v_Position = vec3(pos.xyz) / pos.w;\\r\\n\\r\\n  if (checkFlag(HAS_NORMALS)) {\\r\\n  if (checkFlag(HAS_TANGENTS)) {\\r\\n  vec3 normalW = normalize(vec3(u_NormalMatrix * a_normal));\\r\\n  vec3 tangentW = normalize(vec3(u_ModelMatrix * vec4(a_tangent.xyz, 0.0)));\\r\\n  vec3 bitangentW = cross(normalW, tangentW) * a_tangent.w;\\r\\n  v_TBN = mat3(tangentW, bitangentW, normalW);\\r\\n  } else { // HAS_TANGENTS != 1\\r\\n  v_Normal = normalize(vec3(u_ModelMatrix * vec4(a_normal.xyz, 0.0)));\\r\\n  }\\r\\n  }\\r\\n\\r\\n  if (checkFlag(HAS_UV)) {\\r\\n    v_UV[0] = a_texcoord_0;\\r\\n    v_UV[1] = a_texcoord_1;\\r\\n  }\\r\\n  else {\\r\\n    v_UV[0] = vec2(0., 0.);\\r\\n    v_UV[1] = vec2(0., 0.);\\r\\n  }\\r\\n\\r\\n  if (checkFlag(HAS_COLORS))\\r\\n  v_Color = a_color;\\r\\n  else\\r\\n  v_Color = vec4(1.0);\\r\\n\\r\\n  gl_Position = u_ViewProjection * u_ModelMatrix * a_position; // needs w for proper perspective correction\\r\\n}\\r\\n\\r\\n\\r\\n\"","module.exports = \"// Originally taken from https://github.com/KhronosGroup/glTF-WebGL-PBR\\r\\n// Commit c28b5b8f5a83380857ad8395ac5302594ecc13ae\\r\\n//\\r\\n// This fragment shader defines a reference implementation for Physically Based Shading of\\r\\n// a microfacet surface material defined by a glTF model.\\r\\n//\\r\\n// References:\\r\\n// [1] Real Shading in Unreal Engine 4\\r\\n//     http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\\r\\n// [2] Physically Based Shading at Disney\\r\\n//     http://blog.selfshadow.com/publications/s2012-shading-course/burley/s2012_pbs_disney_brdf_notes_v3.pdf\\r\\n// [3] README.md - Environment Maps\\r\\n//     https://github.com/KhronosGroup/glTF-WebGL-PBR/#environment-maps\\r\\n// [4] \\\"An Inexpensive BRDF Model for Physically based Rendering\\\" by Christophe Schlick\\r\\n//     https://www.cs.virginia.edu/~jdl/bib/appearance/analytic%20models/schlick94b.pdf\\r\\n\\r\\nprecision highp float;\\r\\n\\r\\n#if __VERSION__ == 100\\r\\n    #extension GL_EXT_shader_texture_lod: enable\\r\\n    #extension GL_OES_standard_derivatives : enable\\r\\n    #define fragColor gl_FragColor\\r\\n    #define texture( texture2D(\\r\\n#else\\r\\n    #define varying in\\r\\n    layout(location = 0) out vec4 fragColor;\\r\\n#endif\\r\\n\\r\\n// vertex shader + fragment shader\\r\\nconst int HAS_NORMALS           = 1;\\r\\nconst int HAS_TANGENTS          = 1 << 1;\\r\\nconst int HAS_UV                = 1 << 2;\\r\\nconst int HAS_COLORS            = 1 << 3;\\r\\n\\r\\n// fragment shader only\\r\\nconst int USE_IBL               = 1 << 4;\\r\\nconst int HAS_BASECOLORMAP      = 1 << 5;\\r\\nconst int HAS_NORMALMAP         = 1 << 6;\\r\\nconst int HAS_EMISSIVEMAP       = 1 << 7;\\r\\nconst int HAS_METALROUGHNESSMAP = 1 << 8;\\r\\nconst int HAS_OCCLUSIONMAP      = 1 << 9;\\r\\nconst int USE_TEX_LOD           = 1 << 10;\\r\\n\\r\\nuniform vec3 u_LightDirection;\\r\\nuniform vec3 u_LightColor;\\r\\n\\r\\n// TODO!: ambient light or only IBL? (see gltf-viewer)\\r\\n\\r\\n#ifdef USE_IBL\\r\\nuniform samplerCube u_DiffuseEnvSampler;\\r\\nuniform samplerCube u_SpecularEnvSampler;\\r\\nuniform sampler2D u_brdfLUT;\\r\\n#endif\\r\\n\\r\\nuniform mediump int u_PbrFlags;\\r\\n\\r\\nuniform sampler2D u_BaseColorSampler;\\r\\nuniform lowp int u_BaseColorTexCoord;\\r\\n\\r\\nuniform sampler2D u_NormalSampler;\\r\\nuniform lowp int u_NormalTexCoord;\\r\\nuniform float u_NormalScale;\\r\\n\\r\\nuniform sampler2D u_EmissiveSampler;\\r\\nuniform lowp int u_EmissiveTexCoord;\\r\\nuniform vec3 u_EmissiveFactor;\\r\\n\\r\\nuniform sampler2D u_MetallicRoughnessSampler;\\r\\nuniform lowp int u_MetallicRoughnessTexCoord;\\r\\nuniform sampler2D u_OcclusionSampler;\\r\\nuniform lowp int u_OcclusionTexCoord;\\r\\nuniform float u_OcclusionStrength;\\r\\n\\r\\nuniform vec2 u_MetallicRoughnessValues;\\r\\nuniform vec4 u_BaseColorFactor;\\r\\n\\r\\nuniform vec3 u_Camera;\\r\\n\\r\\nuniform float u_AlphaBlend;\\r\\nuniform float u_AlphaCutoff;\\r\\n\\r\\n// // debugging flags used for shader output of intermediate PBR variables\\r\\n// uniform vec4 u_ScaleDiffBaseMR;\\r\\n// uniform vec4 u_ScaleFGDSpec;\\r\\n// uniform vec4 u_ScaleIBLAmbient;\\r\\n\\r\\nvarying vec3 v_Position;\\r\\nvarying vec2 v_UV[2];\\r\\nvarying vec4 v_Color;\\r\\nvarying mat3 v_TBN;\\r\\nvarying vec3 v_Normal;\\r\\n\\r\\n// Encapsulate the various inputs used by the various functions in the shading equation\\r\\n// We store values in this struct to simplify the integration of alternative implementations\\r\\n// of the shading terms, outlined in the Readme.MD Appendix.\\r\\nstruct PBRInfo\\r\\n{\\r\\n    float NdotL;                  // cos angle between normal and light direction\\r\\n    float NdotV;                  // cos angle between normal and view direction\\r\\n    float NdotH;                  // cos angle between normal and half vector\\r\\n    float LdotH;                  // cos angle between light direction and half vector\\r\\n    float VdotH;                  // cos angle between view direction and half vector\\r\\n    float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)\\r\\n    float metalness;              // metallic value at the surface\\r\\n    vec3 reflectance0;            // full reflectance color (normal incidence angle)\\r\\n    vec3 reflectance90;           // reflectance color at grazing angle\\r\\n    float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])\\r\\n    vec3 diffuseColor;            // color contribution from diffuse lighting\\r\\n    vec3 specularColor;           // color contribution from specular lighting\\r\\n};\\r\\n\\r\\nconst float M_PI = 3.141592653589793;\\r\\nconst float c_MinRoughness = 0.04;\\r\\n\\r\\nvec4 SRGBtoLINEAR(vec4 srgbIn)\\r\\n{\\r\\n    #ifdef MANUAL_SRGB\\r\\n    #ifdef SRGB_FAST_APPROXIMATION\\r\\n    vec3 linOut = pow(srgbIn.xyz,vec3(2.2));\\r\\n    #else //SRGB_FAST_APPROXIMATION\\r\\n    vec3 bLess = step(vec3(0.04045),srgbIn.xyz);\\r\\n    vec3 linOut = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );\\r\\n    #endif //SRGB_FAST_APPROXIMATION\\r\\n    return vec4(linOut,srgbIn.w);;\\r\\n    #else //MANUAL_SRGB\\r\\n    return srgbIn;\\r\\n    #endif //MANUAL_SRGB\\r\\n}\\r\\n\\r\\nbool checkFlag(int flag) {\\r\\n    return (u_PbrFlags & flag) == flag;\\r\\n}\\r\\n\\r\\n// Find the normal for this fragment, pulling either from a predefined normal map\\r\\n// or from the interpolated mesh normal and tangent attributes.\\r\\nvec3 getNormal()\\r\\n{\\r\\n    // Retrieve the tangent space matrix\\r\\n    mat3 tbn;\\r\\nif (!checkFlag(HAS_TANGENTS)) {\\r\\n    vec3 pos_dx = dFdx(v_Position);\\r\\n    vec3 pos_dy = dFdy(v_Position);\\r\\n    vec3 tex_dx = dFdx(vec3(v_UV[0], 0.0));\\r\\n    vec3 tex_dy = dFdy(vec3(v_UV[0], 0.0));\\r\\n    vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\\r\\n\\r\\n    vec3 ng;\\r\\nif (checkFlag(HAS_NORMALS))\\r\\n    ng = normalize(v_Normal);\\r\\nelse\\r\\n    ng = cross(pos_dx, pos_dy);\\r\\n\\r\\n    t = normalize(t - ng * dot(ng, t));\\r\\n    vec3 b = normalize(cross(ng, t));\\r\\n    tbn = mat3(t, b, ng);\\r\\n} else { // HAS_TANGENTS\\r\\n    tbn = v_TBN;\\r\\n}\\r\\n\\r\\n    vec3 n;\\r\\nif (checkFlag(HAS_NORMALMAP)) {\\r\\n    n = texture(u_NormalSampler, v_UV[u_NormalTexCoord]).rgb;\\r\\n    n = normalize(tbn * ((2.0 * n - 1.0) * vec3(u_NormalScale, u_NormalScale, 1.0)));\\r\\n} else {\\r\\n    // The tbn matrix is linearly interpolated, so we need to re-normalize\\r\\n    n = normalize(tbn[2].xyz);\\r\\n}\\r\\n\\r\\n    // reverse backface normals\\r\\n    n *= (2.0 * float(gl_FrontFacing) - 1.0);\\r\\n\\r\\n    return n;\\r\\n}\\r\\n\\r\\n#ifdef USE_IBL\\r\\n// Calculation of the lighting contribution from an optional Image Based Light source.\\r\\n// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].\\r\\n// See our README.md on Environment Maps [3] for additional discussion.\\r\\nvec3 getIBLContribution(PBRInfo pbrInputs, vec3 n, vec3 reflection)\\r\\n{\\r\\n    float mipCount = 9.0; // resolution of 512x512\\r\\n    float lod = (pbrInputs.perceptualRoughness * mipCount);\\r\\n    // retrieve a scale and bias to F0. See [1], Figure 3\\r\\n    vec3 brdf = SRGBtoLINEAR(texture(u_brdfLUT, vec2(pbrInputs.NdotV, 1.0 - pbrInputs.perceptualRoughness))).rgb;\\r\\n    vec3 diffuseLight = SRGBtoLINEAR(textureCube(u_DiffuseEnvSampler, n)).rgb;\\r\\n\\r\\n#ifdef USE_TEX_LOD\\r\\n    vec3 specularLight = SRGBtoLINEAR(textureCubeLodEXT(u_SpecularEnvSampler, reflection, lod)).rgb;\\r\\n#else\\r\\n    vec3 specularLight = SRGBtoLINEAR(textureCube(u_SpecularEnvSampler, reflection)).rgb;\\r\\n#endif\\r\\n\\r\\n    vec3 diffuse = diffuseLight * pbrInputs.diffuseColor;\\r\\n    vec3 specular = specularLight * (pbrInputs.specularColor * brdf.x + brdf.y);\\r\\n\\r\\n    // For presentation, this allows us to disable IBL terms\\r\\n    diffuse *= u_ScaleIBLAmbient.x;\\r\\n    specular *= u_ScaleIBLAmbient.y;\\r\\n\\r\\n    return diffuse + specular;\\r\\n}\\r\\n#endif\\r\\n\\r\\n// Basic Lambertian diffuse\\r\\n// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog\\r\\n// See also [1], Equation 1\\r\\nvec3 diffuse(PBRInfo pbrInputs)\\r\\n{\\r\\n    return pbrInputs.diffuseColor / M_PI;\\r\\n}\\r\\n\\r\\n// The following equation models the Fresnel reflectance term of the spec equation (aka F())\\r\\n// Implementation of fresnel from [4], Equation 15\\r\\nvec3 specularReflection(PBRInfo pbrInputs)\\r\\n{\\r\\n    return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance0) * pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);\\r\\n}\\r\\n\\r\\n// This calculates the specular geometric attenuation (aka G()),\\r\\n// where rougher material will reflect less light back to the viewer.\\r\\n// This implementation is based on [1] Equation 4, and we adopt their modifications to\\r\\n// alphaRoughness as input as originally proposed in [2].\\r\\nfloat geometricOcclusion(PBRInfo pbrInputs)\\r\\n{\\r\\n    float NdotL = pbrInputs.NdotL;\\r\\n    float NdotV = pbrInputs.NdotV;\\r\\n    float r = pbrInputs.alphaRoughness;\\r\\n\\r\\n    float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));\\r\\n    float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));\\r\\n    return attenuationL * attenuationV;\\r\\n}\\r\\n\\r\\n// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())\\r\\n// Implementation from \\\"Average Irregularity Representation of a Roughened Surface for Ray Reflection\\\" by T. S. Trowbridge, and K. P. Reitz\\r\\n// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.\\r\\nfloat microfacetDistribution(PBRInfo pbrInputs)\\r\\n{\\r\\n    float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;\\r\\n    float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;\\r\\n    return roughnessSq / (M_PI * f * f);\\r\\n}\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n    // Metallic and Roughness material properties are packed together\\r\\n    // In glTF, these factors can be specified by fixed scalar values\\r\\n    // or from a metallic-roughness map\\r\\n    float perceptualRoughness = u_MetallicRoughnessValues.y;\\r\\n    float metallic = u_MetallicRoughnessValues.x;\\r\\nif (checkFlag(HAS_METALROUGHNESSMAP)) {\\r\\n    // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.\\r\\n    // This layout intentionally reserves the 'r' channel for (optional) occlusion map data\\r\\n    vec4 mrSample = texture(u_MetallicRoughnessSampler, v_UV[u_MetallicRoughnessTexCoord]);\\r\\n    perceptualRoughness = mrSample.g * perceptualRoughness;\\r\\n    metallic = mrSample.b * metallic;\\r\\n}\\r\\n    perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);\\r\\n    metallic = clamp(metallic, 0.0, 1.0);\\r\\n    // Roughness is authored as perceptual roughness; as is convention,\\r\\n    // convert to material roughness by squaring the perceptual roughness [2].\\r\\n    float alphaRoughness = perceptualRoughness * perceptualRoughness;\\r\\n\\r\\n    // The albedo may be defined from a base texture or a flat color\\r\\n    vec4 baseColor;\\r\\nif (checkFlag(HAS_BASECOLORMAP))\\r\\n    baseColor = SRGBtoLINEAR(texture(u_BaseColorSampler, v_UV[u_BaseColorTexCoord])) * u_BaseColorFactor;\\r\\nelse\\r\\n    baseColor = u_BaseColorFactor;\\r\\n\\r\\n    // spec: COLOR_0 ... acts as an additional linear multiplier to baseColor\\r\\n    // TODO!: distinguish vec3/vec4 colors...\\r\\n    baseColor *= vec4(v_Color.rgb, 1.0);\\r\\n\\r\\n    vec3 f0 = vec3(0.04);\\r\\n    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);\\r\\n    diffuseColor *= 1.0 - metallic;\\r\\n    vec3 specularColor = mix(f0, baseColor.rgb, metallic);\\r\\n\\r\\n    // Compute reflectance.\\r\\n    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\\r\\n\\r\\n    // For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.\\r\\n    // For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.\\r\\n    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);\\r\\n    vec3 specularEnvironmentR0 = specularColor.rgb;\\r\\n    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;\\r\\n\\r\\n    vec3 n = getNormal();                             // normal at surface point\\r\\n    vec3 v = normalize(u_Camera - v_Position);        // Vector from surface point to camera\\r\\n    vec3 l = normalize(u_LightDirection);             // Vector from surface point to light\\r\\n    vec3 h = normalize(l+v);                          // Half vector between both l and v\\r\\n    vec3 reflection = -normalize(reflect(v, n));\\r\\n\\r\\n    float NdotL = clamp(dot(n, l), 0.001, 1.0);\\r\\n    float NdotV = abs(dot(n, v)) + 0.001;\\r\\n    float NdotH = clamp(dot(n, h), 0.0, 1.0);\\r\\n    float LdotH = clamp(dot(l, h), 0.0, 1.0);\\r\\n    float VdotH = clamp(dot(v, h), 0.0, 1.0);\\r\\n\\r\\n    PBRInfo pbrInputs = PBRInfo(\\r\\n        NdotL,\\r\\n        NdotV,\\r\\n        NdotH,\\r\\n        LdotH,\\r\\n        VdotH,\\r\\n        perceptualRoughness,\\r\\n        metallic,\\r\\n        specularEnvironmentR0,\\r\\n        specularEnvironmentR90,\\r\\n        alphaRoughness,\\r\\n        diffuseColor,\\r\\n        specularColor\\r\\n    );\\r\\n\\r\\n    // Calculate the shading terms for the microfacet specular shading model\\r\\n    vec3 F = specularReflection(pbrInputs);\\r\\n    float G = geometricOcclusion(pbrInputs);\\r\\n    float D = microfacetDistribution(pbrInputs);\\r\\n\\r\\n    // Calculation of analytical lighting contribution\\r\\n    vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInputs);\\r\\n    vec3 specContrib = F * G * D / (4.0 * NdotL * NdotV);\\r\\n    // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)\\r\\n    vec3 color = NdotL * u_LightColor * (diffuseContrib + specContrib);\\r\\n\\r\\n    // Calculate lighting contribution from image based lighting source (IBL)\\r\\n#ifdef USE_IBL\\r\\n    color += getIBLContribution(pbrInputs, n, reflection);\\r\\n#endif\\r\\n\\r\\n    // Apply optional PBR terms for additional (optional) shading\\r\\nif (checkFlag(HAS_OCCLUSIONMAP)) {\\r\\n    float ao = texture(u_OcclusionSampler, v_UV[u_OcclusionTexCoord]).r;\\r\\n    color = mix(color, color * ao, u_OcclusionStrength);\\r\\n}\\r\\n\\r\\nif (checkFlag(HAS_EMISSIVEMAP)) {\\r\\n    vec3 emissive = SRGBtoLINEAR(texture(u_EmissiveSampler, v_UV[u_EmissiveTexCoord])).rgb * u_EmissiveFactor;\\r\\n    color += emissive;\\r\\n}\\r\\n\\r\\n    // // This section uses mix to override final color for reference app visualization\\r\\n    // // of various parameters in the lighting equation.\\r\\n    // color = mix(color, F, u_ScaleFGDSpec.x);\\r\\n    // color = mix(color, vec3(G), u_ScaleFGDSpec.y);\\r\\n    // color = mix(color, vec3(D), u_ScaleFGDSpec.z);\\r\\n    // color = mix(color, specContrib, u_ScaleFGDSpec.w);\\r\\n\\r\\n    // color = mix(color, diffuseContrib, u_ScaleDiffBaseMR.x);\\r\\n    // color = mix(color, baseColor.rgb, u_ScaleDiffBaseMR.y);\\r\\n    // color = mix(color, vec3(metallic), u_ScaleDiffBaseMR.z);\\r\\n    // color = mix(color, vec3(perceptualRoughness), u_ScaleDiffBaseMR.w);\\r\\n\\r\\n    // NOTE: the spec mandates to ignore any alpha value in 'OPAQUE' mode\\r\\n    float alpha = mix(1.0, baseColor.a, u_AlphaBlend);\\r\\n    if (u_AlphaCutoff > 0.0) {\\r\\n        alpha = step(u_AlphaCutoff, baseColor.a);\\r\\n    }\\r\\n    fragColor = vec4(pow(color,vec3(1.0/2.2)), alpha);\\r\\n}\\r\\n\""],"sourceRoot":""}