!function(t,n){if("object"==typeof exports&&"object"==typeof module)module.exports=n(require("gloperate"));else if("function"==typeof define&&define.amd)define(["gloperate"],n);else{var e="object"==typeof exports?n(require("gloperate")):n(t.gloperate);for(var r in e)("object"==typeof exports?exports:t)[r]=e[r]}}(window,function(t){return function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=20)}([function(n,e){n.exports=t},function(t,n,e){"use strict";e.r(n);var r={};e.d(r,"EPSILON",function(){return h}),e.d(r,"ARRAY_TYPE",function(){return d}),e.d(r,"RANDOM",function(){return _}),e.d(r,"setMatrixArrayType",function(){return b}),e.d(r,"toRadian",function(){return p}),e.d(r,"equals",function(){return v});var i={};e.d(i,"create",function(){return g}),e.d(i,"clone",function(){return w}),e.d(i,"copy",function(){return x}),e.d(i,"identity",function(){return y}),e.d(i,"fromValues",function(){return M}),e.d(i,"set",function(){return E}),e.d(i,"transpose",function(){return T}),e.d(i,"invert",function(){return A}),e.d(i,"adjoint",function(){return z}),e.d(i,"determinant",function(){return S}),e.d(i,"multiply",function(){return R}),e.d(i,"rotate",function(){return k}),e.d(i,"scale",function(){return I}),e.d(i,"fromRotation",function(){return O}),e.d(i,"fromScaling",function(){return D}),e.d(i,"str",function(){return L}),e.d(i,"frob",function(){return N}),e.d(i,"LDU",function(){return C}),e.d(i,"add",function(){return F}),e.d(i,"subtract",function(){return B}),e.d(i,"exactEquals",function(){return U}),e.d(i,"equals",function(){return q}),e.d(i,"multiplyScalar",function(){return P}),e.d(i,"multiplyScalarAndAdd",function(){return Z}),e.d(i,"mul",function(){return H}),e.d(i,"sub",function(){return j});var a={};e.d(a,"create",function(){return G}),e.d(a,"clone",function(){return V}),e.d(a,"copy",function(){return K}),e.d(a,"identity",function(){return W}),e.d(a,"fromValues",function(){return Y}),e.d(a,"set",function(){return X}),e.d(a,"invert",function(){return $}),e.d(a,"determinant",function(){return J}),e.d(a,"multiply",function(){return Q}),e.d(a,"rotate",function(){return tt}),e.d(a,"scale",function(){return nt}),e.d(a,"translate",function(){return et}),e.d(a,"fromRotation",function(){return rt}),e.d(a,"fromScaling",function(){return it}),e.d(a,"fromTranslation",function(){return at}),e.d(a,"str",function(){return ot}),e.d(a,"frob",function(){return st}),e.d(a,"add",function(){return lt}),e.d(a,"subtract",function(){return ut}),e.d(a,"multiplyScalar",function(){return ct}),e.d(a,"multiplyScalarAndAdd",function(){return ft}),e.d(a,"exactEquals",function(){return ht}),e.d(a,"equals",function(){return dt}),e.d(a,"mul",function(){return _t}),e.d(a,"sub",function(){return bt});var o={};e.d(o,"create",function(){return mt}),e.d(o,"fromMat4",function(){return pt}),e.d(o,"clone",function(){return vt}),e.d(o,"copy",function(){return gt}),e.d(o,"fromValues",function(){return wt}),e.d(o,"set",function(){return xt}),e.d(o,"identity",function(){return yt}),e.d(o,"transpose",function(){return Mt}),e.d(o,"invert",function(){return Et}),e.d(o,"adjoint",function(){return Tt}),e.d(o,"determinant",function(){return At}),e.d(o,"multiply",function(){return zt}),e.d(o,"translate",function(){return St}),e.d(o,"rotate",function(){return Rt}),e.d(o,"scale",function(){return kt}),e.d(o,"fromTranslation",function(){return It}),e.d(o,"fromRotation",function(){return Ot}),e.d(o,"fromScaling",function(){return Dt}),e.d(o,"fromMat2d",function(){return Lt}),e.d(o,"fromQuat",function(){return Nt}),e.d(o,"normalFromMat4",function(){return Ct}),e.d(o,"projection",function(){return Ft}),e.d(o,"str",function(){return Bt}),e.d(o,"frob",function(){return Ut}),e.d(o,"add",function(){return qt}),e.d(o,"subtract",function(){return Pt}),e.d(o,"multiplyScalar",function(){return Zt}),e.d(o,"multiplyScalarAndAdd",function(){return Ht}),e.d(o,"exactEquals",function(){return jt}),e.d(o,"equals",function(){return Gt}),e.d(o,"mul",function(){return Vt}),e.d(o,"sub",function(){return Kt});var s={};e.d(s,"create",function(){return Wt}),e.d(s,"clone",function(){return Yt}),e.d(s,"copy",function(){return Xt}),e.d(s,"fromValues",function(){return $t}),e.d(s,"set",function(){return Jt}),e.d(s,"identity",function(){return Qt}),e.d(s,"transpose",function(){return tn}),e.d(s,"invert",function(){return nn}),e.d(s,"adjoint",function(){return en}),e.d(s,"determinant",function(){return rn}),e.d(s,"multiply",function(){return an}),e.d(s,"translate",function(){return on}),e.d(s,"scale",function(){return sn}),e.d(s,"rotate",function(){return ln}),e.d(s,"rotateX",function(){return un}),e.d(s,"rotateY",function(){return cn}),e.d(s,"rotateZ",function(){return fn}),e.d(s,"fromTranslation",function(){return hn}),e.d(s,"fromScaling",function(){return dn}),e.d(s,"fromRotation",function(){return _n}),e.d(s,"fromXRotation",function(){return bn}),e.d(s,"fromYRotation",function(){return mn}),e.d(s,"fromZRotation",function(){return pn}),e.d(s,"fromRotationTranslation",function(){return vn}),e.d(s,"getTranslation",function(){return gn}),e.d(s,"getScaling",function(){return wn}),e.d(s,"getRotation",function(){return xn}),e.d(s,"fromRotationTranslationScale",function(){return yn}),e.d(s,"fromRotationTranslationScaleOrigin",function(){return Mn}),e.d(s,"fromQuat",function(){return En}),e.d(s,"frustum",function(){return Tn}),e.d(s,"perspective",function(){return An}),e.d(s,"perspectiveFromFieldOfView",function(){return zn}),e.d(s,"ortho",function(){return Sn}),e.d(s,"lookAt",function(){return Rn}),e.d(s,"targetTo",function(){return kn}),e.d(s,"str",function(){return In}),e.d(s,"frob",function(){return On}),e.d(s,"add",function(){return Dn}),e.d(s,"subtract",function(){return Ln}),e.d(s,"multiplyScalar",function(){return Nn}),e.d(s,"multiplyScalarAndAdd",function(){return Cn}),e.d(s,"exactEquals",function(){return Fn}),e.d(s,"equals",function(){return Bn}),e.d(s,"mul",function(){return Un}),e.d(s,"sub",function(){return qn});var l={};e.d(l,"create",function(){return Pn}),e.d(l,"clone",function(){return Zn}),e.d(l,"length",function(){return Hn}),e.d(l,"fromValues",function(){return jn}),e.d(l,"copy",function(){return Gn}),e.d(l,"set",function(){return Vn}),e.d(l,"add",function(){return Kn}),e.d(l,"subtract",function(){return Wn}),e.d(l,"multiply",function(){return Yn}),e.d(l,"divide",function(){return Xn}),e.d(l,"ceil",function(){return $n}),e.d(l,"floor",function(){return Jn}),e.d(l,"min",function(){return Qn}),e.d(l,"max",function(){return te}),e.d(l,"round",function(){return ne}),e.d(l,"scale",function(){return ee}),e.d(l,"scaleAndAdd",function(){return re}),e.d(l,"distance",function(){return ie}),e.d(l,"squaredDistance",function(){return ae}),e.d(l,"squaredLength",function(){return oe}),e.d(l,"negate",function(){return se}),e.d(l,"inverse",function(){return le}),e.d(l,"normalize",function(){return ue}),e.d(l,"dot",function(){return ce}),e.d(l,"cross",function(){return fe}),e.d(l,"lerp",function(){return he}),e.d(l,"hermite",function(){return de}),e.d(l,"bezier",function(){return _e}),e.d(l,"random",function(){return be}),e.d(l,"transformMat4",function(){return me}),e.d(l,"transformMat3",function(){return pe}),e.d(l,"transformQuat",function(){return ve}),e.d(l,"rotateX",function(){return ge}),e.d(l,"rotateY",function(){return we}),e.d(l,"rotateZ",function(){return xe}),e.d(l,"angle",function(){return ye}),e.d(l,"str",function(){return Me}),e.d(l,"exactEquals",function(){return Ee}),e.d(l,"equals",function(){return Te}),e.d(l,"sub",function(){return Ae}),e.d(l,"mul",function(){return ze}),e.d(l,"div",function(){return Se}),e.d(l,"dist",function(){return Re}),e.d(l,"sqrDist",function(){return ke}),e.d(l,"len",function(){return Ie}),e.d(l,"sqrLen",function(){return Oe}),e.d(l,"forEach",function(){return De});var u={};e.d(u,"create",function(){return Le}),e.d(u,"clone",function(){return Ne}),e.d(u,"fromValues",function(){return Ce}),e.d(u,"copy",function(){return Fe}),e.d(u,"set",function(){return Be}),e.d(u,"add",function(){return Ue}),e.d(u,"subtract",function(){return qe}),e.d(u,"multiply",function(){return Pe}),e.d(u,"divide",function(){return Ze}),e.d(u,"ceil",function(){return He}),e.d(u,"floor",function(){return je}),e.d(u,"min",function(){return Ge}),e.d(u,"max",function(){return Ve}),e.d(u,"round",function(){return Ke}),e.d(u,"scale",function(){return We}),e.d(u,"scaleAndAdd",function(){return Ye}),e.d(u,"distance",function(){return Xe}),e.d(u,"squaredDistance",function(){return $e}),e.d(u,"length",function(){return Je}),e.d(u,"squaredLength",function(){return Qe}),e.d(u,"negate",function(){return tr}),e.d(u,"inverse",function(){return nr}),e.d(u,"normalize",function(){return er}),e.d(u,"dot",function(){return rr}),e.d(u,"lerp",function(){return ir}),e.d(u,"random",function(){return ar}),e.d(u,"transformMat4",function(){return or}),e.d(u,"transformQuat",function(){return sr}),e.d(u,"str",function(){return lr}),e.d(u,"exactEquals",function(){return ur}),e.d(u,"equals",function(){return cr}),e.d(u,"sub",function(){return fr}),e.d(u,"mul",function(){return hr}),e.d(u,"div",function(){return dr}),e.d(u,"dist",function(){return _r}),e.d(u,"sqrDist",function(){return br}),e.d(u,"len",function(){return mr}),e.d(u,"sqrLen",function(){return pr}),e.d(u,"forEach",function(){return vr});var c={};e.d(c,"create",function(){return gr}),e.d(c,"identity",function(){return wr}),e.d(c,"setAxisAngle",function(){return xr}),e.d(c,"getAxisAngle",function(){return yr}),e.d(c,"multiply",function(){return Mr}),e.d(c,"rotateX",function(){return Er}),e.d(c,"rotateY",function(){return Tr}),e.d(c,"rotateZ",function(){return Ar}),e.d(c,"calculateW",function(){return zr}),e.d(c,"slerp",function(){return Sr}),e.d(c,"invert",function(){return Rr}),e.d(c,"conjugate",function(){return kr}),e.d(c,"fromMat3",function(){return Ir}),e.d(c,"fromEuler",function(){return Or}),e.d(c,"str",function(){return Dr}),e.d(c,"clone",function(){return Lr}),e.d(c,"fromValues",function(){return Nr}),e.d(c,"copy",function(){return Cr}),e.d(c,"set",function(){return Fr}),e.d(c,"add",function(){return Br}),e.d(c,"mul",function(){return Ur}),e.d(c,"scale",function(){return qr}),e.d(c,"dot",function(){return Pr}),e.d(c,"lerp",function(){return Zr}),e.d(c,"length",function(){return Hr}),e.d(c,"len",function(){return jr}),e.d(c,"squaredLength",function(){return Gr}),e.d(c,"sqrLen",function(){return Vr}),e.d(c,"normalize",function(){return Kr}),e.d(c,"exactEquals",function(){return Wr}),e.d(c,"equals",function(){return Yr}),e.d(c,"rotationTo",function(){return Xr}),e.d(c,"sqlerp",function(){return $r}),e.d(c,"setAxes",function(){return Jr});var f={};e.d(f,"create",function(){return Qr}),e.d(f,"clone",function(){return ti}),e.d(f,"fromValues",function(){return ni}),e.d(f,"copy",function(){return ei}),e.d(f,"set",function(){return ri}),e.d(f,"add",function(){return ii}),e.d(f,"subtract",function(){return ai}),e.d(f,"multiply",function(){return oi}),e.d(f,"divide",function(){return si}),e.d(f,"ceil",function(){return li}),e.d(f,"floor",function(){return ui}),e.d(f,"min",function(){return ci}),e.d(f,"max",function(){return fi}),e.d(f,"round",function(){return hi}),e.d(f,"scale",function(){return di}),e.d(f,"scaleAndAdd",function(){return _i}),e.d(f,"distance",function(){return bi}),e.d(f,"squaredDistance",function(){return mi}),e.d(f,"length",function(){return pi}),e.d(f,"squaredLength",function(){return vi}),e.d(f,"negate",function(){return gi}),e.d(f,"inverse",function(){return wi}),e.d(f,"normalize",function(){return xi}),e.d(f,"dot",function(){return yi}),e.d(f,"cross",function(){return Mi}),e.d(f,"lerp",function(){return Ei}),e.d(f,"random",function(){return Ti}),e.d(f,"transformMat2",function(){return Ai}),e.d(f,"transformMat2d",function(){return zi}),e.d(f,"transformMat3",function(){return Si}),e.d(f,"transformMat4",function(){return Ri}),e.d(f,"str",function(){return ki}),e.d(f,"exactEquals",function(){return Ii}),e.d(f,"equals",function(){return Oi}),e.d(f,"len",function(){return Di}),e.d(f,"sub",function(){return Li}),e.d(f,"mul",function(){return Ni}),e.d(f,"div",function(){return Ci}),e.d(f,"dist",function(){return Fi}),e.d(f,"sqrDist",function(){return Bi}),e.d(f,"sqrLen",function(){return Ui}),e.d(f,"forEach",function(){return qi});const h=1e-6;let d="undefined"!=typeof Float32Array?Float32Array:Array;const _=Math.random;function b(t){d=t}const m=Math.PI/180;function p(t){return t*m}function v(t,n){return Math.abs(t-n)<=h*Math.max(1,Math.abs(t),Math.abs(n))}function g(){let t=new d(4);return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t}function w(t){let n=new d(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n}function x(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t}function y(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t}function M(t,n,e,r){let i=new d(4);return i[0]=t,i[1]=n,i[2]=e,i[3]=r,i}function E(t,n,e,r,i){return t[0]=n,t[1]=e,t[2]=r,t[3]=i,t}function T(t,n){if(t===n){let e=n[1];t[1]=n[2],t[2]=e}else t[0]=n[0],t[1]=n[2],t[2]=n[1],t[3]=n[3];return t}function A(t,n){let e=n[0],r=n[1],i=n[2],a=n[3],o=e*a-i*r;return o?(o=1/o,t[0]=a*o,t[1]=-r*o,t[2]=-i*o,t[3]=e*o,t):null}function z(t,n){let e=n[0];return t[0]=n[3],t[1]=-n[1],t[2]=-n[2],t[3]=e,t}function S(t){return t[0]*t[3]-t[2]*t[1]}function R(t,n,e){let r=n[0],i=n[1],a=n[2],o=n[3],s=e[0],l=e[1],u=e[2],c=e[3];return t[0]=r*s+a*l,t[1]=i*s+o*l,t[2]=r*u+a*c,t[3]=i*u+o*c,t}function k(t,n,e){let r=n[0],i=n[1],a=n[2],o=n[3],s=Math.sin(e),l=Math.cos(e);return t[0]=r*l+a*s,t[1]=i*l+o*s,t[2]=r*-s+a*l,t[3]=i*-s+o*l,t}function I(t,n,e){let r=n[0],i=n[1],a=n[2],o=n[3],s=e[0],l=e[1];return t[0]=r*s,t[1]=i*s,t[2]=a*l,t[3]=o*l,t}function O(t,n){let e=Math.sin(n),r=Math.cos(n);return t[0]=r,t[1]=e,t[2]=-e,t[3]=r,t}function D(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=n[1],t}function L(t){return"mat2("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}function N(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2))}function C(t,n,e,r){return t[2]=r[2]/r[0],e[0]=r[0],e[1]=r[1],e[3]=r[3]-t[2]*e[1],[t,n,e]}function F(t,n,e){return t[0]=n[0]+e[0],t[1]=n[1]+e[1],t[2]=n[2]+e[2],t[3]=n[3]+e[3],t}function B(t,n,e){return t[0]=n[0]-e[0],t[1]=n[1]-e[1],t[2]=n[2]-e[2],t[3]=n[3]-e[3],t}function U(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]}function q(t,n){let e=t[0],r=t[1],i=t[2],a=t[3],o=n[0],s=n[1],l=n[2],u=n[3];return Math.abs(e-o)<=h*Math.max(1,Math.abs(e),Math.abs(o))&&Math.abs(r-s)<=h*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(i-l)<=h*Math.max(1,Math.abs(i),Math.abs(l))&&Math.abs(a-u)<=h*Math.max(1,Math.abs(a),Math.abs(u))}function P(t,n,e){return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t[3]=n[3]*e,t}function Z(t,n,e,r){return t[0]=n[0]+e[0]*r,t[1]=n[1]+e[1]*r,t[2]=n[2]+e[2]*r,t[3]=n[3]+e[3]*r,t}const H=R,j=B;function G(){let t=new d(6);return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t}function V(t){let n=new d(6);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n}function K(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t}function W(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t}function Y(t,n,e,r,i,a){let o=new d(6);return o[0]=t,o[1]=n,o[2]=e,o[3]=r,o[4]=i,o[5]=a,o}function X(t,n,e,r,i,a,o){return t[0]=n,t[1]=e,t[2]=r,t[3]=i,t[4]=a,t[5]=o,t}function $(t,n){let e=n[0],r=n[1],i=n[2],a=n[3],o=n[4],s=n[5],l=e*a-r*i;return l?(l=1/l,t[0]=a*l,t[1]=-r*l,t[2]=-i*l,t[3]=e*l,t[4]=(i*s-a*o)*l,t[5]=(r*o-e*s)*l,t):null}function J(t){return t[0]*t[3]-t[1]*t[2]}function Q(t,n,e){let r=n[0],i=n[1],a=n[2],o=n[3],s=n[4],l=n[5],u=e[0],c=e[1],f=e[2],h=e[3],d=e[4],_=e[5];return t[0]=r*u+a*c,t[1]=i*u+o*c,t[2]=r*f+a*h,t[3]=i*f+o*h,t[4]=r*d+a*_+s,t[5]=i*d+o*_+l,t}function tt(t,n,e){let r=n[0],i=n[1],a=n[2],o=n[3],s=n[4],l=n[5],u=Math.sin(e),c=Math.cos(e);return t[0]=r*c+a*u,t[1]=i*c+o*u,t[2]=r*-u+a*c,t[3]=i*-u+o*c,t[4]=s,t[5]=l,t}function nt(t,n,e){let r=n[0],i=n[1],a=n[2],o=n[3],s=n[4],l=n[5],u=e[0],c=e[1];return t[0]=r*u,t[1]=i*u,t[2]=a*c,t[3]=o*c,t[4]=s,t[5]=l,t}function et(t,n,e){let r=n[0],i=n[1],a=n[2],o=n[3],s=n[4],l=n[5],u=e[0],c=e[1];return t[0]=r,t[1]=i,t[2]=a,t[3]=o,t[4]=r*u+a*c+s,t[5]=i*u+o*c+l,t}function rt(t,n){let e=Math.sin(n),r=Math.cos(n);return t[0]=r,t[1]=e,t[2]=-e,t[3]=r,t[4]=0,t[5]=0,t}function it(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=n[1],t[4]=0,t[5]=0,t}function at(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=n[0],t[5]=n[1],t}function ot(t){return"mat2d("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+")"}function st(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+1)}function lt(t,n,e){return t[0]=n[0]+e[0],t[1]=n[1]+e[1],t[2]=n[2]+e[2],t[3]=n[3]+e[3],t[4]=n[4]+e[4],t[5]=n[5]+e[5],t}function ut(t,n,e){return t[0]=n[0]-e[0],t[1]=n[1]-e[1],t[2]=n[2]-e[2],t[3]=n[3]-e[3],t[4]=n[4]-e[4],t[5]=n[5]-e[5],t}function ct(t,n,e){return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t[3]=n[3]*e,t[4]=n[4]*e,t[5]=n[5]*e,t}function ft(t,n,e,r){return t[0]=n[0]+e[0]*r,t[1]=n[1]+e[1]*r,t[2]=n[2]+e[2]*r,t[3]=n[3]+e[3]*r,t[4]=n[4]+e[4]*r,t[5]=n[5]+e[5]*r,t}function ht(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]}function dt(t,n){let e=t[0],r=t[1],i=t[2],a=t[3],o=t[4],s=t[5],l=n[0],u=n[1],c=n[2],f=n[3],d=n[4],_=n[5];return Math.abs(e-l)<=h*Math.max(1,Math.abs(e),Math.abs(l))&&Math.abs(r-u)<=h*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(i-c)<=h*Math.max(1,Math.abs(i),Math.abs(c))&&Math.abs(a-f)<=h*Math.max(1,Math.abs(a),Math.abs(f))&&Math.abs(o-d)<=h*Math.max(1,Math.abs(o),Math.abs(d))&&Math.abs(s-_)<=h*Math.max(1,Math.abs(s),Math.abs(_))}const _t=Q,bt=ut;function mt(){let t=new d(9);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function pt(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[4],t[4]=n[5],t[5]=n[6],t[6]=n[8],t[7]=n[9],t[8]=n[10],t}function vt(t){let n=new d(9);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n}function gt(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t}function wt(t,n,e,r,i,a,o,s,l){let u=new d(9);return u[0]=t,u[1]=n,u[2]=e,u[3]=r,u[4]=i,u[5]=a,u[6]=o,u[7]=s,u[8]=l,u}function xt(t,n,e,r,i,a,o,s,l,u){return t[0]=n,t[1]=e,t[2]=r,t[3]=i,t[4]=a,t[5]=o,t[6]=s,t[7]=l,t[8]=u,t}function yt(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function Mt(t,n){if(t===n){let e=n[1],r=n[2],i=n[5];t[1]=n[3],t[2]=n[6],t[3]=e,t[5]=n[7],t[6]=r,t[7]=i}else t[0]=n[0],t[1]=n[3],t[2]=n[6],t[3]=n[1],t[4]=n[4],t[5]=n[7],t[6]=n[2],t[7]=n[5],t[8]=n[8];return t}function Et(t,n){let e=n[0],r=n[1],i=n[2],a=n[3],o=n[4],s=n[5],l=n[6],u=n[7],c=n[8],f=c*o-s*u,h=-c*a+s*l,d=u*a-o*l,_=e*f+r*h+i*d;return _?(_=1/_,t[0]=f*_,t[1]=(-c*r+i*u)*_,t[2]=(s*r-i*o)*_,t[3]=h*_,t[4]=(c*e-i*l)*_,t[5]=(-s*e+i*a)*_,t[6]=d*_,t[7]=(-u*e+r*l)*_,t[8]=(o*e-r*a)*_,t):null}function Tt(t,n){let e=n[0],r=n[1],i=n[2],a=n[3],o=n[4],s=n[5],l=n[6],u=n[7],c=n[8];return t[0]=o*c-s*u,t[1]=i*u-r*c,t[2]=r*s-i*o,t[3]=s*l-a*c,t[4]=e*c-i*l,t[5]=i*a-e*s,t[6]=a*u-o*l,t[7]=r*l-e*u,t[8]=e*o-r*a,t}function At(t){let n=t[0],e=t[1],r=t[2],i=t[3],a=t[4],o=t[5],s=t[6],l=t[7],u=t[8];return n*(u*a-o*l)+e*(-u*i+o*s)+r*(l*i-a*s)}function zt(t,n,e){let r=n[0],i=n[1],a=n[2],o=n[3],s=n[4],l=n[5],u=n[6],c=n[7],f=n[8],h=e[0],d=e[1],_=e[2],b=e[3],m=e[4],p=e[5],v=e[6],g=e[7],w=e[8];return t[0]=h*r+d*o+_*u,t[1]=h*i+d*s+_*c,t[2]=h*a+d*l+_*f,t[3]=b*r+m*o+p*u,t[4]=b*i+m*s+p*c,t[5]=b*a+m*l+p*f,t[6]=v*r+g*o+w*u,t[7]=v*i+g*s+w*c,t[8]=v*a+g*l+w*f,t}function St(t,n,e){let r=n[0],i=n[1],a=n[2],o=n[3],s=n[4],l=n[5],u=n[6],c=n[7],f=n[8],h=e[0],d=e[1];return t[0]=r,t[1]=i,t[2]=a,t[3]=o,t[4]=s,t[5]=l,t[6]=h*r+d*o+u,t[7]=h*i+d*s+c,t[8]=h*a+d*l+f,t}function Rt(t,n,e){let r=n[0],i=n[1],a=n[2],o=n[3],s=n[4],l=n[5],u=n[6],c=n[7],f=n[8],h=Math.sin(e),d=Math.cos(e);return t[0]=d*r+h*o,t[1]=d*i+h*s,t[2]=d*a+h*l,t[3]=d*o-h*r,t[4]=d*s-h*i,t[5]=d*l-h*a,t[6]=u,t[7]=c,t[8]=f,t}function kt(t,n,e){let r=e[0],i=e[1];return t[0]=r*n[0],t[1]=r*n[1],t[2]=r*n[2],t[3]=i*n[3],t[4]=i*n[4],t[5]=i*n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t}function It(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=n[0],t[7]=n[1],t[8]=1,t}function Ot(t,n){let e=Math.sin(n),r=Math.cos(n);return t[0]=r,t[1]=e,t[2]=0,t[3]=-e,t[4]=r,t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function Dt(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=n[1],t[5]=0,t[6]=0,t[7]=0,t[8]=1,t}function Lt(t,n){return t[0]=n[0],t[1]=n[1],t[2]=0,t[3]=n[2],t[4]=n[3],t[5]=0,t[6]=n[4],t[7]=n[5],t[8]=1,t}function Nt(t,n){let e=n[0],r=n[1],i=n[2],a=n[3],o=e+e,s=r+r,l=i+i,u=e*o,c=r*o,f=r*s,h=i*o,d=i*s,_=i*l,b=a*o,m=a*s,p=a*l;return t[0]=1-f-_,t[3]=c-p,t[6]=h+m,t[1]=c+p,t[4]=1-u-_,t[7]=d-b,t[2]=h-m,t[5]=d+b,t[8]=1-u-f,t}function Ct(t,n){let e=n[0],r=n[1],i=n[2],a=n[3],o=n[4],s=n[5],l=n[6],u=n[7],c=n[8],f=n[9],h=n[10],d=n[11],_=n[12],b=n[13],m=n[14],p=n[15],v=e*s-r*o,g=e*l-i*o,w=e*u-a*o,x=r*l-i*s,y=r*u-a*s,M=i*u-a*l,E=c*b-f*_,T=c*m-h*_,A=c*p-d*_,z=f*m-h*b,S=f*p-d*b,R=h*p-d*m,k=v*R-g*S+w*z+x*A-y*T+M*E;return k?(k=1/k,t[0]=(s*R-l*S+u*z)*k,t[1]=(l*A-o*R-u*T)*k,t[2]=(o*S-s*A+u*E)*k,t[3]=(i*S-r*R-a*z)*k,t[4]=(e*R-i*A+a*T)*k,t[5]=(r*A-e*S-a*E)*k,t[6]=(b*M-m*y+p*x)*k,t[7]=(m*w-_*M-p*g)*k,t[8]=(_*y-b*w+p*v)*k,t):null}function Ft(t,n,e){return t[0]=2/n,t[1]=0,t[2]=0,t[3]=0,t[4]=-2/e,t[5]=0,t[6]=-1,t[7]=1,t[8]=1,t}function Bt(t){return"mat3("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+")"}function Ut(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2))}function qt(t,n,e){return t[0]=n[0]+e[0],t[1]=n[1]+e[1],t[2]=n[2]+e[2],t[3]=n[3]+e[3],t[4]=n[4]+e[4],t[5]=n[5]+e[5],t[6]=n[6]+e[6],t[7]=n[7]+e[7],t[8]=n[8]+e[8],t}function Pt(t,n,e){return t[0]=n[0]-e[0],t[1]=n[1]-e[1],t[2]=n[2]-e[2],t[3]=n[3]-e[3],t[4]=n[4]-e[4],t[5]=n[5]-e[5],t[6]=n[6]-e[6],t[7]=n[7]-e[7],t[8]=n[8]-e[8],t}function Zt(t,n,e){return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t[3]=n[3]*e,t[4]=n[4]*e,t[5]=n[5]*e,t[6]=n[6]*e,t[7]=n[7]*e,t[8]=n[8]*e,t}function Ht(t,n,e,r){return t[0]=n[0]+e[0]*r,t[1]=n[1]+e[1]*r,t[2]=n[2]+e[2]*r,t[3]=n[3]+e[3]*r,t[4]=n[4]+e[4]*r,t[5]=n[5]+e[5]*r,t[6]=n[6]+e[6]*r,t[7]=n[7]+e[7]*r,t[8]=n[8]+e[8]*r,t}function jt(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]}function Gt(t,n){let e=t[0],r=t[1],i=t[2],a=t[3],o=t[4],s=t[5],l=t[6],u=t[7],c=t[8],f=n[0],d=n[1],_=n[2],b=n[3],m=n[4],p=n[5],v=n[6],g=n[7],w=n[8];return Math.abs(e-f)<=h*Math.max(1,Math.abs(e),Math.abs(f))&&Math.abs(r-d)<=h*Math.max(1,Math.abs(r),Math.abs(d))&&Math.abs(i-_)<=h*Math.max(1,Math.abs(i),Math.abs(_))&&Math.abs(a-b)<=h*Math.max(1,Math.abs(a),Math.abs(b))&&Math.abs(o-m)<=h*Math.max(1,Math.abs(o),Math.abs(m))&&Math.abs(s-p)<=h*Math.max(1,Math.abs(s),Math.abs(p))&&Math.abs(l-v)<=h*Math.max(1,Math.abs(l),Math.abs(v))&&Math.abs(u-g)<=h*Math.max(1,Math.abs(u),Math.abs(g))&&Math.abs(c-w)<=h*Math.max(1,Math.abs(c),Math.abs(w))}const Vt=zt,Kt=Pt;function Wt(){let t=new d(16);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Yt(t){let n=new d(16);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n[9]=t[9],n[10]=t[10],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n}function Xt(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function $t(t,n,e,r,i,a,o,s,l,u,c,f,h,_,b,m){let p=new d(16);return p[0]=t,p[1]=n,p[2]=e,p[3]=r,p[4]=i,p[5]=a,p[6]=o,p[7]=s,p[8]=l,p[9]=u,p[10]=c,p[11]=f,p[12]=h,p[13]=_,p[14]=b,p[15]=m,p}function Jt(t,n,e,r,i,a,o,s,l,u,c,f,h,d,_,b,m){return t[0]=n,t[1]=e,t[2]=r,t[3]=i,t[4]=a,t[5]=o,t[6]=s,t[7]=l,t[8]=u,t[9]=c,t[10]=f,t[11]=h,t[12]=d,t[13]=_,t[14]=b,t[15]=m,t}function Qt(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function tn(t,n){if(t===n){let e=n[1],r=n[2],i=n[3],a=n[6],o=n[7],s=n[11];t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=e,t[6]=n[9],t[7]=n[13],t[8]=r,t[9]=a,t[11]=n[14],t[12]=i,t[13]=o,t[14]=s}else t[0]=n[0],t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=n[1],t[5]=n[5],t[6]=n[9],t[7]=n[13],t[8]=n[2],t[9]=n[6],t[10]=n[10],t[11]=n[14],t[12]=n[3],t[13]=n[7],t[14]=n[11],t[15]=n[15];return t}function nn(t,n){let e=n[0],r=n[1],i=n[2],a=n[3],o=n[4],s=n[5],l=n[6],u=n[7],c=n[8],f=n[9],h=n[10],d=n[11],_=n[12],b=n[13],m=n[14],p=n[15],v=e*s-r*o,g=e*l-i*o,w=e*u-a*o,x=r*l-i*s,y=r*u-a*s,M=i*u-a*l,E=c*b-f*_,T=c*m-h*_,A=c*p-d*_,z=f*m-h*b,S=f*p-d*b,R=h*p-d*m,k=v*R-g*S+w*z+x*A-y*T+M*E;return k?(k=1/k,t[0]=(s*R-l*S+u*z)*k,t[1]=(i*S-r*R-a*z)*k,t[2]=(b*M-m*y+p*x)*k,t[3]=(h*y-f*M-d*x)*k,t[4]=(l*A-o*R-u*T)*k,t[5]=(e*R-i*A+a*T)*k,t[6]=(m*w-_*M-p*g)*k,t[7]=(c*M-h*w+d*g)*k,t[8]=(o*S-s*A+u*E)*k,t[9]=(r*A-e*S-a*E)*k,t[10]=(_*y-b*w+p*v)*k,t[11]=(f*w-c*y-d*v)*k,t[12]=(s*T-o*z-l*E)*k,t[13]=(e*z-r*T+i*E)*k,t[14]=(b*g-_*x-m*v)*k,t[15]=(c*x-f*g+h*v)*k,t):null}function en(t,n){let e=n[0],r=n[1],i=n[2],a=n[3],o=n[4],s=n[5],l=n[6],u=n[7],c=n[8],f=n[9],h=n[10],d=n[11],_=n[12],b=n[13],m=n[14],p=n[15];return t[0]=s*(h*p-d*m)-f*(l*p-u*m)+b*(l*d-u*h),t[1]=-(r*(h*p-d*m)-f*(i*p-a*m)+b*(i*d-a*h)),t[2]=r*(l*p-u*m)-s*(i*p-a*m)+b*(i*u-a*l),t[3]=-(r*(l*d-u*h)-s*(i*d-a*h)+f*(i*u-a*l)),t[4]=-(o*(h*p-d*m)-c*(l*p-u*m)+_*(l*d-u*h)),t[5]=e*(h*p-d*m)-c*(i*p-a*m)+_*(i*d-a*h),t[6]=-(e*(l*p-u*m)-o*(i*p-a*m)+_*(i*u-a*l)),t[7]=e*(l*d-u*h)-o*(i*d-a*h)+c*(i*u-a*l),t[8]=o*(f*p-d*b)-c*(s*p-u*b)+_*(s*d-u*f),t[9]=-(e*(f*p-d*b)-c*(r*p-a*b)+_*(r*d-a*f)),t[10]=e*(s*p-u*b)-o*(r*p-a*b)+_*(r*u-a*s),t[11]=-(e*(s*d-u*f)-o*(r*d-a*f)+c*(r*u-a*s)),t[12]=-(o*(f*m-h*b)-c*(s*m-l*b)+_*(s*h-l*f)),t[13]=e*(f*m-h*b)-c*(r*m-i*b)+_*(r*h-i*f),t[14]=-(e*(s*m-l*b)-o*(r*m-i*b)+_*(r*l-i*s)),t[15]=e*(s*h-l*f)-o*(r*h-i*f)+c*(r*l-i*s),t}function rn(t){let n=t[0],e=t[1],r=t[2],i=t[3],a=t[4],o=t[5],s=t[6],l=t[7],u=t[8],c=t[9],f=t[10],h=t[11],d=t[12],_=t[13],b=t[14],m=t[15];return(n*o-e*a)*(f*m-h*b)-(n*s-r*a)*(c*m-h*_)+(n*l-i*a)*(c*b-f*_)+(e*s-r*o)*(u*m-h*d)-(e*l-i*o)*(u*b-f*d)+(r*l-i*s)*(u*_-c*d)}function an(t,n,e){let r=n[0],i=n[1],a=n[2],o=n[3],s=n[4],l=n[5],u=n[6],c=n[7],f=n[8],h=n[9],d=n[10],_=n[11],b=n[12],m=n[13],p=n[14],v=n[15],g=e[0],w=e[1],x=e[2],y=e[3];return t[0]=g*r+w*s+x*f+y*b,t[1]=g*i+w*l+x*h+y*m,t[2]=g*a+w*u+x*d+y*p,t[3]=g*o+w*c+x*_+y*v,g=e[4],w=e[5],x=e[6],y=e[7],t[4]=g*r+w*s+x*f+y*b,t[5]=g*i+w*l+x*h+y*m,t[6]=g*a+w*u+x*d+y*p,t[7]=g*o+w*c+x*_+y*v,g=e[8],w=e[9],x=e[10],y=e[11],t[8]=g*r+w*s+x*f+y*b,t[9]=g*i+w*l+x*h+y*m,t[10]=g*a+w*u+x*d+y*p,t[11]=g*o+w*c+x*_+y*v,g=e[12],w=e[13],x=e[14],y=e[15],t[12]=g*r+w*s+x*f+y*b,t[13]=g*i+w*l+x*h+y*m,t[14]=g*a+w*u+x*d+y*p,t[15]=g*o+w*c+x*_+y*v,t}function on(t,n,e){let r,i,a,o,s,l,u,c,f,h,d,_,b=e[0],m=e[1],p=e[2];return n===t?(t[12]=n[0]*b+n[4]*m+n[8]*p+n[12],t[13]=n[1]*b+n[5]*m+n[9]*p+n[13],t[14]=n[2]*b+n[6]*m+n[10]*p+n[14],t[15]=n[3]*b+n[7]*m+n[11]*p+n[15]):(r=n[0],i=n[1],a=n[2],o=n[3],s=n[4],l=n[5],u=n[6],c=n[7],f=n[8],h=n[9],d=n[10],_=n[11],t[0]=r,t[1]=i,t[2]=a,t[3]=o,t[4]=s,t[5]=l,t[6]=u,t[7]=c,t[8]=f,t[9]=h,t[10]=d,t[11]=_,t[12]=r*b+s*m+f*p+n[12],t[13]=i*b+l*m+h*p+n[13],t[14]=a*b+u*m+d*p+n[14],t[15]=o*b+c*m+_*p+n[15]),t}function sn(t,n,e){let r=e[0],i=e[1],a=e[2];return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*i,t[5]=n[5]*i,t[6]=n[6]*i,t[7]=n[7]*i,t[8]=n[8]*a,t[9]=n[9]*a,t[10]=n[10]*a,t[11]=n[11]*a,t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function ln(t,n,e,r){let i,a,o,s,l,u,c,f,d,_,b,m,p,v,g,w,x,y,M,E,T,A,z,S,R=r[0],k=r[1],I=r[2],O=Math.sqrt(R*R+k*k+I*I);return Math.abs(O)<h?null:(R*=O=1/O,k*=O,I*=O,i=Math.sin(e),o=1-(a=Math.cos(e)),s=n[0],l=n[1],u=n[2],c=n[3],f=n[4],d=n[5],_=n[6],b=n[7],m=n[8],p=n[9],v=n[10],g=n[11],w=R*R*o+a,x=k*R*o+I*i,y=I*R*o-k*i,M=R*k*o-I*i,E=k*k*o+a,T=I*k*o+R*i,A=R*I*o+k*i,z=k*I*o-R*i,S=I*I*o+a,t[0]=s*w+f*x+m*y,t[1]=l*w+d*x+p*y,t[2]=u*w+_*x+v*y,t[3]=c*w+b*x+g*y,t[4]=s*M+f*E+m*T,t[5]=l*M+d*E+p*T,t[6]=u*M+_*E+v*T,t[7]=c*M+b*E+g*T,t[8]=s*A+f*z+m*S,t[9]=l*A+d*z+p*S,t[10]=u*A+_*z+v*S,t[11]=c*A+b*z+g*S,n!==t&&(t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t)}function un(t,n,e){let r=Math.sin(e),i=Math.cos(e),a=n[4],o=n[5],s=n[6],l=n[7],u=n[8],c=n[9],f=n[10],h=n[11];return n!==t&&(t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[4]=a*i+u*r,t[5]=o*i+c*r,t[6]=s*i+f*r,t[7]=l*i+h*r,t[8]=u*i-a*r,t[9]=c*i-o*r,t[10]=f*i-s*r,t[11]=h*i-l*r,t}function cn(t,n,e){let r=Math.sin(e),i=Math.cos(e),a=n[0],o=n[1],s=n[2],l=n[3],u=n[8],c=n[9],f=n[10],h=n[11];return n!==t&&(t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=a*i-u*r,t[1]=o*i-c*r,t[2]=s*i-f*r,t[3]=l*i-h*r,t[8]=a*r+u*i,t[9]=o*r+c*i,t[10]=s*r+f*i,t[11]=l*r+h*i,t}function fn(t,n,e){let r=Math.sin(e),i=Math.cos(e),a=n[0],o=n[1],s=n[2],l=n[3],u=n[4],c=n[5],f=n[6],h=n[7];return n!==t&&(t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=a*i+u*r,t[1]=o*i+c*r,t[2]=s*i+f*r,t[3]=l*i+h*r,t[4]=u*i-a*r,t[5]=c*i-o*r,t[6]=f*i-s*r,t[7]=h*i-l*r,t}function hn(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function dn(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=n[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function _n(t,n,e){let r,i,a,o=e[0],s=e[1],l=e[2],u=Math.sqrt(o*o+s*s+l*l);return Math.abs(u)<h?null:(o*=u=1/u,s*=u,l*=u,r=Math.sin(n),a=1-(i=Math.cos(n)),t[0]=o*o*a+i,t[1]=s*o*a+l*r,t[2]=l*o*a-s*r,t[3]=0,t[4]=o*s*a-l*r,t[5]=s*s*a+i,t[6]=l*s*a+o*r,t[7]=0,t[8]=o*l*a+s*r,t[9]=s*l*a-o*r,t[10]=l*l*a+i,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function bn(t,n){let e=Math.sin(n),r=Math.cos(n);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=e,t[7]=0,t[8]=0,t[9]=-e,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function mn(t,n){let e=Math.sin(n),r=Math.cos(n);return t[0]=r,t[1]=0,t[2]=-e,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=e,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function pn(t,n){let e=Math.sin(n),r=Math.cos(n);return t[0]=r,t[1]=e,t[2]=0,t[3]=0,t[4]=-e,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function vn(t,n,e){let r=n[0],i=n[1],a=n[2],o=n[3],s=r+r,l=i+i,u=a+a,c=r*s,f=r*l,h=r*u,d=i*l,_=i*u,b=a*u,m=o*s,p=o*l,v=o*u;return t[0]=1-(d+b),t[1]=f+v,t[2]=h-p,t[3]=0,t[4]=f-v,t[5]=1-(c+b),t[6]=_+m,t[7]=0,t[8]=h+p,t[9]=_-m,t[10]=1-(c+d),t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function gn(t,n){return t[0]=n[12],t[1]=n[13],t[2]=n[14],t}function wn(t,n){let e=n[0],r=n[1],i=n[2],a=n[4],o=n[5],s=n[6],l=n[8],u=n[9],c=n[10];return t[0]=Math.sqrt(e*e+r*r+i*i),t[1]=Math.sqrt(a*a+o*o+s*s),t[2]=Math.sqrt(l*l+u*u+c*c),t}function xn(t,n){let e=n[0]+n[5]+n[10],r=0;return e>0?(r=2*Math.sqrt(e+1),t[3]=.25*r,t[0]=(n[6]-n[9])/r,t[1]=(n[8]-n[2])/r,t[2]=(n[1]-n[4])/r):n[0]>n[5]&&n[0]>n[10]?(r=2*Math.sqrt(1+n[0]-n[5]-n[10]),t[3]=(n[6]-n[9])/r,t[0]=.25*r,t[1]=(n[1]+n[4])/r,t[2]=(n[8]+n[2])/r):n[5]>n[10]?(r=2*Math.sqrt(1+n[5]-n[0]-n[10]),t[3]=(n[8]-n[2])/r,t[0]=(n[1]+n[4])/r,t[1]=.25*r,t[2]=(n[6]+n[9])/r):(r=2*Math.sqrt(1+n[10]-n[0]-n[5]),t[3]=(n[1]-n[4])/r,t[0]=(n[8]+n[2])/r,t[1]=(n[6]+n[9])/r,t[2]=.25*r),t}function yn(t,n,e,r){let i=n[0],a=n[1],o=n[2],s=n[3],l=i+i,u=a+a,c=o+o,f=i*l,h=i*u,d=i*c,_=a*u,b=a*c,m=o*c,p=s*l,v=s*u,g=s*c,w=r[0],x=r[1],y=r[2];return t[0]=(1-(_+m))*w,t[1]=(h+g)*w,t[2]=(d-v)*w,t[3]=0,t[4]=(h-g)*x,t[5]=(1-(f+m))*x,t[6]=(b+p)*x,t[7]=0,t[8]=(d+v)*y,t[9]=(b-p)*y,t[10]=(1-(f+_))*y,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function Mn(t,n,e,r,i){let a=n[0],o=n[1],s=n[2],l=n[3],u=a+a,c=o+o,f=s+s,h=a*u,d=a*c,_=a*f,b=o*c,m=o*f,p=s*f,v=l*u,g=l*c,w=l*f,x=r[0],y=r[1],M=r[2],E=i[0],T=i[1],A=i[2],z=(1-(b+p))*x,S=(d+w)*x,R=(_-g)*x,k=(d-w)*y,I=(1-(h+p))*y,O=(m+v)*y,D=(_+g)*M,L=(m-v)*M,N=(1-(h+b))*M;return t[0]=z,t[1]=S,t[2]=R,t[3]=0,t[4]=k,t[5]=I,t[6]=O,t[7]=0,t[8]=D,t[9]=L,t[10]=N,t[11]=0,t[12]=e[0]+E-(z*E+k*T+D*A),t[13]=e[1]+T-(S*E+I*T+L*A),t[14]=e[2]+A-(R*E+O*T+N*A),t[15]=1,t}function En(t,n){let e=n[0],r=n[1],i=n[2],a=n[3],o=e+e,s=r+r,l=i+i,u=e*o,c=r*o,f=r*s,h=i*o,d=i*s,_=i*l,b=a*o,m=a*s,p=a*l;return t[0]=1-f-_,t[1]=c+p,t[2]=h-m,t[3]=0,t[4]=c-p,t[5]=1-u-_,t[6]=d+b,t[7]=0,t[8]=h+m,t[9]=d-b,t[10]=1-u-f,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Tn(t,n,e,r,i,a,o){let s=1/(e-n),l=1/(i-r),u=1/(a-o);return t[0]=2*a*s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*a*l,t[6]=0,t[7]=0,t[8]=(e+n)*s,t[9]=(i+r)*l,t[10]=(o+a)*u,t[11]=-1,t[12]=0,t[13]=0,t[14]=o*a*2*u,t[15]=0,t}function An(t,n,e,r,i){let a=1/Math.tan(n/2),o=1/(r-i);return t[0]=a/e,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=a,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=(i+r)*o,t[11]=-1,t[12]=0,t[13]=0,t[14]=2*i*r*o,t[15]=0,t}function zn(t,n,e,r){let i=Math.tan(n.upDegrees*Math.PI/180),a=Math.tan(n.downDegrees*Math.PI/180),o=Math.tan(n.leftDegrees*Math.PI/180),s=Math.tan(n.rightDegrees*Math.PI/180),l=2/(o+s),u=2/(i+a);return t[0]=l,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=u,t[6]=0,t[7]=0,t[8]=-(o-s)*l*.5,t[9]=(i-a)*u*.5,t[10]=r/(e-r),t[11]=-1,t[12]=0,t[13]=0,t[14]=r*e/(e-r),t[15]=0,t}function Sn(t,n,e,r,i,a,o){let s=1/(n-e),l=1/(r-i),u=1/(a-o);return t[0]=-2*s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*l,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*u,t[11]=0,t[12]=(n+e)*s,t[13]=(i+r)*l,t[14]=(o+a)*u,t[15]=1,t}function Rn(t,n,e,r){let i,a,o,s,l,u,c,f,d,_,b=n[0],m=n[1],p=n[2],v=r[0],g=r[1],w=r[2],x=e[0],y=e[1],M=e[2];return Math.abs(b-x)<h&&Math.abs(m-y)<h&&Math.abs(p-M)<h?Qt(t):(c=b-x,f=m-y,d=p-M,i=g*(d*=_=1/Math.sqrt(c*c+f*f+d*d))-w*(f*=_),a=w*(c*=_)-v*d,o=v*f-g*c,(_=Math.sqrt(i*i+a*a+o*o))?(i*=_=1/_,a*=_,o*=_):(i=0,a=0,o=0),s=f*o-d*a,l=d*i-c*o,u=c*a-f*i,(_=Math.sqrt(s*s+l*l+u*u))?(s*=_=1/_,l*=_,u*=_):(s=0,l=0,u=0),t[0]=i,t[1]=s,t[2]=c,t[3]=0,t[4]=a,t[5]=l,t[6]=f,t[7]=0,t[8]=o,t[9]=u,t[10]=d,t[11]=0,t[12]=-(i*b+a*m+o*p),t[13]=-(s*b+l*m+u*p),t[14]=-(c*b+f*m+d*p),t[15]=1,t)}function kn(t,n,e,r){let i=n[0],a=n[1],o=n[2],s=r[0],l=r[1],u=r[2],c=i-e[0],f=a-e[1],h=o-e[2],d=c*c+f*f+h*h;d>0&&(c*=d=1/Math.sqrt(d),f*=d,h*=d);let _=l*h-u*f,b=u*c-s*h,m=s*f-l*c;return(d=_*_+b*b+m*m)>0&&(_*=d=1/Math.sqrt(d),b*=d,m*=d),t[0]=_,t[1]=b,t[2]=m,t[3]=0,t[4]=f*m-h*b,t[5]=h*_-c*m,t[6]=c*b-f*_,t[7]=0,t[8]=c,t[9]=f,t[10]=h,t[11]=0,t[12]=i,t[13]=a,t[14]=o,t[15]=1,t}function In(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function On(t){return Math.sqrt(Math.pow(t[0],2)+Math.pow(t[1],2)+Math.pow(t[2],2)+Math.pow(t[3],2)+Math.pow(t[4],2)+Math.pow(t[5],2)+Math.pow(t[6],2)+Math.pow(t[7],2)+Math.pow(t[8],2)+Math.pow(t[9],2)+Math.pow(t[10],2)+Math.pow(t[11],2)+Math.pow(t[12],2)+Math.pow(t[13],2)+Math.pow(t[14],2)+Math.pow(t[15],2))}function Dn(t,n,e){return t[0]=n[0]+e[0],t[1]=n[1]+e[1],t[2]=n[2]+e[2],t[3]=n[3]+e[3],t[4]=n[4]+e[4],t[5]=n[5]+e[5],t[6]=n[6]+e[6],t[7]=n[7]+e[7],t[8]=n[8]+e[8],t[9]=n[9]+e[9],t[10]=n[10]+e[10],t[11]=n[11]+e[11],t[12]=n[12]+e[12],t[13]=n[13]+e[13],t[14]=n[14]+e[14],t[15]=n[15]+e[15],t}function Ln(t,n,e){return t[0]=n[0]-e[0],t[1]=n[1]-e[1],t[2]=n[2]-e[2],t[3]=n[3]-e[3],t[4]=n[4]-e[4],t[5]=n[5]-e[5],t[6]=n[6]-e[6],t[7]=n[7]-e[7],t[8]=n[8]-e[8],t[9]=n[9]-e[9],t[10]=n[10]-e[10],t[11]=n[11]-e[11],t[12]=n[12]-e[12],t[13]=n[13]-e[13],t[14]=n[14]-e[14],t[15]=n[15]-e[15],t}function Nn(t,n,e){return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t[3]=n[3]*e,t[4]=n[4]*e,t[5]=n[5]*e,t[6]=n[6]*e,t[7]=n[7]*e,t[8]=n[8]*e,t[9]=n[9]*e,t[10]=n[10]*e,t[11]=n[11]*e,t[12]=n[12]*e,t[13]=n[13]*e,t[14]=n[14]*e,t[15]=n[15]*e,t}function Cn(t,n,e,r){return t[0]=n[0]+e[0]*r,t[1]=n[1]+e[1]*r,t[2]=n[2]+e[2]*r,t[3]=n[3]+e[3]*r,t[4]=n[4]+e[4]*r,t[5]=n[5]+e[5]*r,t[6]=n[6]+e[6]*r,t[7]=n[7]+e[7]*r,t[8]=n[8]+e[8]*r,t[9]=n[9]+e[9]*r,t[10]=n[10]+e[10]*r,t[11]=n[11]+e[11]*r,t[12]=n[12]+e[12]*r,t[13]=n[13]+e[13]*r,t[14]=n[14]+e[14]*r,t[15]=n[15]+e[15]*r,t}function Fn(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]&&t[9]===n[9]&&t[10]===n[10]&&t[11]===n[11]&&t[12]===n[12]&&t[13]===n[13]&&t[14]===n[14]&&t[15]===n[15]}function Bn(t,n){let e=t[0],r=t[1],i=t[2],a=t[3],o=t[4],s=t[5],l=t[6],u=t[7],c=t[8],f=t[9],d=t[10],_=t[11],b=t[12],m=t[13],p=t[14],v=t[15],g=n[0],w=n[1],x=n[2],y=n[3],M=n[4],E=n[5],T=n[6],A=n[7],z=n[8],S=n[9],R=n[10],k=n[11],I=n[12],O=n[13],D=n[14],L=n[15];return Math.abs(e-g)<=h*Math.max(1,Math.abs(e),Math.abs(g))&&Math.abs(r-w)<=h*Math.max(1,Math.abs(r),Math.abs(w))&&Math.abs(i-x)<=h*Math.max(1,Math.abs(i),Math.abs(x))&&Math.abs(a-y)<=h*Math.max(1,Math.abs(a),Math.abs(y))&&Math.abs(o-M)<=h*Math.max(1,Math.abs(o),Math.abs(M))&&Math.abs(s-E)<=h*Math.max(1,Math.abs(s),Math.abs(E))&&Math.abs(l-T)<=h*Math.max(1,Math.abs(l),Math.abs(T))&&Math.abs(u-A)<=h*Math.max(1,Math.abs(u),Math.abs(A))&&Math.abs(c-z)<=h*Math.max(1,Math.abs(c),Math.abs(z))&&Math.abs(f-S)<=h*Math.max(1,Math.abs(f),Math.abs(S))&&Math.abs(d-R)<=h*Math.max(1,Math.abs(d),Math.abs(R))&&Math.abs(_-k)<=h*Math.max(1,Math.abs(_),Math.abs(k))&&Math.abs(b-I)<=h*Math.max(1,Math.abs(b),Math.abs(I))&&Math.abs(m-O)<=h*Math.max(1,Math.abs(m),Math.abs(O))&&Math.abs(p-D)<=h*Math.max(1,Math.abs(p),Math.abs(D))&&Math.abs(v-L)<=h*Math.max(1,Math.abs(v),Math.abs(L))}const Un=an,qn=Ln;function Pn(){let t=new d(3);return t[0]=0,t[1]=0,t[2]=0,t}function Zn(t){var n=new d(3);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n}function Hn(t){let n=t[0],e=t[1],r=t[2];return Math.sqrt(n*n+e*e+r*r)}function jn(t,n,e){let r=new d(3);return r[0]=t,r[1]=n,r[2]=e,r}function Gn(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t}function Vn(t,n,e,r){return t[0]=n,t[1]=e,t[2]=r,t}function Kn(t,n,e){return t[0]=n[0]+e[0],t[1]=n[1]+e[1],t[2]=n[2]+e[2],t}function Wn(t,n,e){return t[0]=n[0]-e[0],t[1]=n[1]-e[1],t[2]=n[2]-e[2],t}function Yn(t,n,e){return t[0]=n[0]*e[0],t[1]=n[1]*e[1],t[2]=n[2]*e[2],t}function Xn(t,n,e){return t[0]=n[0]/e[0],t[1]=n[1]/e[1],t[2]=n[2]/e[2],t}function $n(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t}function Jn(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t}function Qn(t,n,e){return t[0]=Math.min(n[0],e[0]),t[1]=Math.min(n[1],e[1]),t[2]=Math.min(n[2],e[2]),t}function te(t,n,e){return t[0]=Math.max(n[0],e[0]),t[1]=Math.max(n[1],e[1]),t[2]=Math.max(n[2],e[2]),t}function ne(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t}function ee(t,n,e){return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t}function re(t,n,e,r){return t[0]=n[0]+e[0]*r,t[1]=n[1]+e[1]*r,t[2]=n[2]+e[2]*r,t}function ie(t,n){let e=n[0]-t[0],r=n[1]-t[1],i=n[2]-t[2];return Math.sqrt(e*e+r*r+i*i)}function ae(t,n){let e=n[0]-t[0],r=n[1]-t[1],i=n[2]-t[2];return e*e+r*r+i*i}function oe(t){let n=t[0],e=t[1],r=t[2];return n*n+e*e+r*r}function se(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t}function le(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t}function ue(t,n){let e=n[0],r=n[1],i=n[2],a=e*e+r*r+i*i;return a>0&&(a=1/Math.sqrt(a),t[0]=n[0]*a,t[1]=n[1]*a,t[2]=n[2]*a),t}function ce(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function fe(t,n,e){let r=n[0],i=n[1],a=n[2],o=e[0],s=e[1],l=e[2];return t[0]=i*l-a*s,t[1]=a*o-r*l,t[2]=r*s-i*o,t}function he(t,n,e,r){let i=n[0],a=n[1],o=n[2];return t[0]=i+r*(e[0]-i),t[1]=a+r*(e[1]-a),t[2]=o+r*(e[2]-o),t}function de(t,n,e,r,i,a){let o=a*a,s=o*(2*a-3)+1,l=o*(a-2)+a,u=o*(a-1),c=o*(3-2*a);return t[0]=n[0]*s+e[0]*l+r[0]*u+i[0]*c,t[1]=n[1]*s+e[1]*l+r[1]*u+i[1]*c,t[2]=n[2]*s+e[2]*l+r[2]*u+i[2]*c,t}function _e(t,n,e,r,i,a){let o=1-a,s=o*o,l=a*a,u=s*o,c=3*a*s,f=3*l*o,h=l*a;return t[0]=n[0]*u+e[0]*c+r[0]*f+i[0]*h,t[1]=n[1]*u+e[1]*c+r[1]*f+i[1]*h,t[2]=n[2]*u+e[2]*c+r[2]*f+i[2]*h,t}function be(t,n){n=n||1;let e=2*_()*Math.PI,r=2*_()-1,i=Math.sqrt(1-r*r)*n;return t[0]=Math.cos(e)*i,t[1]=Math.sin(e)*i,t[2]=r*n,t}function me(t,n,e){let r=n[0],i=n[1],a=n[2],o=e[3]*r+e[7]*i+e[11]*a+e[15];return o=o||1,t[0]=(e[0]*r+e[4]*i+e[8]*a+e[12])/o,t[1]=(e[1]*r+e[5]*i+e[9]*a+e[13])/o,t[2]=(e[2]*r+e[6]*i+e[10]*a+e[14])/o,t}function pe(t,n,e){let r=n[0],i=n[1],a=n[2];return t[0]=r*e[0]+i*e[3]+a*e[6],t[1]=r*e[1]+i*e[4]+a*e[7],t[2]=r*e[2]+i*e[5]+a*e[8],t}function ve(t,n,e){let r=n[0],i=n[1],a=n[2],o=e[0],s=e[1],l=e[2],u=e[3],c=u*r+s*a-l*i,f=u*i+l*r-o*a,h=u*a+o*i-s*r,d=-o*r-s*i-l*a;return t[0]=c*u+d*-o+f*-l-h*-s,t[1]=f*u+d*-s+h*-o-c*-l,t[2]=h*u+d*-l+c*-s-f*-o,t}function ge(t,n,e,r){let i=[],a=[];return i[0]=n[0]-e[0],i[1]=n[1]-e[1],i[2]=n[2]-e[2],a[0]=i[0],a[1]=i[1]*Math.cos(r)-i[2]*Math.sin(r),a[2]=i[1]*Math.sin(r)+i[2]*Math.cos(r),t[0]=a[0]+e[0],t[1]=a[1]+e[1],t[2]=a[2]+e[2],t}function we(t,n,e,r){let i=[],a=[];return i[0]=n[0]-e[0],i[1]=n[1]-e[1],i[2]=n[2]-e[2],a[0]=i[2]*Math.sin(r)+i[0]*Math.cos(r),a[1]=i[1],a[2]=i[2]*Math.cos(r)-i[0]*Math.sin(r),t[0]=a[0]+e[0],t[1]=a[1]+e[1],t[2]=a[2]+e[2],t}function xe(t,n,e,r){let i=[],a=[];return i[0]=n[0]-e[0],i[1]=n[1]-e[1],i[2]=n[2]-e[2],a[0]=i[0]*Math.cos(r)-i[1]*Math.sin(r),a[1]=i[0]*Math.sin(r)+i[1]*Math.cos(r),a[2]=i[2],t[0]=a[0]+e[0],t[1]=a[1]+e[1],t[2]=a[2]+e[2],t}function ye(t,n){let e=jn(t[0],t[1],t[2]),r=jn(n[0],n[1],n[2]);ue(e,e),ue(r,r);let i=ce(e,r);return i>1?0:i<-1?Math.PI:Math.acos(i)}function Me(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function Ee(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]}function Te(t,n){let e=t[0],r=t[1],i=t[2],a=n[0],o=n[1],s=n[2];return Math.abs(e-a)<=h*Math.max(1,Math.abs(e),Math.abs(a))&&Math.abs(r-o)<=h*Math.max(1,Math.abs(r),Math.abs(o))&&Math.abs(i-s)<=h*Math.max(1,Math.abs(i),Math.abs(s))}const Ae=Wn,ze=Yn,Se=Xn,Re=ie,ke=ae,Ie=Hn,Oe=oe,De=function(){let t=Pn();return function(n,e,r,i,a,o){let s,l;for(e||(e=3),r||(r=0),l=i?Math.min(i*e+r,n.length):n.length,s=r;s<l;s+=e)t[0]=n[s],t[1]=n[s+1],t[2]=n[s+2],a(t,t,o),n[s]=t[0],n[s+1]=t[1],n[s+2]=t[2];return n}}();function Le(){let t=new d(4);return t[0]=0,t[1]=0,t[2]=0,t[3]=0,t}function Ne(t){let n=new d(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n}function Ce(t,n,e,r){let i=new d(4);return i[0]=t,i[1]=n,i[2]=e,i[3]=r,i}function Fe(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t}function Be(t,n,e,r,i){return t[0]=n,t[1]=e,t[2]=r,t[3]=i,t}function Ue(t,n,e){return t[0]=n[0]+e[0],t[1]=n[1]+e[1],t[2]=n[2]+e[2],t[3]=n[3]+e[3],t}function qe(t,n,e){return t[0]=n[0]-e[0],t[1]=n[1]-e[1],t[2]=n[2]-e[2],t[3]=n[3]-e[3],t}function Pe(t,n,e){return t[0]=n[0]*e[0],t[1]=n[1]*e[1],t[2]=n[2]*e[2],t[3]=n[3]*e[3],t}function Ze(t,n,e){return t[0]=n[0]/e[0],t[1]=n[1]/e[1],t[2]=n[2]/e[2],t[3]=n[3]/e[3],t}function He(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t[3]=Math.ceil(n[3]),t}function je(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t[3]=Math.floor(n[3]),t}function Ge(t,n,e){return t[0]=Math.min(n[0],e[0]),t[1]=Math.min(n[1],e[1]),t[2]=Math.min(n[2],e[2]),t[3]=Math.min(n[3],e[3]),t}function Ve(t,n,e){return t[0]=Math.max(n[0],e[0]),t[1]=Math.max(n[1],e[1]),t[2]=Math.max(n[2],e[2]),t[3]=Math.max(n[3],e[3]),t}function Ke(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t[3]=Math.round(n[3]),t}function We(t,n,e){return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t[3]=n[3]*e,t}function Ye(t,n,e,r){return t[0]=n[0]+e[0]*r,t[1]=n[1]+e[1]*r,t[2]=n[2]+e[2]*r,t[3]=n[3]+e[3]*r,t}function Xe(t,n){let e=n[0]-t[0],r=n[1]-t[1],i=n[2]-t[2],a=n[3]-t[3];return Math.sqrt(e*e+r*r+i*i+a*a)}function $e(t,n){let e=n[0]-t[0],r=n[1]-t[1],i=n[2]-t[2],a=n[3]-t[3];return e*e+r*r+i*i+a*a}function Je(t){let n=t[0],e=t[1],r=t[2],i=t[3];return Math.sqrt(n*n+e*e+r*r+i*i)}function Qe(t){let n=t[0],e=t[1],r=t[2],i=t[3];return n*n+e*e+r*r+i*i}function tr(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=-n[3],t}function nr(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t[3]=1/n[3],t}function er(t,n){let e=n[0],r=n[1],i=n[2],a=n[3],o=e*e+r*r+i*i+a*a;return o>0&&(o=1/Math.sqrt(o),t[0]=e*o,t[1]=r*o,t[2]=i*o,t[3]=a*o),t}function rr(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]+t[3]*n[3]}function ir(t,n,e,r){let i=n[0],a=n[1],o=n[2],s=n[3];return t[0]=i+r*(e[0]-i),t[1]=a+r*(e[1]-a),t[2]=o+r*(e[2]-o),t[3]=s+r*(e[3]-s),t}function ar(t,n){return n=n||1,t[0]=_(),t[1]=_(),t[2]=_(),t[3]=_(),er(t,t),We(t,t,n),t}function or(t,n,e){let r=n[0],i=n[1],a=n[2],o=n[3];return t[0]=e[0]*r+e[4]*i+e[8]*a+e[12]*o,t[1]=e[1]*r+e[5]*i+e[9]*a+e[13]*o,t[2]=e[2]*r+e[6]*i+e[10]*a+e[14]*o,t[3]=e[3]*r+e[7]*i+e[11]*a+e[15]*o,t}function sr(t,n,e){let r=n[0],i=n[1],a=n[2],o=e[0],s=e[1],l=e[2],u=e[3],c=u*r+s*a-l*i,f=u*i+l*r-o*a,h=u*a+o*i-s*r,d=-o*r-s*i-l*a;return t[0]=c*u+d*-o+f*-l-h*-s,t[1]=f*u+d*-s+h*-o-c*-l,t[2]=h*u+d*-l+c*-s-f*-o,t[3]=n[3],t}function lr(t){return"vec4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}function ur(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]}function cr(t,n){let e=t[0],r=t[1],i=t[2],a=t[3],o=n[0],s=n[1],l=n[2],u=n[3];return Math.abs(e-o)<=h*Math.max(1,Math.abs(e),Math.abs(o))&&Math.abs(r-s)<=h*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(i-l)<=h*Math.max(1,Math.abs(i),Math.abs(l))&&Math.abs(a-u)<=h*Math.max(1,Math.abs(a),Math.abs(u))}const fr=qe,hr=Pe,dr=Ze,_r=Xe,br=$e,mr=Je,pr=Qe,vr=function(){let t=Le();return function(n,e,r,i,a,o){let s,l;for(e||(e=4),r||(r=0),l=i?Math.min(i*e+r,n.length):n.length,s=r;s<l;s+=e)t[0]=n[s],t[1]=n[s+1],t[2]=n[s+2],t[3]=n[s+3],a(t,t,o),n[s]=t[0],n[s+1]=t[1],n[s+2]=t[2],n[s+3]=t[3];return n}}();function gr(){let t=new d(4);return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function wr(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function xr(t,n,e){e*=.5;let r=Math.sin(e);return t[0]=r*n[0],t[1]=r*n[1],t[2]=r*n[2],t[3]=Math.cos(e),t}function yr(t,n){let e=2*Math.acos(n[3]),r=Math.sin(e/2);return 0!=r?(t[0]=n[0]/r,t[1]=n[1]/r,t[2]=n[2]/r):(t[0]=1,t[1]=0,t[2]=0),e}function Mr(t,n,e){let r=n[0],i=n[1],a=n[2],o=n[3],s=e[0],l=e[1],u=e[2],c=e[3];return t[0]=r*c+o*s+i*u-a*l,t[1]=i*c+o*l+a*s-r*u,t[2]=a*c+o*u+r*l-i*s,t[3]=o*c-r*s-i*l-a*u,t}function Er(t,n,e){e*=.5;let r=n[0],i=n[1],a=n[2],o=n[3],s=Math.sin(e),l=Math.cos(e);return t[0]=r*l+o*s,t[1]=i*l+a*s,t[2]=a*l-i*s,t[3]=o*l-r*s,t}function Tr(t,n,e){e*=.5;let r=n[0],i=n[1],a=n[2],o=n[3],s=Math.sin(e),l=Math.cos(e);return t[0]=r*l-a*s,t[1]=i*l+o*s,t[2]=a*l+r*s,t[3]=o*l-i*s,t}function Ar(t,n,e){e*=.5;let r=n[0],i=n[1],a=n[2],o=n[3],s=Math.sin(e),l=Math.cos(e);return t[0]=r*l+i*s,t[1]=i*l-r*s,t[2]=a*l+o*s,t[3]=o*l-a*s,t}function zr(t,n){let e=n[0],r=n[1],i=n[2];return t[0]=e,t[1]=r,t[2]=i,t[3]=Math.sqrt(Math.abs(1-e*e-r*r-i*i)),t}function Sr(t,n,e,r){let i,a,o,s,l,u=n[0],c=n[1],f=n[2],h=n[3],d=e[0],_=e[1],b=e[2],m=e[3];return(a=u*d+c*_+f*b+h*m)<0&&(a=-a,d=-d,_=-_,b=-b,m=-m),1-a>1e-6?(i=Math.acos(a),o=Math.sin(i),s=Math.sin((1-r)*i)/o,l=Math.sin(r*i)/o):(s=1-r,l=r),t[0]=s*u+l*d,t[1]=s*c+l*_,t[2]=s*f+l*b,t[3]=s*h+l*m,t}function Rr(t,n){let e=n[0],r=n[1],i=n[2],a=n[3],o=e*e+r*r+i*i+a*a,s=o?1/o:0;return t[0]=-e*s,t[1]=-r*s,t[2]=-i*s,t[3]=a*s,t}function kr(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=n[3],t}function Ir(t,n){let e,r=n[0]+n[4]+n[8];if(r>0)e=Math.sqrt(r+1),t[3]=.5*e,e=.5/e,t[0]=(n[5]-n[7])*e,t[1]=(n[6]-n[2])*e,t[2]=(n[1]-n[3])*e;else{let r=0;n[4]>n[0]&&(r=1),n[8]>n[3*r+r]&&(r=2);let i=(r+1)%3,a=(r+2)%3;e=Math.sqrt(n[3*r+r]-n[3*i+i]-n[3*a+a]+1),t[r]=.5*e,e=.5/e,t[3]=(n[3*i+a]-n[3*a+i])*e,t[i]=(n[3*i+r]+n[3*r+i])*e,t[a]=(n[3*a+r]+n[3*r+a])*e}return t}function Or(t,n,e,r){let i=.5*Math.PI/180;n*=i,e*=i,r*=i;let a=Math.sin(n),o=Math.cos(n),s=Math.sin(e),l=Math.cos(e),u=Math.sin(r),c=Math.cos(r);return t[0]=a*l*c-o*s*u,t[1]=o*s*c+a*l*u,t[2]=o*l*u-a*s*c,t[3]=o*l*c+a*s*u,t}function Dr(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}const Lr=Ne,Nr=Ce,Cr=Fe,Fr=Be,Br=Ue,Ur=Mr,qr=We,Pr=rr,Zr=ir,Hr=Je,jr=Hr,Gr=Qe,Vr=Gr,Kr=er,Wr=ur,Yr=cr,Xr=function(){let t=Pn(),n=jn(1,0,0),e=jn(0,1,0);return function(r,i,a){let o=ce(i,a);return o<-.999999?(fe(t,n,i),Ie(t)<1e-6&&fe(t,e,i),ue(t,t),xr(r,t,Math.PI),r):o>.999999?(r[0]=0,r[1]=0,r[2]=0,r[3]=1,r):(fe(t,i,a),r[0]=t[0],r[1]=t[1],r[2]=t[2],r[3]=1+o,Kr(r,r))}}(),$r=function(){let t=gr(),n=gr();return function(e,r,i,a,o,s){return Sr(t,r,o,s),Sr(n,i,a,s),Sr(e,t,n,2*s*(1-s)),e}}(),Jr=function(){let t=mt();return function(n,e,r,i){return t[0]=r[0],t[3]=r[1],t[6]=r[2],t[1]=i[0],t[4]=i[1],t[7]=i[2],t[2]=-e[0],t[5]=-e[1],t[8]=-e[2],Kr(n,Ir(n,t))}}();function Qr(){let t=new d(2);return t[0]=0,t[1]=0,t}function ti(t){let n=new d(2);return n[0]=t[0],n[1]=t[1],n}function ni(t,n){let e=new d(2);return e[0]=t,e[1]=n,e}function ei(t,n){return t[0]=n[0],t[1]=n[1],t}function ri(t,n,e){return t[0]=n,t[1]=e,t}function ii(t,n,e){return t[0]=n[0]+e[0],t[1]=n[1]+e[1],t}function ai(t,n,e){return t[0]=n[0]-e[0],t[1]=n[1]-e[1],t}function oi(t,n,e){return t[0]=n[0]*e[0],t[1]=n[1]*e[1],t}function si(t,n,e){return t[0]=n[0]/e[0],t[1]=n[1]/e[1],t}function li(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t}function ui(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t}function ci(t,n,e){return t[0]=Math.min(n[0],e[0]),t[1]=Math.min(n[1],e[1]),t}function fi(t,n,e){return t[0]=Math.max(n[0],e[0]),t[1]=Math.max(n[1],e[1]),t}function hi(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t}function di(t,n,e){return t[0]=n[0]*e,t[1]=n[1]*e,t}function _i(t,n,e,r){return t[0]=n[0]+e[0]*r,t[1]=n[1]+e[1]*r,t}function bi(t,n){var e=n[0]-t[0],r=n[1]-t[1];return Math.sqrt(e*e+r*r)}function mi(t,n){var e=n[0]-t[0],r=n[1]-t[1];return e*e+r*r}function pi(t){var n=t[0],e=t[1];return Math.sqrt(n*n+e*e)}function vi(t){var n=t[0],e=t[1];return n*n+e*e}function gi(t,n){return t[0]=-n[0],t[1]=-n[1],t}function wi(t,n){return t[0]=1/n[0],t[1]=1/n[1],t}function xi(t,n){var e=n[0],r=n[1],i=e*e+r*r;return i>0&&(i=1/Math.sqrt(i),t[0]=n[0]*i,t[1]=n[1]*i),t}function yi(t,n){return t[0]*n[0]+t[1]*n[1]}function Mi(t,n,e){var r=n[0]*e[1]-n[1]*e[0];return t[0]=t[1]=0,t[2]=r,t}function Ei(t,n,e,r){var i=n[0],a=n[1];return t[0]=i+r*(e[0]-i),t[1]=a+r*(e[1]-a),t}function Ti(t,n){n=n||1;var e=2*_()*Math.PI;return t[0]=Math.cos(e)*n,t[1]=Math.sin(e)*n,t}function Ai(t,n,e){var r=n[0],i=n[1];return t[0]=e[0]*r+e[2]*i,t[1]=e[1]*r+e[3]*i,t}function zi(t,n,e){var r=n[0],i=n[1];return t[0]=e[0]*r+e[2]*i+e[4],t[1]=e[1]*r+e[3]*i+e[5],t}function Si(t,n,e){var r=n[0],i=n[1];return t[0]=e[0]*r+e[3]*i+e[6],t[1]=e[1]*r+e[4]*i+e[7],t}function Ri(t,n,e){let r=n[0],i=n[1];return t[0]=e[0]*r+e[4]*i+e[12],t[1]=e[1]*r+e[5]*i+e[13],t}function ki(t){return"vec2("+t[0]+", "+t[1]+")"}function Ii(t,n){return t[0]===n[0]&&t[1]===n[1]}function Oi(t,n){let e=t[0],r=t[1],i=n[0],a=n[1];return Math.abs(e-i)<=h*Math.max(1,Math.abs(e),Math.abs(i))&&Math.abs(r-a)<=h*Math.max(1,Math.abs(r),Math.abs(a))}const Di=pi,Li=ai,Ni=oi,Ci=si,Fi=bi,Bi=mi,Ui=vi,qi=function(){let t=Qr();return function(n,e,r,i,a,o){let s,l;for(e||(e=2),r||(r=0),l=i?Math.min(i*e+r,n.length):n.length,s=r;s<l;s+=e)t[0]=n[s],t[1]=n[s+1],a(t,t,o),n[s]=t[0],n[s+1]=t[1];return n}}();e.d(n,"glMatrix",function(){return r}),e.d(n,"mat2",function(){return i}),e.d(n,"mat2d",function(){return a}),e.d(n,"mat3",function(){return o}),e.d(n,"mat4",function(){return s}),e.d(n,"quat",function(){return c}),e.d(n,"vec2",function(){return f}),e.d(n,"vec3",function(){return l}),e.d(n,"vec4",function(){return u})},function(t,n,e){"use strict"},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const r=e(1);class i{constructor(t=r.vec3.fromValues(1/0,1/0,1/0),n=r.vec3.fromValues(-1/0,-1/0,-1/0)){this.min=t,this.max=n}transform(t){const n=r.vec3.fromValues(1/0,1/0,1/0),e=r.vec3.fromValues(-1/0,-1/0,-1/0),i=r.vec3.create(),a=t=>{r.vec3.transformMat4(i,i,t),r.vec3.min(n,n,i),r.vec3.max(e,e,i)};r.vec3.set(i,this.min[0],this.min[1],this.min[2]),a(t),r.vec3.set(i,this.min[0],this.min[1],this.max[2]),a(t),r.vec3.set(i,this.min[0],this.max[1],this.min[2]),a(t),r.vec3.set(i,this.min[0],this.max[1],this.max[2]),a(t),r.vec3.set(i,this.max[0],this.min[1],this.min[2]),a(t),r.vec3.set(i,this.max[0],this.min[1],this.max[2]),a(t),r.vec3.set(i,this.max[0],this.max[1],this.min[2]),a(t),r.vec3.set(i,this.max[0],this.max[1],this.max[2]),a(t),this.min=n,this.max=e}get size(){return r.vec3.sub(r.vec3.create(),this.max,this.min)}get center(){const t=r.vec3.create();return r.vec3.add(t,this.min,this.max),r.vec3.scale(t,t,.5)}union(t){return r.vec3.min(this.min,this.min,t.min),r.vec3.max(this.max,this.max,t.max),this}clone(){return new i(r.vec3.clone(this.min),r.vec3.clone(this.max))}}n.Aabb3=i},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const r=e(0);function i(t){return`a_${t.toLowerCase()}`}n.ATTRIB_LOCATIONS={POSITION:0,NORMAL:1,TANGENT:2,TEXCOORD_0:3,TEXCOORD_1:4,COLOR_0:5,JOINTS_0:6,WEIGHTS_0:7},n.attribName=i,function(t){t[t.HAS_NORMALS=1]="HAS_NORMALS",t[t.HAS_TANGENTS=2]="HAS_TANGENTS",t[t.HAS_UV=4]="HAS_UV",t[t.HAS_COLORS=8]="HAS_COLORS",t[t.USE_IBL=16]="USE_IBL",t[t.HAS_BASECOLORMAP=32]="HAS_BASECOLORMAP",t[t.HAS_NORMALMAP=64]="HAS_NORMALMAP",t[t.HAS_EMISSIVEMAP=128]="HAS_EMISSIVEMAP",t[t.HAS_METALROUGHNESSMAP=256]="HAS_METALROUGHNESSMAP",t[t.HAS_OCCLUSIONMAP=512]="HAS_OCCLUSIONMAP",t[t.USE_TEX_LOD=1024]="USE_TEX_LOD"}(n.ShaderFlags||(n.ShaderFlags={}));class a{constructor(t){this.u_ViewProjection=null,this.u_ModelMatrix=null,this.u_NormalMatrix=null,this.u_Camera=null,this.u_LightDirection=null,this.u_LightColor=null,this.u_BaseColorSampler=null,this.u_BaseColorFactor=null,this.u_NormalSampler=null,this.u_NormalScale=null,this.u_EmissiveSampler=null,this.u_EmissiveFactor=null,this.u_MetallicRoughnessSampler=null,this.u_MetallicRoughnessValues=null,this.u_OcclusionSampler=null,this.u_OcclusionStrength=null,this.u_AlphaBlend=null,this.u_AlphaCutoff=null,this.u_PbrFlags=null;for(const n in this)this[n]=t.uniform(n),null!==this[n]||n.endsWith("Sampler")||console.warn("Failed to get uniform location for "+n);t.bind();const n=t.context.gl;n.uniform1i(this.u_BaseColorSampler,0),n.uniform1i(this.u_NormalSampler,1),n.uniform1i(this.u_EmissiveSampler,2),n.uniform1i(this.u_MetallicRoughnessSampler,3),n.uniform1i(this.u_OcclusionSampler,4),n.uniform3f(this.u_LightColor,4,4,4),n.uniform3f(this.u_LightDirection,0,.5,.5)}}n.PbrShader=class{constructor(t){this.attribLocations={};const o=t.gl;if(t.isWebGL1){if(!t.supportsShaderTextureLOD)throw new Error("PBR shader needs unsupported extension GL_EXT_shader_texture_lod");if(t.shaderTextureLOD,!t.supportsStandardDerivatives)throw new Error("PBR shader needs unsupported extension GL_OES_standard_derivatives");t.standardDerivatives}const s=new r.Shader(t,o.VERTEX_SHADER,"pbr-vert.glsl");s.initialize(e(15));const l=new r.Shader(t,o.FRAGMENT_SHADER,"pbr-frag.glsl");if(l.initialize(e(14)),this.program=new r.Program(t),this.program.initialize([s,l]),t.isWebGL2)Object.assign(this.attribLocations,n.ATTRIB_LOCATIONS);else for(const t of Object.keys(n.ATTRIB_LOCATIONS)){const n=i(t);this.attribLocations[t]=this.program.attribute(n)}this.uniforms=new a(this.program)}bind(){this.program.bind()}unbind(){this.program.unbind()}uninitialize(){this.program.uninitialize()}}},function(t,n,e){"use strict";var r=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))(function(i,a){function o(t){try{l(r.next(t))}catch(t){a(t)}}function s(t){try{l(r.throw(t))}catch(t){a(t)}}function l(t){t.done?i(t.value):new e(function(n){n(t.value)}).then(o,s)}l((r=r.apply(t,n||[])).next())})};Object.defineProperty(n,"__esModule",{value:!0});const i=e(1),a=e(0),o=e(4);var s;!function(t){t[t.OPAQUE=0]="OPAQUE",t[t.MASK=1]="MASK",t[t.BLEND=2]="BLEND"}(s=n.AlphaMode||(n.AlphaMode={}));class l{constructor(t){this.baseColorFactor=i.vec4.fromValues(1,1,1,1),this.metallicFactor=1,this.roughnessFactor=1,this.emissiveFactor=i.vec3.fromValues(0,0,0),this.alphaCutoff=.5,this.alphaMode=s.OPAQUE,this.doubleSided=!1,this.context=t}static fromGltf(t,n){return r(this,void 0,void 0,function*(){const e=n.gAsset.gltf.materials[t],r=new l(n.context);r.name=e.name||t.toString();const a=e.pbrMetallicRoughness,o={baseColorTexture:void 0,metallicRoghnessTexture:void 0,normalTexture:void 0,occlusionTexture:void 0,emissiveTexture:void 0};a&&(a.baseColorFactor&&(r.baseColorFactor=i.vec4.fromValues.apply(void 0,a.baseColorFactor)),a.baseColorTexture&&(o.baseColorTexture=this.loadTexture(a.baseColorTexture,n,`mat_${r.name}_baseColorTexture`)),void 0!==a.metallicFactor&&(r.metallicFactor=a.metallicFactor),void 0!==a.roughnessFactor&&(r.roughnessFactor=a.roughnessFactor),a.metallicRoughnessTexture&&(o.metallicRoughnessTexture=this.loadTexture(a.metallicRoughnessTexture,n,`mat_${r.name}_metallicRoughnessTexture`)));const u=e.normalTexture;u&&(o.normalTexture=this.loadTexture(u,n,`mat_${r.name}_normalTexture`),r.normalScale=u.scale||1);const c=e.occlusionTexture;c&&(o.occlusionTexture=this.loadTexture(c,n,`mat_${r.name}_occlusionTexture`),r.occlusionStrength=c.strength||1),e.emissiveTexture&&(o.emissiveTexture=this.loadTexture(e.emissiveTexture,n,`mat_${r.name}_emissiveTexture`)),e.emissiveFactor&&(r.emissiveFactor=i.vec3.fromValues.apply(void 0,e.emissiveFactor)),void 0!==e.alphaCutoff&&(r.alphaCutoff=e.alphaCutoff),e.alphaMode&&(r.alphaMode=s[e.alphaMode]),void 0!==e.doubleSided&&(r.doubleSided=e.doubleSided),yield Promise.all(Object.values(o));for(const t in o)r[t]=yield o[t];return r})}static loadTexture(t,n,e){return r(this,void 0,void 0,function*(){const r=n.context.gl,i=n.gAsset.gltf;t.texCoord;if(n.textures[t.index])return n.textures[t.index];const o=i.textures[t.index],s=yield n.gAsset.imageData.get(o.source),l=void 0!==o.sampler?i.samplers[o.sampler]:{},u=new a.Texture2(n.context,e);u.initialize(s.width,s.height,r.RGBA,r.RGBA,r.UNSIGNED_BYTE),u.wrap(l.wrapS||r.REPEAT,l.wrapT||r.REPEAT,!0,!1);const c=l.magFilter||r.LINEAR,f=l.minFilter||r.LINEAR_MIPMAP_LINEAR;return u.filter(c,f,!1,!1),u.data(s,!1,!1),(f===r.LINEAR_MIPMAP_LINEAR||f===r.LINEAR_MIPMAP_NEAREST||f===r.NEAREST_MIPMAP_LINEAR||f===r.NEAREST_MIPMAP_NEAREST)&&r.generateMipmap(r.TEXTURE_2D),u.unbind(),n.textures[t.index]=u,u})}get shaderFlags(){let t=0;return this.baseColorTexture&&(t|=o.ShaderFlags.HAS_BASECOLORMAP),this.normalTexture&&(t|=o.ShaderFlags.HAS_NORMALMAP),this.emissiveTexture&&(t|=o.ShaderFlags.HAS_EMISSIVEMAP),this.metallicRoughnessTexture&&(t|=o.ShaderFlags.HAS_METALROUGHNESSMAP),this.occlusionTexture&&(t|=o.ShaderFlags.HAS_OCCLUSIONMAP),t}bind(t){const n=this.context.gl,e=t.uniforms;this.doubleSided?n.disable(n.CULL_FACE):n.enable(n.CULL_FACE),this.alphaMode!==s.OPAQUE&&(n.enable(n.BLEND),n.blendFunc(n.SRC_ALPHA,n.ONE_MINUS_SRC_ALPHA),n.uniform1f(e.u_AlphaBlend,1),this.alphaMode===s.MASK&&n.uniform1f(e.u_AlphaCutoff,this.alphaCutoff)),n.uniform4fv(e.u_BaseColorFactor,this.baseColorFactor),this.baseColorTexture&&this.baseColorTexture.bind(n.TEXTURE0),this.normalTexture&&(this.normalTexture.bind(n.TEXTURE1),n.uniform1f(e.u_NormalScale,this.normalScale)),this.emissiveTexture&&(this.emissiveTexture.bind(n.TEXTURE2),n.uniform3fv(e.u_EmissiveFactor,this.emissiveFactor)),this.metallicRoughnessTexture&&this.metallicRoughnessTexture.bind(n.TEXTURE3),n.uniform2f(e.u_MetallicRoughnessValues,this.metallicFactor,this.roughnessFactor),this.occlusionTexture&&(this.occlusionTexture.bind(n.TEXTURE4),n.uniform1f(e.u_OcclusionStrength,this.occlusionStrength))}unbind(t){const n=this.context.gl;this.alphaMode!==s.OPAQUE&&(n.disable(n.BLEND),n.uniform1f(t.uniforms.u_AlphaBlend,0),this.alphaMode===s.MASK&&n.uniform1f(t.uniforms.u_AlphaCutoff,0))}}n.Material=l},function(t,n){t.exports=function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=7)}([function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.LoadingManager=class{constructor(){this.urlModifier=void 0,this.onStart=void 0,this.onProgress=void 0,this.onLoad=void 0,this.onError=void 0,this.isLoading=!1,this.itemsLoaded=0,this.itemsTotal=0}itemStart(t){this.itemsTotal++,!this.isLoading&&this.onStart&&this.onStart(t,this.itemsLoaded,this.itemsTotal),this.isLoading=!0}itemEnd(t){this.itemsLoaded++,this.onProgress&&this.onProgress(t,this.itemsLoaded,this.itemsTotal),this.itemsLoaded===this.itemsTotal&&(this.isLoading=!1,this.onLoad&&this.onLoad())}itemError(t){this.onError&&this.onError(t)}resolveURL(t){return this.urlModifier?this.urlModifier(t):t}}},function(t,n,e){"use strict";var r=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))(function(i,a){function o(t){try{l(r.next(t))}catch(t){a(t)}}function s(t){try{l(r.throw(t))}catch(t){a(t)}}function l(t){t.done?i(t.value):new e(function(n){n(t.value)}).then(o,s)}l((r=r.apply(t,n||[])).next())})};Object.defineProperty(n,"__esModule",{value:!0});const i=e(3),a=e(0);n.GLTF_COMPONENT_TYPE_ARRAYS={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},n.GLTF_ELEMENTS_PER_TYPE={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},n.GltfAsset=class{constructor(t,n,e,r=new a.LoadingManager){this.gltf=t,this.glbData=e,this.bufferData=new o(this,n,r),this.imageData=new s(this,n,r)}bufferViewData(t){return r(this,void 0,void 0,function*(){if(!this.gltf.bufferViews)throw new Error("No buffer views found.");const n=this.gltf.bufferViews[t],e=yield this.bufferData.get(n.buffer),r=n.byteLength||0,i=n.byteOffset||0,a=e.buffer,o=e.byteOffset;return new Uint8Array(a,o+i,r)})}accessorData(t){return r(this,void 0,void 0,function*(){if(!this.gltf.accessors)throw new Error("No accessors views found.");const e=this.gltf.accessors[t],r=n.GLTF_ELEMENTS_PER_TYPE[e.type];let i;if(void 0!==e.bufferView)i=yield this.bufferViewData(e.bufferView);else{const t=n.GLTF_COMPONENT_TYPE_ARRAYS[e.componentType].BYTES_PER_ELEMENT*r*e.count;i=new Uint8Array(t)}if(e.sparse){const{count:t,indices:a,values:o}=e.sparse;let s=n.GLTF_COMPONENT_TYPE_ARRAYS[a.componentType],l=yield this.bufferViewData(a.bufferView);const u=new s(l.buffer,l.byteOffset+(a.byteOffset||0),t);s=n.GLTF_COMPONENT_TYPE_ARRAYS[e.componentType],l=yield this.bufferViewData(o.bufferView);const c=new s((yield this.bufferViewData(o.bufferView)).buffer,l.byteOffset+(o.byteOffset||0),t*r);e.bufferView&&(i=new Uint8Array(i));const f=new n.GLTF_COMPONENT_TYPE_ARRAYS[e.componentType](i.buffer);for(let n=0;n<t;n++)for(let t=0;t<r;t++)f[r*u[n]+t]=c[r*n+t]}return i})}preFetchAll(){return r(this,void 0,void 0,function*(){return Promise.all([this.bufferData.preFetchAll(),this.imageData.preFetchAll()])})}};class o{constructor(t,n,e){this.bufferCache=[],this.asset=t,this.baseUri=n,this.manager=e,this.loader=new i.FileLoader(e),this.loader.responseType="arraybuffer"}get(t){return r(this,void 0,void 0,function*(){if(void 0!==this.bufferCache[t])return this.bufferCache[t];const n=this.asset.gltf;if(!n.buffers)throw new Error("No buffers found.");const e=n.buffers[t];if(void 0===e.uri){if(0!==t)throw new Error("GLB container is required to be the first buffer");if(void 0===this.asset.glbData)throw new Error("invalid gltf: buffer has no uri nor is there a GLB buffer");return this.asset.glbData.binaryChunk}const r=l(e.uri,this.baseUri),i=yield this.loader.load(r),a=new Uint8Array(i);return this.bufferCache[t]=a,a})}preFetchAll(){return r(this,void 0,void 0,function*(){const t=this.asset.gltf.buffers;return t?Promise.all(t.map((t,n)=>this.get(n))):[]})}}n.BufferData=o;class s{constructor(t,n,e){this.crossOrigin="anonymous",this.imageCache=[],this.asset=t,this.baseUri=n,this.manager=e}get(t){return r(this,void 0,void 0,function*(){if(void 0!==this.imageCache[t])return this.imageCache[t];const n=this.asset.gltf;if(!n.images)throw new Error("No images found.");const e=n.images[t];let r,i=!1;if(void 0!==e.bufferView){const t=yield this.asset.bufferViewData(e.bufferView);i=!0;const n=new Blob([t],{type:e.mimeType});r=URL.createObjectURL(n)}else{if(void 0===e.uri)throw new Error("Invalid glTF: image must either have a `uri` or a `bufferView`");r=this.manager.resolveURL(l(e.uri,this.baseUri))}const a=new Image;return a.crossOrigin=this.crossOrigin,new Promise((n,e)=>{a.onerror=(()=>{e(`Failed to load ${r}`),this.manager.itemEnd(r),this.manager.itemError(r)}),a.onload=(()=>{i&&URL.revokeObjectURL(r),this.imageCache[t]=a,n(a),this.manager.itemEnd(r)}),a.src=r,this.manager.itemStart(r)})})}preFetchAll(){return r(this,void 0,void 0,function*(){const t=this.asset.gltf.images;return t?Promise.all(t.map((t,n)=>this.get(n))):[]})}}function l(t,n){return"string"!=typeof t||""===t?"":/^(https?:)?\/\//i.test(t)?t:/^data:.*,.*$/i.test(t)?t:/^blob:.*$/i.test(t)?t:n+t}n.ImageData=s,n.resolveURL=l},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.LoaderUtils=class{static decodeText(t){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);let n="";for(const e of t)n+=String.fromCharCode(e);return decodeURIComponent(escape(n))}static extractUrlBase(t){const n=t.split("/");return 1===n.length?"./":(n.pop(),n.join("/")+"/")}}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.FileLoader=class{constructor(t){this.runningRequests={},this.manager=t}load(t,n){if(void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t),this.runningRequests[t])return this.runningRequests[t];const e=new Promise((e,r)=>{const i=new XMLHttpRequest;i.open("GET",t,!0);const a=this;i.onload=function(n){const o=this.response;0===this.status?(console.warn("FileLoader: HTTP Status 0 received."),e(o),a.manager.itemEnd(t)):200===this.status?(e(o),a.manager.itemEnd(t)):(r({url:t,status:this.status,statusText:i.statusText}),a.manager.itemEnd(t),a.manager.itemError(t)),delete a.runningRequests[t]},i.onprogress=(t=>{n&&n(t)}),i.onerror=function(n){r({url:t,status:this.status,statusText:i.statusText}),a.manager.itemEnd(t),a.manager.itemError(t),delete a.runningRequests[t]},this.responseType&&(i.responseType=this.responseType),this.withCredentials&&(i.withCredentials=this.withCredentials),this.mimeType&&i.overrideMimeType&&i.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain");for(const t in this.requestHeaders)i.setRequestHeader(t,this.requestHeaders[t]);i.send(null),this.manager.itemStart(t)});return this.runningRequests[t]=e,e}setRequestHeader(t,n){return this.requestHeaders[t]=n,this}}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0})},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const r=e(2);n.BINARY_HEADER_MAGIC="glTF";const i=1313821514,a=5130562;n.GLTFBinaryData=class{constructor(t){const e=new DataView(t,0,12),o=r.LoaderUtils.decodeText(new Uint8Array(t,0,4)),s=e.getUint32(4,!0);if(e.getUint32(8,!0),o!==n.BINARY_HEADER_MAGIC)throw new Error("Unsupported glTF-Binary header.");if(s<2)throw new Error("Unsupported legacy binary file detected.");const l=new DataView(t,12);let u=0;for(;u<l.byteLength;){const n=l.getUint32(u,!0);u+=4;const e=l.getUint32(u,!0);if(u+=4,e===i){const e=new Uint8Array(t,12+u,n);this.json=r.LoaderUtils.decodeText(e)}else if(e===a){const e=12+u;this.binaryChunk=new Uint8Array(t,e,n)}u+=n}if(null===this.json)throw new Error("glTF-Binary: JSON content not found.")}}},function(t,n,e){"use strict";var r=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))(function(i,a){function o(t){try{l(r.next(t))}catch(t){a(t)}}function s(t){try{l(r.throw(t))}catch(t){a(t)}}function l(t){t.done?i(t.value):new e(function(n){n(t.value)}).then(o,s)}l((r=r.apply(t,n||[])).next())})};function i(t){for(var e in t)n.hasOwnProperty(e)||(n[e]=t[e])}Object.defineProperty(n,"__esModule",{value:!0});const a=e(3),o=e(5),s=e(1),l=e(2),u=e(0),c=e(4);n.gltf=c,i(e(1)),i(e(0)),n.GltfLoader=class{constructor(t){this.manager=t||new u.LoadingManager}load(t,n){return r(this,void 0,void 0,function*(){const e=l.LoaderUtils.extractUrlBase(t),r=new a.FileLoader(this.manager);r.responseType="arraybuffer";const i=yield r.load(t,n);return yield this.parse(i,e)})}loadFromFiles(t){return r(this,void 0,void 0,function*(){let n,e;for(const[r,i]of t)i.name.match(/\.(gltf|glb)$/)&&(n=i,e=r.replace(i.name,""));if(!n)throw new Error("No .gltf or .glb asset found.");const r="string"==typeof n?n:URL.createObjectURL(n),i=l.LoaderUtils.extractUrlBase(r),a=[];this.manager.urlModifier=(n=>{const r=e+n.replace(i,"").replace(/^(\.?\/)/,"");if(t.has(r)){const n=t.get(r),e=URL.createObjectURL(n);return a.push(e),e}return n});const o=yield this.load(r);return yield o.preFetchAll(),URL.revokeObjectURL(r),a.forEach(URL.revokeObjectURL),o})}parse(t,n){return r(this,void 0,void 0,function*(){let e,r=void 0;e="string"==typeof t?t:l.LoaderUtils.decodeText(new Uint8Array(t,0,4))===o.BINARY_HEADER_MAGIC?(r=new o.GLTFBinaryData(t)).json:l.LoaderUtils.decodeText(new Uint8Array(t));const i=JSON.parse(e);if(void 0===i.asset||i.asset.version[0]<2)throw new Error("Unsupported asset. glTF versions >=2.0 are supported.");return new s.GltfAsset(i,n,r,this.manager)})}}},function(t,n,e){t.exports=e(6)}])},,,function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const r=e(1),i=e(0),a=e(4);n.GltfRenderer=class extends i.Renderer{set scene(t){this._scene&&this._scene.uninitialize(),this._scene=t,this._sceneChanged=!0,this.setCameraFromBounds(),this.invalidate()}get context(){return this._context}onInitialize(t,n,e){const o=this._context.gl;return this.pbrShader=new a.PbrShader(t),this._camera=new i.Camera,this._camera.center=r.vec3.fromValues(0,0,0),this._camera.up=r.vec3.fromValues(0,1,0),this._camera.eye=r.vec3.fromValues(0,0,3),this._camera.near=.1,this._camera.far=20,this._navigation=new i.Navigation(n,e),this._navigation.camera=this._camera,o.enable(o.DEPTH_TEST),setTimeout(()=>{this.clearColor=[.1,.2,.3,1]},0),!0}onUninitialize(){this._scene.uninitialize(),this.pbrShader.uninitialize()}onUpdate(){const t=this.context.gl;if(this._altered.frameSize&&(this._camera.viewport=[this._frameSize[0],this._frameSize[1]],t.viewport(0,0,this._frameSize[0],this._frameSize[1])),this._altered.canvasSize&&(this._camera.aspect=this._canvasSize[0]/this._canvasSize[1]),this._altered.clearColor){const n=this._clearColor;t.clearColor(n[0],n[1],n[2],n[3])}this._navigation.update();const n=this._altered.any||this._camera.altered||this._sceneChanged;return this._altered.reset(),this._camera.altered=!1,this._sceneChanged=!1,n}onPrepare(){}onFrame(t){const n=this._context.gl;n.clear(n.COLOR_BUFFER_BIT|n.DEPTH_BUFFER_BIT),this.pbrShader.bind(),n.uniformMatrix4fv(this.pbrShader.uniforms.u_ViewProjection,!1,this._camera.viewProjection),n.uniform3fv(this.pbrShader.uniforms.u_Camera,this._camera.eye),this._scene&&this._scene.draw(this._camera,this.pbrShader),this.pbrShader.unbind()}onSwap(){this.invalidate()}setCameraFromBounds(){const t=this._scene.bounds,n=r.vec3.len(t.size),e=t.center;this._camera.eye=r.vec3.fromValues(e[0]+n/1.5,e[1]+n/5,e[2]+n/1.5),this._camera.center=e,this._camera.far=20*n,this._camera.near=n/100}}},function(t,n,e){"use strict";var r=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))(function(i,a){function o(t){try{l(r.next(t))}catch(t){a(t)}}function s(t){try{l(r.throw(t))}catch(t){a(t)}}function l(t){t.done?i(t.value):new e(function(n){n(t.value)}).then(o,s)}l((r=r.apply(t,n||[])).next())})};Object.defineProperty(n,"__esModule",{value:!0});const i=e(1),a=e(3);class o{constructor(){this.children=[],this.finalTransform=i.mat4.create(),this.normalMatrix=i.mat3.create()}static fromGltf(t,n){return r(this,void 0,void 0,function*(){const e=new o;return e.name=t.name,e.context=n.context,void 0!==t.matrix?e.matrix=i.mat4.fromValues.apply(void 0,t.matrix):t.translation||t.rotation||t.scale?(e.translation=t.translation?i.vec3.fromValues.apply(void 0,t.translation):i.vec3.create(),e.rotation=t.rotation?i.quat.fromValues.apply(void 0,t.rotation):i.quat.create(),e.scale=t.scale?i.vec3.fromValues.apply(void 0,t.scale):i.vec3.fromValues(1,1,1)):e.matrix=i.mat4.create(),void 0!==t.mesh&&(e.mesh=yield n.getMesh(t.mesh)),t.children&&(e.children=yield Promise.all(t.children.map(t=>o.fromGltf(n.gAsset.gltf.nodes[t],n)))),e})}updateTransform(t){if(this.finalTransform=i.mat4.clone(t),this.matrix)i.mat4.mul(this.finalTransform,this.finalTransform,this.matrix);else{const t=i.mat4.fromRotationTranslationScale(i.mat4.create(),this.rotation,this.translation,this.scale);i.mat4.mul(this.finalTransform,this.finalTransform,t)}i.mat3.normalFromMat4(this.normalMatrix,this.finalTransform);for(const t of this.children)t.updateTransform(this.finalTransform)}updateBounds(){if(this.mesh)this.bounds=this.mesh.bounds.clone(),this.bounds.transform(this.finalTransform);else if(0===this.children.length)this.bounds=new a.Aabb3(i.vec3.fromValues(0,0,0),i.vec3.fromValues(0,0,0)),this.bounds.transform(this.finalTransform);else{this.bounds=new a.Aabb3;for(const t of this.children)t.updateBounds(),this.bounds.union(t.bounds)}}uninitialize(){this.mesh&&this.mesh.uninitialize();for(const t of this.children)t.uninitialize()}}n.Node=o},function(t,n,e){"use strict";var r=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))(function(i,a){function o(t){try{l(r.next(t))}catch(t){a(t)}}function s(t){try{l(r.throw(t))}catch(t){a(t)}}function l(t){t.done?i(t.value):new e(function(n){n(t.value)}).then(o,s)}l((r=r.apply(t,n||[])).next())})};Object.defineProperty(n,"__esModule",{value:!0});const i=e(1),a=e(3),o=e(5),s=e(10);class l{constructor(){this.nodes=[],this.batchesByMaterial=new Map,this.bounds=new a.Aabb3}static fromGltf(t,n){return r(this,void 0,void 0,function*(){const e=new l;e.context=n.context,e.name=t.name,e.rootNodes=yield Promise.all(t.nodes.map(t=>{const e=n.gAsset.gltf.nodes[t];return s.Node.fromGltf(e,n)}));const r=i.mat4.create();for(const t of e.rootNodes)t.updateTransform(r),t.updateBounds(),e.bounds.union(t.bounds);for(const t of e.rootNodes){e.nodes.push(t);const n=[t];for(;n.length>0;){const t=n.pop();e.nodes.push(t),n.push.apply(n,t.children)}}for(const t of e.nodes)if(void 0!==t.mesh)for(const n of t.mesh.primitives){const r=n.material,i=e.batchesByMaterial.get(r)||[];0===i.length&&e.batchesByMaterial.set(r,i),i.push({node:t,primitive:n})}const a=Array.from(e.batchesByMaterial.keys()),u=a.filter(t=>t.alphaMode===o.AlphaMode.OPAQUE),c=a.filter(t=>t.alphaMode!==o.AlphaMode.OPAQUE);return e.sortedMaterials=u.concat(c),e})}draw(t,n){const e=this.context.gl;n.bind();for(const t of this.sortedMaterials){const r=this.batchesByMaterial.get(t);t.bind(n);for(const{primitive:t,node:i}of r)e.uniformMatrix4fv(n.uniforms.u_ModelMatrix,e.FALSE,i.finalTransform),e.uniformMatrix3fv(n.uniforms.u_NormalMatrix,e.FALSE,i.normalMatrix),t.draw(n);t.unbind(n)}n.unbind()}uninitialize(){for(const t of this.rootNodes)t.uninitialize()}}n.Scene=l},function(t,n,e){"use strict";var r=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))(function(i,a){function o(t){try{l(r.next(t))}catch(t){a(t)}}function s(t){try{l(r.throw(t))}catch(t){a(t)}}function l(t){t.done?i(t.value):new e(function(n){n(t.value)}).then(o,s)}l((r=r.apply(t,n||[])).next())})};Object.defineProperty(n,"__esModule",{value:!0});const i=e(0),a=i.auxiliaries.assert,o=e(1),s=e(6),l=e(3),u=e(5),c=e(4);class f{constructor(t,n,e,r,i,a){this.buffer=t,this.size=n,this.type=e,this.normalized=r,this.stride=i,this.offset=a}static fromGltf(t,n,e){return new f(e,s.GLTF_ELEMENTS_PER_TYPE[t.type],t.componentType,t.normalized||!1,n||0,t.byteOffset||0)}enable(t){this.buffer.attribEnable(t,this.size,this.type,this.normalized,this.stride,this.offset,!0,!1)}disable(t){this.buffer.attribDisable(t,!0,!0)}}class h{constructor(t,n="Primitive"){this.attributes={},this.identifier=n,this.vertexArray=new i.VertexArray(t,n+"_VAO")}static fromGltf(t,n,e){return r(this,void 0,void 0,function*(){const r=new h(n.context,e);r.mode=t.mode||4;const s=n.context,d=r.context.gl,_=n.gAsset,b=_.gltf;if(a(void 0!==t.attributes.POSITION,"primitives must have the POSITION attribute"),void 0===b.bufferViews)throw new Error("invalid gltf");const m={};for(const n in t.attributes){const e=t.attributes[n],a=b.accessors[e];r.numVertices=a.count;const s=a.bufferView;let u,c;if(void 0!==s&&s in m)u=m[s],c=b.bufferViews[s].byteStride;else{const t=yield _.accessorData(e);(u=new i.Buffer(r.context,`${r.identifier}_VBO_${Object.keys(m).length}`)).initialize(d.ARRAY_BUFFER),u.data(t,d.STATIC_DRAW),void 0!==s&&(m[s]=u,c=b.bufferViews[s].byteStride)}r.attributes[n]=f.fromGltf(a,c,u),"POSITION"===n&&(r.bounds=new l.Aabb3(o.vec3.fromValues.apply(void 0,a.min),o.vec3.fromValues.apply(void 0,a.max)))}let p=0;if(void 0!==t.attributes.NORMAL&&(p|=c.ShaderFlags.HAS_NORMALS),void 0!==t.attributes.TANGENT&&(p|=c.ShaderFlags.HAS_TANGENTS),void 0!==t.attributes.TEXCOORD_0&&(p|=c.ShaderFlags.HAS_UV),void 0!==t.attributes.COLOR_0&&(p|=c.ShaderFlags.HAS_COLORS),void 0!==t.indices){const n=b.accessors[t.indices],e=yield _.accessorData(t.indices);if(r.indexBuffer=new i.Buffer(r.context,`${r.identifier}_EBO`),r.numIndices=n.count,r.indexByteOffset=n.byteOffset||0,r.indexType=n.componentType,r.indexType===d.UNSIGNED_INT&&s.isWebGL1){if(!s.supportsElementIndexUint)throw new Error(`Primitive ${r.identifier} needs unsupported extension OES_element_index_uint`);s.elementIndexUint}r.indexBuffer.initialize(d.ELEMENT_ARRAY_BUFFER),r.indexBuffer.data(e,d.STATIC_DRAW),i.auxiliaries.assert(void 0!==r.indexBuffer&&r.indexBuffer.object instanceof WebGLBuffer,"expected valid WebGLBuffer")}return void 0===t.material?(r.material=new u.Material(s),r.material.name="DefaultMaterial"):r.material=yield n.getMaterial(t.material),r.shaderFlags=p|r.material.shaderFlags,r.initialize(),r})}bindBuffers(){for(const t in this.attributes){const n=this.shader.attribLocations[t];void 0!==n&&-1!==n&&this.attributes[t].enable(n)}this.numIndices&&this.indexBuffer.bind()}unbindBuffers(){for(const t in this.attributes){const n=this.shader.attribLocations[t];void 0!==n&&-1!==n&&this.attributes[t].disable(n)}this.numIndices&&this.indexBuffer.unbind()}initialize(...t){const n=this.context.gl;return this.numIndices?this.drawCall=(()=>{n.drawElements(this.mode,this.numIndices,this.indexType,this.indexByteOffset)}):this.drawCall=(()=>{n.drawArrays(this.mode,0,this.numVertices)}),this.vertexArray.initialize(()=>this.bindBuffers(),()=>this.unbindBuffers()),this.vertexArray.valid}uninitialize(){this.vertexArray.uninitialize();for(const t in this.attributes){const n=this.attributes[t].buffer;n.initialized&&n.uninitialize()}this.indexBuffer&&this.indexBuffer.uninitialize()}draw(t){this.shader=t,this.context.gl.uniform1i(t.uniforms.u_PbrFlags,this.shaderFlags),this.vertexArray.bind(),this.drawCall(),this.vertexArray.unbind(),this.shader=void 0}get context(){return this.vertexArray.context}}n.Primitive=h},function(t,n,e){"use strict";var r=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))(function(i,a){function o(t){try{l(r.next(t))}catch(t){a(t)}}function s(t){try{l(r.throw(t))}catch(t){a(t)}}function l(t){t.done?i(t.value):new e(function(n){n(t.value)}).then(o,s)}l((r=r.apply(t,n||[])).next())})};Object.defineProperty(n,"__esModule",{value:!0});const i=e(3),a=e(12);class o{constructor(){this.bounds=new i.Aabb3}static fromGltf(t,n){return r(this,void 0,void 0,function*(){const e=n.gAsset.gltf.meshes[t],r=new o;r.context=n.context,r.name=e.name,r.primitives=yield Promise.all(e.primitives.map((r,i)=>{const o=`mesh_${e.name||t}_prim_${i}`;return a.Primitive.fromGltf(r,n,o)}));for(const t of r.primitives)r.bounds.union(t.bounds);return r})}uninitialize(){for(const t of this.primitives)t.uninitialize()}}n.Mesh=o},function(t,n){t.exports="// Originally taken from https://github.com/KhronosGroup/glTF-WebGL-PBR\n// Commit c28b5b8f5a83380857ad8395ac5302594ecc13ae\n//\n// This fragment shader defines a reference implementation for Physically Based Shading of\n// a microfacet surface material defined by a glTF model.\n//\n// References:\n// [1] Real Shading in Unreal Engine 4\n//     http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\n// [2] Physically Based Shading at Disney\n//     http://blog.selfshadow.com/publications/s2012-shading-course/burley/s2012_pbs_disney_brdf_notes_v3.pdf\n// [3] README.md - Environment Maps\n//     https://github.com/KhronosGroup/glTF-WebGL-PBR/#environment-maps\n// [4] \"An Inexpensive BRDF Model for Physically based Rendering\" by Christophe Schlick\n//     https://www.cs.virginia.edu/~jdl/bib/appearance/analytic%20models/schlick94b.pdf\n\nprecision highp float;\n\n#if __VERSION__ == 100\n    #extension GL_EXT_shader_texture_lod: enable\n    #extension GL_OES_standard_derivatives : enable\n    #define fragColor gl_FragColor\n    #define texture( texture2D(\n#else\n    #define varying in\n    layout(location = 0) out vec4 fragColor;\n#endif\n\n// vertex shader + fragment shader\nconst int HAS_NORMALS           = 1;\nconst int HAS_TANGENTS          = 1 << 1;\nconst int HAS_UV                = 1 << 2;\nconst int HAS_COLORS            = 1 << 3;\n\n// fragment shader only\nconst int USE_IBL               = 1 << 4;\nconst int HAS_BASECOLORMAP      = 1 << 5;\nconst int HAS_NORMALMAP         = 1 << 6;\nconst int HAS_EMISSIVEMAP       = 1 << 7;\nconst int HAS_METALROUGHNESSMAP = 1 << 8;\nconst int HAS_OCCLUSIONMAP      = 1 << 9;\nconst int USE_TEX_LOD           = 1 << 10;\n\nuniform vec3 u_LightDirection;\nuniform vec3 u_LightColor;\n\n// TODO!? ambient light (see gltf-viewer)\n\n#ifdef USE_IBL\nuniform samplerCube u_DiffuseEnvSampler;\nuniform samplerCube u_SpecularEnvSampler;\nuniform sampler2D u_brdfLUT;\n#endif\n\nuniform mediump int u_PbrFlags;\nuniform sampler2D u_BaseColorSampler;\nuniform sampler2D u_NormalSampler;\nuniform float u_NormalScale;\nuniform sampler2D u_EmissiveSampler;\nuniform vec3 u_EmissiveFactor;\nuniform sampler2D u_MetallicRoughnessSampler;\nuniform sampler2D u_OcclusionSampler;\nuniform float u_OcclusionStrength;\n\nuniform vec2 u_MetallicRoughnessValues;\nuniform vec4 u_BaseColorFactor;\n\nuniform vec3 u_Camera;\n\nuniform float u_AlphaBlend;\nuniform float u_AlphaCutoff;\n\n// // debugging flags used for shader output of intermediate PBR variables\n// uniform vec4 u_ScaleDiffBaseMR;\n// uniform vec4 u_ScaleFGDSpec;\n// uniform vec4 u_ScaleIBLAmbient;\n\nvarying vec3 v_Position;\nvarying vec2 v_UV;\nvarying vec4 v_Color;\nvarying mat3 v_TBN;\nvarying vec3 v_Normal;\n\n// Encapsulate the various inputs used by the various functions in the shading equation\n// We store values in this struct to simplify the integration of alternative implementations\n// of the shading terms, outlined in the Readme.MD Appendix.\nstruct PBRInfo\n{\n    float NdotL;                  // cos angle between normal and light direction\n    float NdotV;                  // cos angle between normal and view direction\n    float NdotH;                  // cos angle between normal and half vector\n    float LdotH;                  // cos angle between light direction and half vector\n    float VdotH;                  // cos angle between view direction and half vector\n    float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)\n    float metalness;              // metallic value at the surface\n    vec3 reflectance0;            // full reflectance color (normal incidence angle)\n    vec3 reflectance90;           // reflectance color at grazing angle\n    float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])\n    vec3 diffuseColor;            // color contribution from diffuse lighting\n    vec3 specularColor;           // color contribution from specular lighting\n};\n\nconst float M_PI = 3.141592653589793;\nconst float c_MinRoughness = 0.04;\n\nvec4 SRGBtoLINEAR(vec4 srgbIn)\n{\n    #ifdef MANUAL_SRGB\n    #ifdef SRGB_FAST_APPROXIMATION\n    vec3 linOut = pow(srgbIn.xyz,vec3(2.2));\n    #else //SRGB_FAST_APPROXIMATION\n    vec3 bLess = step(vec3(0.04045),srgbIn.xyz);\n    vec3 linOut = mix( srgbIn.xyz/vec3(12.92), pow((srgbIn.xyz+vec3(0.055))/vec3(1.055),vec3(2.4)), bLess );\n    #endif //SRGB_FAST_APPROXIMATION\n    return vec4(linOut,srgbIn.w);;\n    #else //MANUAL_SRGB\n    return srgbIn;\n    #endif //MANUAL_SRGB\n}\n\nbool checkFlag(int flag) {\n    return (u_PbrFlags & flag) == flag;\n}\n\n// Find the normal for this fragment, pulling either from a predefined normal map\n// or from the interpolated mesh normal and tangent attributes.\nvec3 getNormal()\n{\n    // Retrieve the tangent space matrix\n    mat3 tbn;\nif (!checkFlag(HAS_TANGENTS)) {\n    vec3 pos_dx = dFdx(v_Position);\n    vec3 pos_dy = dFdy(v_Position);\n    vec3 tex_dx = dFdx(vec3(v_UV, 0.0));\n    vec3 tex_dy = dFdy(vec3(v_UV, 0.0));\n    vec3 t = (tex_dy.t * pos_dx - tex_dx.t * pos_dy) / (tex_dx.s * tex_dy.t - tex_dy.s * tex_dx.t);\n\n    vec3 ng;\nif (checkFlag(HAS_NORMALS))\n    ng = normalize(v_Normal);\nelse\n    ng = cross(pos_dx, pos_dy);\n\n    t = normalize(t - ng * dot(ng, t));\n    vec3 b = normalize(cross(ng, t));\n    tbn = mat3(t, b, ng);\n} else { // HAS_TANGENTS\n    tbn = v_TBN;\n}\n\n    vec3 n;\nif (checkFlag(HAS_NORMALMAP)) {\n    n = texture(u_NormalSampler, v_UV).rgb;\n    n = normalize(tbn * ((2.0 * n - 1.0) * vec3(u_NormalScale, u_NormalScale, 1.0)));\n} else {\n    // The tbn matrix is linearly interpolated, so we need to re-normalize\n    n = normalize(tbn[2].xyz);\n}\n\n    // reverse backface normals\n    n *= (2.0 * float(gl_FrontFacing) - 1.0);\n\n    return n;\n}\n\n#ifdef USE_IBL\n// Calculation of the lighting contribution from an optional Image Based Light source.\n// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].\n// See our README.md on Environment Maps [3] for additional discussion.\nvec3 getIBLContribution(PBRInfo pbrInputs, vec3 n, vec3 reflection)\n{\n    float mipCount = 9.0; // resolution of 512x512\n    float lod = (pbrInputs.perceptualRoughness * mipCount);\n    // retrieve a scale and bias to F0. See [1], Figure 3\n    vec3 brdf = SRGBtoLINEAR(texture(u_brdfLUT, vec2(pbrInputs.NdotV, 1.0 - pbrInputs.perceptualRoughness))).rgb;\n    vec3 diffuseLight = SRGBtoLINEAR(textureCube(u_DiffuseEnvSampler, n)).rgb;\n\n#ifdef USE_TEX_LOD\n    vec3 specularLight = SRGBtoLINEAR(textureCubeLodEXT(u_SpecularEnvSampler, reflection, lod)).rgb;\n#else\n    vec3 specularLight = SRGBtoLINEAR(textureCube(u_SpecularEnvSampler, reflection)).rgb;\n#endif\n\n    vec3 diffuse = diffuseLight * pbrInputs.diffuseColor;\n    vec3 specular = specularLight * (pbrInputs.specularColor * brdf.x + brdf.y);\n\n    // For presentation, this allows us to disable IBL terms\n    diffuse *= u_ScaleIBLAmbient.x;\n    specular *= u_ScaleIBLAmbient.y;\n\n    return diffuse + specular;\n}\n#endif\n\n// Basic Lambertian diffuse\n// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog\n// See also [1], Equation 1\nvec3 diffuse(PBRInfo pbrInputs)\n{\n    return pbrInputs.diffuseColor / M_PI;\n}\n\n// The following equation models the Fresnel reflectance term of the spec equation (aka F())\n// Implementation of fresnel from [4], Equation 15\nvec3 specularReflection(PBRInfo pbrInputs)\n{\n    return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance0) * pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);\n}\n\n// This calculates the specular geometric attenuation (aka G()),\n// where rougher material will reflect less light back to the viewer.\n// This implementation is based on [1] Equation 4, and we adopt their modifications to\n// alphaRoughness as input as originally proposed in [2].\nfloat geometricOcclusion(PBRInfo pbrInputs)\n{\n    float NdotL = pbrInputs.NdotL;\n    float NdotV = pbrInputs.NdotV;\n    float r = pbrInputs.alphaRoughness;\n\n    float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));\n    float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));\n    return attenuationL * attenuationV;\n}\n\n// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())\n// Implementation from \"Average Irregularity Representation of a Roughened Surface for Ray Reflection\" by T. S. Trowbridge, and K. P. Reitz\n// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.\nfloat microfacetDistribution(PBRInfo pbrInputs)\n{\n    float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;\n    float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;\n    return roughnessSq / (M_PI * f * f);\n}\n\nvoid main()\n{\n    // Metallic and Roughness material properties are packed together\n    // In glTF, these factors can be specified by fixed scalar values\n    // or from a metallic-roughness map\n    float perceptualRoughness = u_MetallicRoughnessValues.y;\n    float metallic = u_MetallicRoughnessValues.x;\nif (checkFlag(HAS_METALROUGHNESSMAP)) {\n    // Roughness is stored in the 'g' channel, metallic is stored in the 'b' channel.\n    // This layout intentionally reserves the 'r' channel for (optional) occlusion map data\n    vec4 mrSample = texture(u_MetallicRoughnessSampler, v_UV);\n    perceptualRoughness = mrSample.g * perceptualRoughness;\n    metallic = mrSample.b * metallic;\n}\n    perceptualRoughness = clamp(perceptualRoughness, c_MinRoughness, 1.0);\n    metallic = clamp(metallic, 0.0, 1.0);\n    // Roughness is authored as perceptual roughness; as is convention,\n    // convert to material roughness by squaring the perceptual roughness [2].\n    float alphaRoughness = perceptualRoughness * perceptualRoughness;\n\n    // The albedo may be defined from a base texture or a flat color\n    vec4 baseColor;\nif (checkFlag(HAS_BASECOLORMAP))\n    baseColor = SRGBtoLINEAR(texture(u_BaseColorSampler, v_UV)) * u_BaseColorFactor;\nelse\n    baseColor = u_BaseColorFactor;\n\n    // spec: COLOR_0 ... acts as an additional linear multiplier to baseColor\n    // TODO!: distinguish vec3/vec4 colors...\n    baseColor *= vec4(v_Color.rgb, 1.0);\n\n    vec3 f0 = vec3(0.04);\n    vec3 diffuseColor = baseColor.rgb * (vec3(1.0) - f0);\n    diffuseColor *= 1.0 - metallic;\n    vec3 specularColor = mix(f0, baseColor.rgb, metallic);\n\n    // Compute reflectance.\n    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);\n\n    // For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.\n    // For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.\n    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);\n    vec3 specularEnvironmentR0 = specularColor.rgb;\n    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;\n\n    vec3 n = getNormal();                             // normal at surface point\n    vec3 v = normalize(u_Camera - v_Position);        // Vector from surface point to camera\n    vec3 l = normalize(u_LightDirection);             // Vector from surface point to light\n    vec3 h = normalize(l+v);                          // Half vector between both l and v\n    vec3 reflection = -normalize(reflect(v, n));\n\n    float NdotL = clamp(dot(n, l), 0.001, 1.0);\n    float NdotV = abs(dot(n, v)) + 0.001;\n    float NdotH = clamp(dot(n, h), 0.0, 1.0);\n    float LdotH = clamp(dot(l, h), 0.0, 1.0);\n    float VdotH = clamp(dot(v, h), 0.0, 1.0);\n\n    PBRInfo pbrInputs = PBRInfo(\n        NdotL,\n        NdotV,\n        NdotH,\n        LdotH,\n        VdotH,\n        perceptualRoughness,\n        metallic,\n        specularEnvironmentR0,\n        specularEnvironmentR90,\n        alphaRoughness,\n        diffuseColor,\n        specularColor\n    );\n\n    // Calculate the shading terms for the microfacet specular shading model\n    vec3 F = specularReflection(pbrInputs);\n    float G = geometricOcclusion(pbrInputs);\n    float D = microfacetDistribution(pbrInputs);\n\n    // Calculation of analytical lighting contribution\n    vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInputs);\n    vec3 specContrib = F * G * D / (4.0 * NdotL * NdotV);\n    // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)\n    vec3 color = NdotL * u_LightColor * (diffuseContrib + specContrib);\n\n    // Calculate lighting contribution from image based lighting source (IBL)\n#ifdef USE_IBL\n    color += getIBLContribution(pbrInputs, n, reflection);\n#endif\n\n    // Apply optional PBR terms for additional (optional) shading\nif (checkFlag(HAS_OCCLUSIONMAP)) { // TODO!!: can be skipped if u_OcclusionStrength 0?\n    float ao = texture(u_OcclusionSampler, v_UV).r;\n    color = mix(color, color * ao, u_OcclusionStrength);\n}\n\nif (checkFlag(HAS_EMISSIVEMAP)) { // TODO!!: can be skipped with u_EmissiveFactor 0?\n    vec3 emissive = SRGBtoLINEAR(texture(u_EmissiveSampler, v_UV)).rgb * u_EmissiveFactor;\n    color += emissive;\n}\n\n    // // This section uses mix to override final color for reference app visualization\n    // // of various parameters in the lighting equation.\n    // color = mix(color, F, u_ScaleFGDSpec.x);\n    // color = mix(color, vec3(G), u_ScaleFGDSpec.y);\n    // color = mix(color, vec3(D), u_ScaleFGDSpec.z);\n    // color = mix(color, specContrib, u_ScaleFGDSpec.w);\n\n    // color = mix(color, diffuseContrib, u_ScaleDiffBaseMR.x);\n    // color = mix(color, baseColor.rgb, u_ScaleDiffBaseMR.y);\n    // color = mix(color, vec3(metallic), u_ScaleDiffBaseMR.z);\n    // color = mix(color, vec3(perceptualRoughness), u_ScaleDiffBaseMR.w);\n\n    // NOTE: the spec mandates to ignore any alpha value in 'OPAQUE' mode\n    float alpha = mix(1.0, baseColor.a, u_AlphaBlend);\n    if (u_AlphaCutoff > 0.0) {\n        alpha = step(u_AlphaCutoff, baseColor.a);\n    }\n    fragColor = vec4(pow(color,vec3(1.0/2.2)), alpha);\n}\n"},function(t,n){t.exports="// Originally taken from https://github.com/KhronosGroup/glTF-WebGL-PBR\n// Commit c28b5b8f5a83380857ad8395ac5302594ecc13ae\n\n\n#if __VERSION__ == 100\n#else \n    #define varying out\n#endif\n\n\n#if __VERSION__ == 100\n  attribute vec4 a_position;\n  attribute vec4 a_normal;\n  attribute vec4 a_tangent;\n  attribute vec2 a_texcoord_0;\n  // attribute vec2 a_texcoord_1;\n  attribute vec4 a_color;\n#else\n    layout (location = 0) in vec4 a_position;\n    layout (location = 1) in vec3 a_normal;\n    layout (location = 2) in vec4 a_tangent;\n    layout (location = 3) in vec2 a_texcoord_0;\n    // layout (location = 4) in vec2 a_texcoord_1;\n    layout (location = 5) in vec4 a_color;\n#endif\n\n// TODO!!: WebGL1 support (int/bit operators...)\n// vertex shader + fragment shader\nconst int HAS_NORMALS           = 1;\nconst int HAS_TANGENTS          = 1 << 1;\nconst int HAS_UV                = 1 << 2;\nconst int HAS_COLORS            = 1 << 3;\n\nuniform mediump int u_PbrFlags;\nuniform mat4 u_ModelMatrix;\nuniform mat4 u_ViewProjection;\nuniform mat3 u_NormalMatrix;\n\nvarying vec3 v_Position;\nvarying vec2 v_UV;\nvarying vec4 v_Color;\n\nvarying mat3 v_TBN;\nvarying vec3 v_Normal;\n\nbool checkFlag(int flag) {\n    return (u_PbrFlags & flag) == flag;\n}\n\nvoid main()\n{\n  vec4 pos = u_ModelMatrix * a_position;\n  v_Position = vec3(pos.xyz) / pos.w;\n\n  if (checkFlag(HAS_NORMALS)) {\n  if (checkFlag(HAS_TANGENTS)) {\n  vec3 normalW = normalize(vec3(u_NormalMatrix * a_normal));\n  vec3 tangentW = normalize(vec3(u_ModelMatrix * vec4(a_tangent.xyz, 0.0)));\n  vec3 bitangentW = cross(normalW, tangentW) * a_tangent.w;\n  v_TBN = mat3(tangentW, bitangentW, normalW);\n  } else { // HAS_TANGENTS != 1\n  v_Normal = normalize(vec3(u_ModelMatrix * vec4(a_normal.xyz, 0.0)));\n  }\n  }\n\n  if (checkFlag(HAS_UV))\n  v_UV = a_texcoord_0;\n  else\n  v_UV = vec2(0.,0.);\n\n  if (checkFlag(HAS_COLORS))\n  v_Color = a_color;\n  else\n  v_Color = vec4(1.0);\n\n  gl_Position = u_ViewProjection * u_ModelMatrix * a_position; // needs w for proper perspective correction\n}\n\n\n"},function(t,n,e){"use strict";var r=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))(function(i,a){function o(t){try{l(r.next(t))}catch(t){a(t)}}function s(t){try{l(r.throw(t))}catch(t){a(t)}}function l(t){t.done?i(t.value):new e(function(n){n(t.value)}).then(o,s)}l((r=r.apply(t,n||[])).next())})};Object.defineProperty(n,"__esModule",{value:!0});const i=e(5),a=e(13),o=e(11);n.Asset=class{constructor(t,n){this.scenes=[],this.meshes=[],this.materials=[],this.textures=[],this.gAsset=t,this.context=n}getScene(t){return r(this,void 0,void 0,function*(){if(t=void 0!==t?t:this.gAsset.gltf.scene||0,this.scenes[t])return this.scenes[t];const n=this.gAsset.gltf.scenes[t];return this.scenes[t]=yield o.Scene.fromGltf(n,this),this.scenes[t]})}getMesh(t){return r(this,void 0,void 0,function*(){return this.meshes[t]?this.meshes[t]:(this.meshes[t]=yield a.Mesh.fromGltf(t,this),this.meshes[t])})}getMaterial(t){return r(this,void 0,void 0,function*(){return this.materials[t]?this.materials[t]:(this.materials[t]=yield i.Material.fromGltf(t,this),this.materials[t])})}}},function(t,n){var e;e=function(){return this}();try{e=e||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n,e){(function(n){var e;t.exports=function t(n,r,i){function a(s,l){if(!r[s]){if(!n[s]){var u="function"==typeof e&&e;if(!l&&u)return e(s,!0);if(o)return o(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var f=r[s]={exports:{}};n[s][0].call(f.exports,function(t){var e=n[s][1][t];return a(e||t)},f,f.exports,t,n,r,i)}return r[s].exports}for(var o="function"==typeof e&&e,s=0;s<i.length;s++)a(i[s]);return a}({1:[function(t,n,e){const r=window.zip=t("zipjs-browserify");t("./lib/zip-fs"),n.exports=class{constructor(t,n){this.el=t,this.inputEl=n,this.listeners={drop:[],dropstart:[],droperror:[]},this._onDragover=this._onDragover.bind(this),this._onDrop=this._onDrop.bind(this),this._onSelect=this._onSelect.bind(this),t.addEventListener("dragover",this._onDragover,!1),t.addEventListener("drop",this._onDrop,!1),n.addEventListener("change",this._onSelect)}on(t,n){return this.listeners[t].push(n),this}_emit(t,n){return this.listeners[t].forEach(t=>t(n)),this}destroy(){const t=this.el,n=this.inputEl;t.removeEventListener(this._onDragover),t.removeEventListener(this._onDrop),n.removeEventListener(this._onSelect),delete this.el,delete this.inputEl,delete this.listeners}_onDrop(t){let n;if(t.stopPropagation(),t.preventDefault(),this._emit("dropstart"),t.dataTransfer.items)n=[].slice.call(t.dataTransfer.items).map(t=>t.webkitGetAsEntry());else if(1===(t.dataTransfer.files||[]).length){const n=t.dataTransfer.files[0];return"application/zip"===n.type?void this._loadZip(n):void this._emit("drop",{files:new Map([[n.name,n]])})}n||this._fail("Required drag-and-drop APIs are not supported in this browser."),1===n.length&&n[0].name.match(/\.zip$/)?n[0].file(t=>this._loadZip(t)):this._loadNextEntry(new Map,n)}_onDragover(t){t.stopPropagation(),t.preventDefault(),t.dataTransfer.dropEffect="copy"}_onSelect(t){const n=[].slice.call(this.inputEl.files),e=new Map;n.forEach(t=>e.set(t.name,t)),this._emit("drop",{files:e})}_loadNextEntry(t,n){const e=n.pop();if(e)if(e.isFile)e.file(r=>{t.set(e.fullPath,r),this._loadNextEntry(t,n)},()=>console.error("Could not load file: %s",e.fullPath));else if(e.isDirectory){const r=e.createReader(),i=e=>{e.length?(n=n.concat(e),r.readEntries(i)):this._loadNextEntry(t,n)};r.readEntries(i)}else console.warn("Unknown asset type: "+e.fullPath),this._loadNextEntry(t,n);else this._emit("drop",{files:t})}_loadZip(t){const n=[],e=new Map,i=new r.fs.FS,a=t=>{t.directory?t.children.forEach(a):"."!==t.name[0]&&n.push(new Promise(n=>{t.getData(new r.BlobWriter,r=>{r.name=t.name,e.set(t.getFullname(),r),n()})}))};i.importBlob(t,()=>{a(i.root),Promise.all(n).then(()=>{this._emit("drop",{files:e})})})}_fail(t){this._emit("droperror",{message:t})}}},{"./lib/zip-fs":2,"zipjs-browserify":3}],2:[function(t,n,e){!function(){"use strict";var t,n,e=524288,r=zip.TextWriter,i=zip.BlobWriter,a=zip.Data64URIWriter,o=zip.Reader,s=zip.TextReader,l=zip.BlobReader,u=zip.Data64URIReader,c=zip.createReader,f=zip.createWriter;function h(t){var n,e=this;e.size=0,e.init=function(n){e.size=t.uncompressedSize,n()},e.readUint8Array=function(r,a,o,s){!function(r){e.data?r():t.getData(new i,function(t){e.data=t,n=new l(t),r()},null,e.checkCrc32)}(function(){n.readUint8Array(r,a,o,s)})}}function d(t){var n=0;return function t(e){n+=e.uncompressedSize||0,e.children.forEach(t)}(t),n}function _(t,n,e){var r=0;function i(){++r<t.children.length?a(t.children[r]):n()}function a(t){t.directory?_(t,i,e):(t.reader=new t.Reader(t.data,e),t.reader.init(function(){t.uncompressedSize=t.reader.size,i()}))}t.children.length?a(t.children[r]):n()}function b(t){var n=t.parent.children;n.forEach(function(e,r){e.id==t.id&&n.splice(r,1)})}function m(t,n,e,r,i){var a=0;function o(t,n,e,r,i){var s=0;!function l(){var u=n.children[s];u?t.add(u.getFullname(),u.reader,function(){a+=u.uncompressedSize||0,o(t,u,function(){s++,l()},r,i)},function(t){r&&r(a+t,i)},{directory:u.directory,version:u.zipVersion}):e()}()}!function(t,n,e,r,i){var s=0;!function l(){var u=n.children[s];u?t.add(u.getFullname(),u.reader,function(){a+=u.uncompressedSize||0,function(t,n,e,r,i){var s=0;!function l(){var u=n.children[s];u?t.add(u.getFullname(),u.reader,function(){a+=u.uncompressedSize||0,o(t,u,function(){s++,l()},r,i)},function(t){r&&r(a+t,i)},{directory:u.directory,version:u.zipVersion}):e()}()}(t,u,function(){s++,l()},r,i)},function(t){r&&r(a+t,i)},{directory:u.directory,version:u.zipVersion}):e()}()}(t,n,e,r,i)}function p(t,n,e,r){function i(t,n,e){!function(t,n){t.isDirectory&&t.createReader().readEntries(n),t.isFile&&n([])}(n,function(n){var a=0;function o(){var s=n[a];s?function(n){function e(t){i(t,n,function(){a++,o()})}n.isDirectory&&e(t.addDirectory(n.name)),n.isFile&&n.file(function(r){var i=t.addBlob(n.name,r);i.uncompressedSize=r.size,e(i)},r)}(s):e()}o()})}n.isDirectory?function(t,n,e){!function(t,n){t.isDirectory&&t.createReader().readEntries(n),t.isFile&&n([])}(n,function(n){var a=0;function o(){var s=n[a];s?function(n){function e(t){i(t,n,function(){a++,o()})}n.isDirectory&&e(t.addDirectory(n.name)),n.isFile&&n.file(function(r){var i=t.addBlob(n.name,r);i.uncompressedSize=r.size,e(i)},r)}(s):e()}o()})}(t,n,e):n.file(function(r){t.addBlob(n.name,r),e()},r)}function v(t,n,e,r,i,a,o){var s=0;function l(t,n,e,r,i,a){var u=0;function c(){var f=n.children[u];f?function(n){function e(t){s+=n.uncompressedSize||0,l(t,n,function(){u++,c()},r,i,a)}n.directory?t.getDirectory(n.name,{create:!0},e,i):t.getFile(n.name,{create:!0},function(t){n.getData(new zip.FileWriter(t,zip.getMimeType(n.name)),e,function(t){r&&r(s+t,a)},o)},i)}(f):e()}c()}n.directory?function(t,n,e,r,i,a){var u=0;function c(){var f=n.children[u];f?function(n){function e(t){s+=n.uncompressedSize||0,l(t,n,function(){u++,c()},r,i,a)}n.directory?t.getDirectory(n.name,{create:!0},e,i):t.getFile(n.name,{create:!0},function(t){n.getData(new zip.FileWriter(t,zip.getMimeType(n.name)),e,function(t){r&&r(s+t,a)},o)},i)}(f):e()}c()}(t,n,e,r,i,a):n.getData(new zip.FileWriter(t,zip.getMimeType(n.name)),e,r,o)}function g(t){t.entries=[],t.root=new M(t)}function w(t,n,e,r){if(t.directory)return r?new M(t.fs,n,e,t):new y(t.fs,n,e,t);throw"Parent entry is not a directory."}function x(){}function y(t,n,e,r){x.prototype.init.call(this,t,n,e,r),this.Reader=e.Reader,this.Writer=e.Writer,this.data=e.data,e.getData&&(this.getData=e.getData)}function M(t,n,e,r){x.prototype.init.call(this,t,n,e,r),this.directory=!0}function E(){g(this)}h.prototype=new o,h.prototype.constructor=h,h.prototype.checkCrc32=!1,x.prototype={init:function(t,n,e,r){if(t.root&&r&&r.getChildByName(n))throw"Entry filename already exists.";e||(e={}),this.fs=t,this.name=n,this.id=t.entries.length,this.parent=r,this.children=[],this.zipVersion=e.zipVersion||20,this.uncompressedSize=0,t.entries.push(this),r&&this.parent.children.push(this)},getFileEntry:function(t,n,e,r,i){var a=this;_(a,function(){v(t,a,n,e,r,d(a),i)},r)},moveTo:function(t){if(!t.directory)throw"Target entry is not a directory.";if(t.isDescendantOf(this))throw"Entry is a ancestor of target entry.";if(this!=t){if(t.getChildByName(this.name))throw"Entry filename already exists.";b(this),this.parent=t,t.children.push(this)}},getFullname:function(){for(var t=this.name,n=this.parent;n;)t=(n.name?n.name+"/":"")+t,n=n.parent;return t},isDescendantOf:function(t){for(var n=this.parent;n&&n.id!=t.id;)n=n.parent;return!!n}},x.prototype.constructor=x,y.prototype=t=new x,t.constructor=y,t.getData=function(t,n,r,i){var a=this;!t||t.constructor==a.Writer&&a.data?n(a.data):(a.reader||(a.reader=new a.Reader(a.data,i)),a.reader.init(function(){t.init(function(){!function(t,n,r,i,a){var o=0;!function s(){var l=o*e;i&&i(l,t.size),l<t.size?t.readUint8Array(l,Math.min(e,t.size-l),function(t){n.writeUint8Array(new Uint8Array(t),function(){o++,s()})},a):n.getData(r)}()}(a.reader,t,n,r,i)},i)}))},t.getText=function(t,n,e,i){this.getData(new r(i),t,n,e)},t.getBlob=function(t,n,e,r){this.getData(new i(t),n,e,r)},t.getData64URI=function(t,n,e,r){this.getData(new a(t),n,e,r)},M.prototype=n=new x,n.constructor=M,n.addDirectory=function(t){return w(this,t,null,!0)},n.addText=function(t,n){return w(this,t,{data:n,Reader:s,Writer:r})},n.addBlob=function(t,n){return w(this,t,{data:n,Reader:l,Writer:i})},n.addData64URI=function(t,n){return w(this,t,{data:n,Reader:u,Writer:a})},n.addFileEntry=function(t,n,e){p(this,t,n,e)},n.addData=function(t,n){return w(this,t,n)},n.importBlob=function(t,n,e){this.importZip(new l(t),n,e)},n.importText=function(t,n,e){this.importZip(new s(t),n,e)},n.importData64URI=function(t,n,e){this.importZip(new u(t),n,e)},n.exportBlob=function(t,n,e){this.exportZip(new i("application/zip"),t,n,e)},n.exportText=function(t,n,e){this.exportZip(new r,t,n,e)},n.exportFileEntry=function(t,n,e,r){this.exportZip(new zip.FileWriter(t,"application/zip"),n,e,r)},n.exportData64URI=function(t,n,e){this.exportZip(new a("application/zip"),t,n,e)},n.importZip=function(t,n,e){var r=this;c(t,function(t){t.getEntries(function(t){t.forEach(function(t){var n=r,e=t.filename.split("/"),i=e.pop();e.forEach(function(t){n=n.getChildByName(t)||new M(r.fs,t,null,n)}),t.directory||w(n,i,{data:t,Reader:h})}),n()})},e)},n.exportZip=function(t,n,e,r){var i=this;_(i,function(){f(t,function(t){m(t,i,function(){t.close(n)},e,d(i))},r)},r)},n.getChildByName=function(t){var n,e;for(n=0;n<this.children.length;n++)if((e=this.children[n]).name==t)return e},E.prototype={remove:function(t){b(t),this.entries[t.id]=null},find:function(t){var n,e=t.split("/"),r=this.root;for(n=0;r&&n<e.length;n++)r=r.getChildByName(e[n]);return r},getById:function(t){return this.entries[t]},importBlob:function(t,n,e){g(this),this.root.importBlob(t,n,e)},importText:function(t,n,e){g(this),this.root.importText(t,n,e)},importData64URI:function(t,n,e){g(this),this.root.importData64URI(t,n,e)},exportBlob:function(t,n,e){this.root.exportBlob(t,n,e)},exportText:function(t,n,e){this.root.exportText(t,n,e)},exportFileEntry:function(t,n,e,r){this.root.exportFileEntry(t,n,e,r)},exportData64URI:function(t,n,e){this.root.exportData64URI(t,n,e)}},zip.fs={FS:E,ZipDirectoryEntry:M,ZipFileEntry:y},zip.getMimeType=function(){return"application/octet-stream"}}()},{}],3:[function(t,n,e){var r=t("zip");function i(t){var n=new Blob([t],{type:"application/javascript"});return URL.createObjectURL(n)}var a=i("/* jshint worker:true */\n(function main(global) {\n\t\"use strict\";\n\n\tif (global.zWorkerInitialized)\n\t\tthrow new Error('z-worker.js should be run only once');\n\tglobal.zWorkerInitialized = true;\n\n\taddEventListener(\"message\", function(event) {\n\t\tvar message = event.data, type = message.type, sn = message.sn;\n\t\tvar handler = handlers[type];\n\t\tif (handler) {\n\t\t\ttry {\n\t\t\t\thandler(message);\n\t\t\t} catch (e) {\n\t\t\t\tonError(type, sn, e);\n\t\t\t}\n\t\t}\n\t\t//for debug\n\t\t//postMessage({type: 'echo', originalType: type, sn: sn});\n\t});\n\n\tvar handlers = {\n\t\timportScripts: doImportScripts,\n\t\tnewTask: newTask,\n\t\tappend: processData,\n\t\tflush: processData,\n\t};\n\n\t// deflater/inflater tasks indexed by serial numbers\n\tvar tasks = {};\n\n\tfunction doImportScripts(msg) {\n\t\tif (msg.scripts && msg.scripts.length > 0)\n\t\t\timportScripts.apply(undefined, msg.scripts);\n\t\tpostMessage({type: 'importScripts'});\n\t}\n\n\tfunction newTask(msg) {\n\t\tvar CodecClass = global[msg.codecClass];\n\t\tvar sn = msg.sn;\n\t\tif (tasks[sn])\n\t\t\tthrow Error('duplicated sn');\n\t\ttasks[sn] =  {\n\t\t\tcodec: new CodecClass(msg.options),\n\t\t\tcrcInput: msg.crcType === 'input',\n\t\t\tcrcOutput: msg.crcType === 'output',\n\t\t\tcrc: new Crc32(),\n\t\t};\n\t\tpostMessage({type: 'newTask', sn: sn});\n\t}\n\n\t// performance may not be supported\n\tvar now = global.performance ? global.performance.now.bind(global.performance) : Date.now;\n\n\tfunction processData(msg) {\n\t\tvar sn = msg.sn, type = msg.type, input = msg.data;\n\t\tvar task = tasks[sn];\n\t\t// allow creating codec on first append\n\t\tif (!task && msg.codecClass) {\n\t\t\tnewTask(msg);\n\t\t\ttask = tasks[sn];\n\t\t}\n\t\tvar isAppend = type === 'append';\n\t\tvar start = now();\n\t\tvar output;\n\t\tif (isAppend) {\n\t\t\ttry {\n\t\t\t\toutput = task.codec.append(input, function onprogress(loaded) {\n\t\t\t\t\tpostMessage({type: 'progress', sn: sn, loaded: loaded});\n\t\t\t\t});\n\t\t\t} catch (e) {\n\t\t\t\tdelete tasks[sn];\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t} else {\n\t\t\tdelete tasks[sn];\n\t\t\toutput = task.codec.flush();\n\t\t}\n\t\tvar codecTime = now() - start;\n\n\t\tstart = now();\n\t\tif (input && task.crcInput)\n\t\t\ttask.crc.append(input);\n\t\tif (output && task.crcOutput)\n\t\t\ttask.crc.append(output);\n\t\tvar crcTime = now() - start;\n\n\t\tvar rmsg = {type: type, sn: sn, codecTime: codecTime, crcTime: crcTime};\n\t\tvar transferables = [];\n\t\tif (output) {\n\t\t\trmsg.data = output;\n\t\t\ttransferables.push(output.buffer);\n\t\t}\n\t\tif (!isAppend && (task.crcInput || task.crcOutput))\n\t\t\trmsg.crc = task.crc.get();\n\t\t\n\t\t// posting a message with transferables will fail on IE10\n\t\ttry {\n\t\t\tpostMessage(rmsg, transferables);\n\t\t} catch(ex) {\n\t\t\tpostMessage(rmsg); // retry without transferables\n\t\t}\n\t}\n\n\tfunction onError(type, sn, e) {\n\t\tvar msg = {\n\t\t\ttype: type,\n\t\t\tsn: sn,\n\t\t\terror: formatError(e)\n\t\t};\n\t\tpostMessage(msg);\n\t}\n\n\tfunction formatError(e) {\n\t\treturn { message: e.message, stack: e.stack };\n\t}\n\n\t// Crc32 code copied from file zip.js\n\tfunction Crc32() {\n\t\tthis.crc = -1;\n\t}\n\tCrc32.prototype.append = function append(data) {\n\t\tvar crc = this.crc | 0, table = this.table;\n\t\tfor (var offset = 0, len = data.length | 0; offset < len; offset++)\n\t\t\tcrc = (crc >>> 8) ^ table[(crc ^ data[offset]) & 0xFF];\n\t\tthis.crc = crc;\n\t};\n\tCrc32.prototype.get = function get() {\n\t\treturn ~this.crc;\n\t};\n\tCrc32.prototype.table = (function() {\n\t\tvar i, j, t, table = []; // Uint32Array is actually slower than []\n\t\tfor (i = 0; i < 256; i++) {\n\t\t\tt = i;\n\t\t\tfor (j = 0; j < 8; j++)\n\t\t\t\tif (t & 1)\n\t\t\t\t\tt = (t >>> 1) ^ 0xEDB88320;\n\t\t\t\telse\n\t\t\t\t\tt = t >>> 1;\n\t\t\ttable[i] = t;\n\t\t}\n\t\treturn table;\n\t})();\n\n\t// \"no-op\" codec\n\tfunction NOOP() {}\n\tglobal.NOOP = NOOP;\n\tNOOP.prototype.append = function append(bytes, onprogress) {\n\t\treturn bytes;\n\t};\n\tNOOP.prototype.flush = function flush() {};\n})(this);\n");r.workerScripts={deflater:[a,i('/*\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ``AS IS\'\' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n\n(function(global) {\n\t"use strict";\n\n\t// Global\n\n\tvar MAX_BITS = 15;\n\tvar D_CODES = 30;\n\tvar BL_CODES = 19;\n\n\tvar LENGTH_CODES = 29;\n\tvar LITERALS = 256;\n\tvar L_CODES = (LITERALS + 1 + LENGTH_CODES);\n\tvar HEAP_SIZE = (2 * L_CODES + 1);\n\n\tvar END_BLOCK = 256;\n\n\t// Bit length codes must not exceed MAX_BL_BITS bits\n\tvar MAX_BL_BITS = 7;\n\n\t// repeat previous bit length 3-6 times (2 bits of repeat count)\n\tvar REP_3_6 = 16;\n\n\t// repeat a zero length 3-10 times (3 bits of repeat count)\n\tvar REPZ_3_10 = 17;\n\n\t// repeat a zero length 11-138 times (7 bits of repeat count)\n\tvar REPZ_11_138 = 18;\n\n\t// The lengths of the bit length codes are sent in order of decreasing\n\t// probability, to avoid transmitting the lengths for unused bit\n\t// length codes.\n\n\tvar Buf_size = 8 * 2;\n\n\t// JZlib version : "1.0.2"\n\tvar Z_DEFAULT_COMPRESSION = -1;\n\n\t// compression strategy\n\tvar Z_FILTERED = 1;\n\tvar Z_HUFFMAN_ONLY = 2;\n\tvar Z_DEFAULT_STRATEGY = 0;\n\n\tvar Z_NO_FLUSH = 0;\n\tvar Z_PARTIAL_FLUSH = 1;\n\tvar Z_FULL_FLUSH = 3;\n\tvar Z_FINISH = 4;\n\n\tvar Z_OK = 0;\n\tvar Z_STREAM_END = 1;\n\tvar Z_NEED_DICT = 2;\n\tvar Z_STREAM_ERROR = -2;\n\tvar Z_DATA_ERROR = -3;\n\tvar Z_BUF_ERROR = -5;\n\n\t// Tree\n\n\t// see definition of array dist_code below\n\tvar _dist_code = [ 0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,\n\t\t\t10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n\t\t\t12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n\t\t\t13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n\t\t\t14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n\t\t\t14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,\n\t\t\t15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 16, 17, 18, 18, 19, 19,\n\t\t\t20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n\t\t\t24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n\t\t\t26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,\n\t\t\t27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,\n\t\t\t28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29,\n\t\t\t29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,\n\t\t\t29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29 ];\n\n\tfunction Tree() {\n\t\tvar that = this;\n\n\t\t// dyn_tree; // the dynamic tree\n\t\t// max_code; // largest code with non zero frequency\n\t\t// stat_desc; // the corresponding static tree\n\n\t\t// Compute the optimal bit lengths for a tree and update the total bit\n\t\t// length\n\t\t// for the current block.\n\t\t// IN assertion: the fields freq and dad are set, heap[heap_max] and\n\t\t// above are the tree nodes sorted by increasing frequency.\n\t\t// OUT assertions: the field len is set to the optimal bit length, the\n\t\t// array bl_count contains the frequencies for each bit length.\n\t\t// The length opt_len is updated; static_len is also updated if stree is\n\t\t// not null.\n\t\tfunction gen_bitlen(s) {\n\t\t\tvar tree = that.dyn_tree;\n\t\t\tvar stree = that.stat_desc.static_tree;\n\t\t\tvar extra = that.stat_desc.extra_bits;\n\t\t\tvar base = that.stat_desc.extra_base;\n\t\t\tvar max_length = that.stat_desc.max_length;\n\t\t\tvar h; // heap index\n\t\t\tvar n, m; // iterate over the tree elements\n\t\t\tvar bits; // bit length\n\t\t\tvar xbits; // extra bits\n\t\t\tvar f; // frequency\n\t\t\tvar overflow = 0; // number of elements with bit length too large\n\n\t\t\tfor (bits = 0; bits <= MAX_BITS; bits++)\n\t\t\t\ts.bl_count[bits] = 0;\n\n\t\t\t// In a first pass, compute the optimal bit lengths (which may\n\t\t\t// overflow in the case of the bit length tree).\n\t\t\ttree[s.heap[s.heap_max] * 2 + 1] = 0; // root of the heap\n\n\t\t\tfor (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n\t\t\t\tn = s.heap[h];\n\t\t\t\tbits = tree[tree[n * 2 + 1] * 2 + 1] + 1;\n\t\t\t\tif (bits > max_length) {\n\t\t\t\t\tbits = max_length;\n\t\t\t\t\toverflow++;\n\t\t\t\t}\n\t\t\t\ttree[n * 2 + 1] = bits;\n\t\t\t\t// We overwrite tree[n*2+1] which is no longer needed\n\n\t\t\t\tif (n > that.max_code)\n\t\t\t\t\tcontinue; // not a leaf node\n\n\t\t\t\ts.bl_count[bits]++;\n\t\t\t\txbits = 0;\n\t\t\t\tif (n >= base)\n\t\t\t\t\txbits = extra[n - base];\n\t\t\t\tf = tree[n * 2];\n\t\t\t\ts.opt_len += f * (bits + xbits);\n\t\t\t\tif (stree)\n\t\t\t\t\ts.static_len += f * (stree[n * 2 + 1] + xbits);\n\t\t\t}\n\t\t\tif (overflow === 0)\n\t\t\t\treturn;\n\n\t\t\t// This happens for example on obj2 and pic of the Calgary corpus\n\t\t\t// Find the first bit length which could increase:\n\t\t\tdo {\n\t\t\t\tbits = max_length - 1;\n\t\t\t\twhile (s.bl_count[bits] === 0)\n\t\t\t\t\tbits--;\n\t\t\t\ts.bl_count[bits]--; // move one leaf down the tree\n\t\t\t\ts.bl_count[bits + 1] += 2; // move one overflow item as its brother\n\t\t\t\ts.bl_count[max_length]--;\n\t\t\t\t// The brother of the overflow item also moves one step up,\n\t\t\t\t// but this does not affect bl_count[max_length]\n\t\t\t\toverflow -= 2;\n\t\t\t} while (overflow > 0);\n\n\t\t\tfor (bits = max_length; bits !== 0; bits--) {\n\t\t\t\tn = s.bl_count[bits];\n\t\t\t\twhile (n !== 0) {\n\t\t\t\t\tm = s.heap[--h];\n\t\t\t\t\tif (m > that.max_code)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tif (tree[m * 2 + 1] != bits) {\n\t\t\t\t\t\ts.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];\n\t\t\t\t\t\ttree[m * 2 + 1] = bits;\n\t\t\t\t\t}\n\t\t\t\t\tn--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Reverse the first len bits of a code, using straightforward code (a\n\t\t// faster\n\t\t// method would use a table)\n\t\t// IN assertion: 1 <= len <= 15\n\t\tfunction bi_reverse(code, // the value to invert\n\t\tlen // its bit length\n\t\t) {\n\t\t\tvar res = 0;\n\t\t\tdo {\n\t\t\t\tres |= code & 1;\n\t\t\t\tcode >>>= 1;\n\t\t\t\tres <<= 1;\n\t\t\t} while (--len > 0);\n\t\t\treturn res >>> 1;\n\t\t}\n\n\t\t// Generate the codes for a given tree and bit counts (which need not be\n\t\t// optimal).\n\t\t// IN assertion: the array bl_count contains the bit length statistics for\n\t\t// the given tree and the field len is set for all tree elements.\n\t\t// OUT assertion: the field code is set for all tree elements of non\n\t\t// zero code length.\n\t\tfunction gen_codes(tree, // the tree to decorate\n\t\tmax_code, // largest code with non zero frequency\n\t\tbl_count // number of codes at each bit length\n\t\t) {\n\t\t\tvar next_code = []; // next code value for each\n\t\t\t// bit length\n\t\t\tvar code = 0; // running code value\n\t\t\tvar bits; // bit index\n\t\t\tvar n; // code index\n\t\t\tvar len;\n\n\t\t\t// The distribution counts are first used to generate the code values\n\t\t\t// without bit reversal.\n\t\t\tfor (bits = 1; bits <= MAX_BITS; bits++) {\n\t\t\t\tnext_code[bits] = code = ((code + bl_count[bits - 1]) << 1);\n\t\t\t}\n\n\t\t\t// Check that the bit counts in bl_count are consistent. The last code\n\t\t\t// must be all ones.\n\t\t\t// Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n\t\t\t// "inconsistent bit counts");\n\t\t\t// Tracev((stderr,"\\ngen_codes: max_code %d ", max_code));\n\n\t\t\tfor (n = 0; n <= max_code; n++) {\n\t\t\t\tlen = tree[n * 2 + 1];\n\t\t\t\tif (len === 0)\n\t\t\t\t\tcontinue;\n\t\t\t\t// Now reverse the bits\n\t\t\t\ttree[n * 2] = bi_reverse(next_code[len]++, len);\n\t\t\t}\n\t\t}\n\n\t\t// Construct one Huffman tree and assigns the code bit strings and lengths.\n\t\t// Update the total bit length for the current block.\n\t\t// IN assertion: the field freq is set for all tree elements.\n\t\t// OUT assertions: the fields len and code are set to the optimal bit length\n\t\t// and corresponding code. The length opt_len is updated; static_len is\n\t\t// also updated if stree is not null. The field max_code is set.\n\t\tthat.build_tree = function(s) {\n\t\t\tvar tree = that.dyn_tree;\n\t\t\tvar stree = that.stat_desc.static_tree;\n\t\t\tvar elems = that.stat_desc.elems;\n\t\t\tvar n, m; // iterate over heap elements\n\t\t\tvar max_code = -1; // largest code with non zero frequency\n\t\t\tvar node; // new node being created\n\n\t\t\t// Construct the initial heap, with least frequent element in\n\t\t\t// heap[1]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n\t\t\t// heap[0] is not used.\n\t\t\ts.heap_len = 0;\n\t\t\ts.heap_max = HEAP_SIZE;\n\n\t\t\tfor (n = 0; n < elems; n++) {\n\t\t\t\tif (tree[n * 2] !== 0) {\n\t\t\t\t\ts.heap[++s.heap_len] = max_code = n;\n\t\t\t\t\ts.depth[n] = 0;\n\t\t\t\t} else {\n\t\t\t\t\ttree[n * 2 + 1] = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// The pkzip format requires that at least one distance code exists,\n\t\t\t// and that at least one bit should be sent even if there is only one\n\t\t\t// possible code. So to avoid special checks later on we force at least\n\t\t\t// two codes of non zero frequency.\n\t\t\twhile (s.heap_len < 2) {\n\t\t\t\tnode = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;\n\t\t\t\ttree[node * 2] = 1;\n\t\t\t\ts.depth[node] = 0;\n\t\t\t\ts.opt_len--;\n\t\t\t\tif (stree)\n\t\t\t\t\ts.static_len -= stree[node * 2 + 1];\n\t\t\t\t// node is 0 or 1 so it does not have extra bits\n\t\t\t}\n\t\t\tthat.max_code = max_code;\n\n\t\t\t// The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n\t\t\t// establish sub-heaps of increasing lengths:\n\n\t\t\tfor (n = Math.floor(s.heap_len / 2); n >= 1; n--)\n\t\t\t\ts.pqdownheap(tree, n);\n\n\t\t\t// Construct the Huffman tree by repeatedly combining the least two\n\t\t\t// frequent nodes.\n\n\t\t\tnode = elems; // next internal node of the tree\n\t\t\tdo {\n\t\t\t\t// n = node of least frequency\n\t\t\t\tn = s.heap[1];\n\t\t\t\ts.heap[1] = s.heap[s.heap_len--];\n\t\t\t\ts.pqdownheap(tree, 1);\n\t\t\t\tm = s.heap[1]; // m = node of next least frequency\n\n\t\t\t\ts.heap[--s.heap_max] = n; // keep the nodes sorted by frequency\n\t\t\t\ts.heap[--s.heap_max] = m;\n\n\t\t\t\t// Create a new node father of n and m\n\t\t\t\ttree[node * 2] = (tree[n * 2] + tree[m * 2]);\n\t\t\t\ts.depth[node] = Math.max(s.depth[n], s.depth[m]) + 1;\n\t\t\t\ttree[n * 2 + 1] = tree[m * 2 + 1] = node;\n\n\t\t\t\t// and insert the new node in the heap\n\t\t\t\ts.heap[1] = node++;\n\t\t\t\ts.pqdownheap(tree, 1);\n\t\t\t} while (s.heap_len >= 2);\n\n\t\t\ts.heap[--s.heap_max] = s.heap[1];\n\n\t\t\t// At this point, the fields freq and dad are set. We can now\n\t\t\t// generate the bit lengths.\n\n\t\t\tgen_bitlen(s);\n\n\t\t\t// The field len is now set, we can generate the bit codes\n\t\t\tgen_codes(tree, that.max_code, s.bl_count);\n\t\t};\n\n\t}\n\n\tTree._length_code = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16,\n\t\t\t16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20,\n\t\t\t20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n\t\t\t22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n\t\t\t24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25,\n\t\t\t25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,\n\t\t\t26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28 ];\n\n\tTree.base_length = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 14, 16, 20, 24, 28, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 0 ];\n\n\tTree.base_dist = [ 0, 1, 2, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024, 1536, 2048, 3072, 4096, 6144, 8192, 12288, 16384,\n\t\t\t24576 ];\n\n\t// Mapping from a distance to a distance code. dist is the distance - 1 and\n\t// must not have side effects. _dist_code[256] and _dist_code[257] are never\n\t// used.\n\tTree.d_code = function(dist) {\n\t\treturn ((dist) < 256 ? _dist_code[dist] : _dist_code[256 + ((dist) >>> 7)]);\n\t};\n\n\t// extra bits for each length code\n\tTree.extra_lbits = [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0 ];\n\n\t// extra bits for each distance code\n\tTree.extra_dbits = [ 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ];\n\n\t// extra bits for each bit length code\n\tTree.extra_blbits = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7 ];\n\n\tTree.bl_order = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\t// StaticTree\n\n\tfunction StaticTree(static_tree, extra_bits, extra_base, elems, max_length) {\n\t\tvar that = this;\n\t\tthat.static_tree = static_tree;\n\t\tthat.extra_bits = extra_bits;\n\t\tthat.extra_base = extra_base;\n\t\tthat.elems = elems;\n\t\tthat.max_length = max_length;\n\t}\n\n\tStaticTree.static_ltree = [ 12, 8, 140, 8, 76, 8, 204, 8, 44, 8, 172, 8, 108, 8, 236, 8, 28, 8, 156, 8, 92, 8, 220, 8, 60, 8, 188, 8, 124, 8, 252, 8, 2, 8,\n\t\t\t130, 8, 66, 8, 194, 8, 34, 8, 162, 8, 98, 8, 226, 8, 18, 8, 146, 8, 82, 8, 210, 8, 50, 8, 178, 8, 114, 8, 242, 8, 10, 8, 138, 8, 74, 8, 202, 8, 42,\n\t\t\t8, 170, 8, 106, 8, 234, 8, 26, 8, 154, 8, 90, 8, 218, 8, 58, 8, 186, 8, 122, 8, 250, 8, 6, 8, 134, 8, 70, 8, 198, 8, 38, 8, 166, 8, 102, 8, 230, 8,\n\t\t\t22, 8, 150, 8, 86, 8, 214, 8, 54, 8, 182, 8, 118, 8, 246, 8, 14, 8, 142, 8, 78, 8, 206, 8, 46, 8, 174, 8, 110, 8, 238, 8, 30, 8, 158, 8, 94, 8,\n\t\t\t222, 8, 62, 8, 190, 8, 126, 8, 254, 8, 1, 8, 129, 8, 65, 8, 193, 8, 33, 8, 161, 8, 97, 8, 225, 8, 17, 8, 145, 8, 81, 8, 209, 8, 49, 8, 177, 8, 113,\n\t\t\t8, 241, 8, 9, 8, 137, 8, 73, 8, 201, 8, 41, 8, 169, 8, 105, 8, 233, 8, 25, 8, 153, 8, 89, 8, 217, 8, 57, 8, 185, 8, 121, 8, 249, 8, 5, 8, 133, 8,\n\t\t\t69, 8, 197, 8, 37, 8, 165, 8, 101, 8, 229, 8, 21, 8, 149, 8, 85, 8, 213, 8, 53, 8, 181, 8, 117, 8, 245, 8, 13, 8, 141, 8, 77, 8, 205, 8, 45, 8,\n\t\t\t173, 8, 109, 8, 237, 8, 29, 8, 157, 8, 93, 8, 221, 8, 61, 8, 189, 8, 125, 8, 253, 8, 19, 9, 275, 9, 147, 9, 403, 9, 83, 9, 339, 9, 211, 9, 467, 9,\n\t\t\t51, 9, 307, 9, 179, 9, 435, 9, 115, 9, 371, 9, 243, 9, 499, 9, 11, 9, 267, 9, 139, 9, 395, 9, 75, 9, 331, 9, 203, 9, 459, 9, 43, 9, 299, 9, 171, 9,\n\t\t\t427, 9, 107, 9, 363, 9, 235, 9, 491, 9, 27, 9, 283, 9, 155, 9, 411, 9, 91, 9, 347, 9, 219, 9, 475, 9, 59, 9, 315, 9, 187, 9, 443, 9, 123, 9, 379,\n\t\t\t9, 251, 9, 507, 9, 7, 9, 263, 9, 135, 9, 391, 9, 71, 9, 327, 9, 199, 9, 455, 9, 39, 9, 295, 9, 167, 9, 423, 9, 103, 9, 359, 9, 231, 9, 487, 9, 23,\n\t\t\t9, 279, 9, 151, 9, 407, 9, 87, 9, 343, 9, 215, 9, 471, 9, 55, 9, 311, 9, 183, 9, 439, 9, 119, 9, 375, 9, 247, 9, 503, 9, 15, 9, 271, 9, 143, 9,\n\t\t\t399, 9, 79, 9, 335, 9, 207, 9, 463, 9, 47, 9, 303, 9, 175, 9, 431, 9, 111, 9, 367, 9, 239, 9, 495, 9, 31, 9, 287, 9, 159, 9, 415, 9, 95, 9, 351, 9,\n\t\t\t223, 9, 479, 9, 63, 9, 319, 9, 191, 9, 447, 9, 127, 9, 383, 9, 255, 9, 511, 9, 0, 7, 64, 7, 32, 7, 96, 7, 16, 7, 80, 7, 48, 7, 112, 7, 8, 7, 72, 7,\n\t\t\t40, 7, 104, 7, 24, 7, 88, 7, 56, 7, 120, 7, 4, 7, 68, 7, 36, 7, 100, 7, 20, 7, 84, 7, 52, 7, 116, 7, 3, 8, 131, 8, 67, 8, 195, 8, 35, 8, 163, 8,\n\t\t\t99, 8, 227, 8 ];\n\n\tStaticTree.static_dtree = [ 0, 5, 16, 5, 8, 5, 24, 5, 4, 5, 20, 5, 12, 5, 28, 5, 2, 5, 18, 5, 10, 5, 26, 5, 6, 5, 22, 5, 14, 5, 30, 5, 1, 5, 17, 5, 9, 5,\n\t\t\t25, 5, 5, 5, 21, 5, 13, 5, 29, 5, 3, 5, 19, 5, 11, 5, 27, 5, 7, 5, 23, 5 ];\n\n\tStaticTree.static_l_desc = new StaticTree(StaticTree.static_ltree, Tree.extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n\n\tStaticTree.static_d_desc = new StaticTree(StaticTree.static_dtree, Tree.extra_dbits, 0, D_CODES, MAX_BITS);\n\n\tStaticTree.static_bl_desc = new StaticTree(null, Tree.extra_blbits, 0, BL_CODES, MAX_BL_BITS);\n\n\t// Deflate\n\n\tvar MAX_MEM_LEVEL = 9;\n\tvar DEF_MEM_LEVEL = 8;\n\n\tfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\t\tvar that = this;\n\t\tthat.good_length = good_length;\n\t\tthat.max_lazy = max_lazy;\n\t\tthat.nice_length = nice_length;\n\t\tthat.max_chain = max_chain;\n\t\tthat.func = func;\n\t}\n\n\tvar STORED = 0;\n\tvar FAST = 1;\n\tvar SLOW = 2;\n\tvar config_table = [ new Config(0, 0, 0, 0, STORED), new Config(4, 4, 8, 4, FAST), new Config(4, 5, 16, 8, FAST), new Config(4, 6, 32, 32, FAST),\n\t\t\tnew Config(4, 4, 16, 16, SLOW), new Config(8, 16, 32, 32, SLOW), new Config(8, 16, 128, 128, SLOW), new Config(8, 32, 128, 256, SLOW),\n\t\t\tnew Config(32, 128, 258, 1024, SLOW), new Config(32, 258, 258, 4096, SLOW) ];\n\n\tvar z_errmsg = [ "need dictionary", // Z_NEED_DICT\n\t// 2\n\t"stream end", // Z_STREAM_END 1\n\t"", // Z_OK 0\n\t"", // Z_ERRNO (-1)\n\t"stream error", // Z_STREAM_ERROR (-2)\n\t"data error", // Z_DATA_ERROR (-3)\n\t"", // Z_MEM_ERROR (-4)\n\t"buffer error", // Z_BUF_ERROR (-5)\n\t"",// Z_VERSION_ERROR (-6)\n\t"" ];\n\n\t// block not completed, need more input or more output\n\tvar NeedMore = 0;\n\n\t// block flush performed\n\tvar BlockDone = 1;\n\n\t// finish started, need only more output at next deflate\n\tvar FinishStarted = 2;\n\n\t// finish done, accept no more input or output\n\tvar FinishDone = 3;\n\n\t// preset dictionary flag in zlib header\n\tvar PRESET_DICT = 0x20;\n\n\tvar INIT_STATE = 42;\n\tvar BUSY_STATE = 113;\n\tvar FINISH_STATE = 666;\n\n\t// The deflate compression method\n\tvar Z_DEFLATED = 8;\n\n\tvar STORED_BLOCK = 0;\n\tvar STATIC_TREES = 1;\n\tvar DYN_TREES = 2;\n\n\tvar MIN_MATCH = 3;\n\tvar MAX_MATCH = 258;\n\tvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\n\tfunction smaller(tree, n, m, depth) {\n\t\tvar tn2 = tree[n * 2];\n\t\tvar tm2 = tree[m * 2];\n\t\treturn (tn2 < tm2 || (tn2 == tm2 && depth[n] <= depth[m]));\n\t}\n\n\tfunction Deflate() {\n\n\t\tvar that = this;\n\t\tvar strm; // pointer back to this zlib stream\n\t\tvar status; // as the name implies\n\t\t// pending_buf; // output still pending\n\t\tvar pending_buf_size; // size of pending_buf\n\t\t// pending_out; // next pending byte to output to the stream\n\t\t// pending; // nb of bytes in the pending buffer\n\t\tvar method; // STORED (for zip only) or DEFLATED\n\t\tvar last_flush; // value of flush param for previous deflate call\n\n\t\tvar w_size; // LZ77 window size (32K by default)\n\t\tvar w_bits; // log2(w_size) (8..16)\n\t\tvar w_mask; // w_size - 1\n\n\t\tvar window;\n\t\t// Sliding window. Input bytes are read into the second half of the window,\n\t\t// and move to the first half later to keep a dictionary of at least wSize\n\t\t// bytes. With this organization, matches are limited to a distance of\n\t\t// wSize-MAX_MATCH bytes, but this ensures that IO is always\n\t\t// performed with a length multiple of the block size. Also, it limits\n\t\t// the window size to 64K, which is quite useful on MSDOS.\n\t\t// To do: use the user input buffer as sliding window.\n\n\t\tvar window_size;\n\t\t// Actual size of window: 2*wSize, except when the user input buffer\n\t\t// is directly used as sliding window.\n\n\t\tvar prev;\n\t\t// Link to older string with same hash index. To limit the size of this\n\t\t// array to 64K, this link is maintained only for the last 32K strings.\n\t\t// An index in this array is thus a window index modulo 32K.\n\n\t\tvar head; // Heads of the hash chains or NIL.\n\n\t\tvar ins_h; // hash index of string to be inserted\n\t\tvar hash_size; // number of elements in hash table\n\t\tvar hash_bits; // log2(hash_size)\n\t\tvar hash_mask; // hash_size-1\n\n\t\t// Number of bits by which ins_h must be shifted at each input\n\t\t// step. It must be such that after MIN_MATCH steps, the oldest\n\t\t// byte no longer takes part in the hash key, that is:\n\t\t// hash_shift * MIN_MATCH >= hash_bits\n\t\tvar hash_shift;\n\n\t\t// Window position at the beginning of the current output block. Gets\n\t\t// negative when the window is moved backwards.\n\n\t\tvar block_start;\n\n\t\tvar match_length; // length of best match\n\t\tvar prev_match; // previous match\n\t\tvar match_available; // set if previous match exists\n\t\tvar strstart; // start of string to insert\n\t\tvar match_start; // start of matching string\n\t\tvar lookahead; // number of valid bytes ahead in window\n\n\t\t// Length of the best match at previous step. Matches not greater than this\n\t\t// are discarded. This is used in the lazy match evaluation.\n\t\tvar prev_length;\n\n\t\t// To speed up deflation, hash chains are never searched beyond this\n\t\t// length. A higher limit improves compression ratio but degrades the speed.\n\t\tvar max_chain_length;\n\n\t\t// Attempt to find a better match only when the current match is strictly\n\t\t// smaller than this value. This mechanism is used only for compression\n\t\t// levels >= 4.\n\t\tvar max_lazy_match;\n\n\t\t// Insert new strings in the hash table only if the match length is not\n\t\t// greater than this length. This saves time but degrades compression.\n\t\t// max_insert_length is used only for compression levels <= 3.\n\n\t\tvar level; // compression level (1..9)\n\t\tvar strategy; // favor or force Huffman coding\n\n\t\t// Use a faster search when the previous match is longer than this\n\t\tvar good_match;\n\n\t\t// Stop searching when current match exceeds this\n\t\tvar nice_match;\n\n\t\tvar dyn_ltree; // literal and length tree\n\t\tvar dyn_dtree; // distance tree\n\t\tvar bl_tree; // Huffman tree for bit lengths\n\n\t\tvar l_desc = new Tree(); // desc for literal tree\n\t\tvar d_desc = new Tree(); // desc for distance tree\n\t\tvar bl_desc = new Tree(); // desc for bit length tree\n\n\t\t// that.heap_len; // number of elements in the heap\n\t\t// that.heap_max; // element of largest frequency\n\t\t// The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n\t\t// The same heap array is used to build all trees.\n\n\t\t// Depth of each subtree used as tie breaker for trees of equal frequency\n\t\tthat.depth = [];\n\n\t\tvar l_buf; // index for literals or lengths */\n\n\t\t// Size of match buffer for literals/lengths. There are 4 reasons for\n\t\t// limiting lit_bufsize to 64K:\n\t\t// - frequencies can be kept in 16 bit counters\n\t\t// - if compression is not successful for the first block, all input\n\t\t// data is still in the window so we can still emit a stored block even\n\t\t// when input comes from standard input. (This can also be done for\n\t\t// all blocks if lit_bufsize is not greater than 32K.)\n\t\t// - if compression is not successful for a file smaller than 64K, we can\n\t\t// even emit a stored file instead of a stored block (saving 5 bytes).\n\t\t// This is applicable only for zip (not gzip or zlib).\n\t\t// - creating new Huffman trees less frequently may not provide fast\n\t\t// adaptation to changes in the input data statistics. (Take for\n\t\t// example a binary file with poorly compressible code followed by\n\t\t// a highly compressible string table.) Smaller buffer sizes give\n\t\t// fast adaptation but have of course the overhead of transmitting\n\t\t// trees more frequently.\n\t\t// - I can\'t count above 4\n\t\tvar lit_bufsize;\n\n\t\tvar last_lit; // running index in l_buf\n\n\t\t// Buffer for distances. To simplify the code, d_buf and l_buf have\n\t\t// the same number of elements. To use different lengths, an extra flag\n\t\t// array would be necessary.\n\n\t\tvar d_buf; // index of pendig_buf\n\n\t\t// that.opt_len; // bit length of current block with optimal trees\n\t\t// that.static_len; // bit length of current block with static trees\n\t\tvar matches; // number of string matches in current block\n\t\tvar last_eob_len; // bit length of EOB code for last block\n\n\t\t// Output buffer. bits are inserted starting at the bottom (least\n\t\t// significant bits).\n\t\tvar bi_buf;\n\n\t\t// Number of valid bits in bi_buf. All bits above the last valid bit\n\t\t// are always zero.\n\t\tvar bi_valid;\n\n\t\t// number of codes at each bit length for an optimal tree\n\t\tthat.bl_count = [];\n\n\t\t// heap used to build the Huffman trees\n\t\tthat.heap = [];\n\n\t\tdyn_ltree = [];\n\t\tdyn_dtree = [];\n\t\tbl_tree = [];\n\n\t\tfunction lm_init() {\n\t\t\tvar i;\n\t\t\twindow_size = 2 * w_size;\n\n\t\t\thead[hash_size - 1] = 0;\n\t\t\tfor (i = 0; i < hash_size - 1; i++) {\n\t\t\t\thead[i] = 0;\n\t\t\t}\n\n\t\t\t// Set the default configuration parameters:\n\t\t\tmax_lazy_match = config_table[level].max_lazy;\n\t\t\tgood_match = config_table[level].good_length;\n\t\t\tnice_match = config_table[level].nice_length;\n\t\t\tmax_chain_length = config_table[level].max_chain;\n\n\t\t\tstrstart = 0;\n\t\t\tblock_start = 0;\n\t\t\tlookahead = 0;\n\t\t\tmatch_length = prev_length = MIN_MATCH - 1;\n\t\t\tmatch_available = 0;\n\t\t\tins_h = 0;\n\t\t}\n\n\t\tfunction init_block() {\n\t\t\tvar i;\n\t\t\t// Initialize the trees.\n\t\t\tfor (i = 0; i < L_CODES; i++)\n\t\t\t\tdyn_ltree[i * 2] = 0;\n\t\t\tfor (i = 0; i < D_CODES; i++)\n\t\t\t\tdyn_dtree[i * 2] = 0;\n\t\t\tfor (i = 0; i < BL_CODES; i++)\n\t\t\t\tbl_tree[i * 2] = 0;\n\n\t\t\tdyn_ltree[END_BLOCK * 2] = 1;\n\t\t\tthat.opt_len = that.static_len = 0;\n\t\t\tlast_lit = matches = 0;\n\t\t}\n\n\t\t// Initialize the tree data structures for a new zlib stream.\n\t\tfunction tr_init() {\n\n\t\t\tl_desc.dyn_tree = dyn_ltree;\n\t\t\tl_desc.stat_desc = StaticTree.static_l_desc;\n\n\t\t\td_desc.dyn_tree = dyn_dtree;\n\t\t\td_desc.stat_desc = StaticTree.static_d_desc;\n\n\t\t\tbl_desc.dyn_tree = bl_tree;\n\t\t\tbl_desc.stat_desc = StaticTree.static_bl_desc;\n\n\t\t\tbi_buf = 0;\n\t\t\tbi_valid = 0;\n\t\t\tlast_eob_len = 8; // enough lookahead for inflate\n\n\t\t\t// Initialize the first block of the first file:\n\t\t\tinit_block();\n\t\t}\n\n\t\t// Restore the heap property by moving down the tree starting at node k,\n\t\t// exchanging a node with the smallest of its two sons if necessary,\n\t\t// stopping\n\t\t// when the heap property is re-established (each father smaller than its\n\t\t// two sons).\n\t\tthat.pqdownheap = function(tree, // the tree to restore\n\t\tk // node to move down\n\t\t) {\n\t\t\tvar heap = that.heap;\n\t\t\tvar v = heap[k];\n\t\t\tvar j = k << 1; // left son of k\n\t\t\twhile (j <= that.heap_len) {\n\t\t\t\t// Set j to the smallest of the two sons:\n\t\t\t\tif (j < that.heap_len && smaller(tree, heap[j + 1], heap[j], that.depth)) {\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\t// Exit if v is smaller than both sons\n\t\t\t\tif (smaller(tree, v, heap[j], that.depth))\n\t\t\t\t\tbreak;\n\n\t\t\t\t// Exchange v with the smallest son\n\t\t\t\theap[k] = heap[j];\n\t\t\t\tk = j;\n\t\t\t\t// And continue down the tree, setting j to the left son of k\n\t\t\t\tj <<= 1;\n\t\t\t}\n\t\t\theap[k] = v;\n\t\t};\n\n\t\t// Scan a literal or distance tree to determine the frequencies of the codes\n\t\t// in the bit length tree.\n\t\tfunction scan_tree(tree,// the tree to be scanned\n\t\tmax_code // and its largest code of non zero frequency\n\t\t) {\n\t\t\tvar n; // iterates over all tree elements\n\t\t\tvar prevlen = -1; // last emitted length\n\t\t\tvar curlen; // length of current code\n\t\t\tvar nextlen = tree[0 * 2 + 1]; // length of next code\n\t\t\tvar count = 0; // repeat count of the current code\n\t\t\tvar max_count = 7; // max repeat count\n\t\t\tvar min_count = 4; // min repeat count\n\n\t\t\tif (nextlen === 0) {\n\t\t\t\tmax_count = 138;\n\t\t\t\tmin_count = 3;\n\t\t\t}\n\t\t\ttree[(max_code + 1) * 2 + 1] = 0xffff; // guard\n\n\t\t\tfor (n = 0; n <= max_code; n++) {\n\t\t\t\tcurlen = nextlen;\n\t\t\t\tnextlen = tree[(n + 1) * 2 + 1];\n\t\t\t\tif (++count < max_count && curlen == nextlen) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (count < min_count) {\n\t\t\t\t\tbl_tree[curlen * 2] += count;\n\t\t\t\t} else if (curlen !== 0) {\n\t\t\t\t\tif (curlen != prevlen)\n\t\t\t\t\t\tbl_tree[curlen * 2]++;\n\t\t\t\t\tbl_tree[REP_3_6 * 2]++;\n\t\t\t\t} else if (count <= 10) {\n\t\t\t\t\tbl_tree[REPZ_3_10 * 2]++;\n\t\t\t\t} else {\n\t\t\t\t\tbl_tree[REPZ_11_138 * 2]++;\n\t\t\t\t}\n\t\t\t\tcount = 0;\n\t\t\t\tprevlen = curlen;\n\t\t\t\tif (nextlen === 0) {\n\t\t\t\t\tmax_count = 138;\n\t\t\t\t\tmin_count = 3;\n\t\t\t\t} else if (curlen == nextlen) {\n\t\t\t\t\tmax_count = 6;\n\t\t\t\t\tmin_count = 3;\n\t\t\t\t} else {\n\t\t\t\t\tmax_count = 7;\n\t\t\t\t\tmin_count = 4;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Construct the Huffman tree for the bit lengths and return the index in\n\t\t// bl_order of the last bit length code to send.\n\t\tfunction build_bl_tree() {\n\t\t\tvar max_blindex; // index of last bit length code of non zero freq\n\n\t\t\t// Determine the bit length frequencies for literal and distance trees\n\t\t\tscan_tree(dyn_ltree, l_desc.max_code);\n\t\t\tscan_tree(dyn_dtree, d_desc.max_code);\n\n\t\t\t// Build the bit length tree:\n\t\t\tbl_desc.build_tree(that);\n\t\t\t// opt_len now includes the length of the tree representations, except\n\t\t\t// the lengths of the bit lengths codes and the 5+5+4 bits for the\n\t\t\t// counts.\n\n\t\t\t// Determine the number of bit length codes to send. The pkzip format\n\t\t\t// requires that at least 4 bit length codes be sent. (appnote.txt says\n\t\t\t// 3 but the actual value used is 4.)\n\t\t\tfor (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n\t\t\t\tif (bl_tree[Tree.bl_order[max_blindex] * 2 + 1] !== 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Update opt_len to include the bit length tree and counts\n\t\t\tthat.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n\n\t\t\treturn max_blindex;\n\t\t}\n\n\t\t// Output a byte on the stream.\n\t\t// IN assertion: there is enough room in pending_buf.\n\t\tfunction put_byte(p) {\n\t\t\tthat.pending_buf[that.pending++] = p;\n\t\t}\n\n\t\tfunction put_short(w) {\n\t\t\tput_byte(w & 0xff);\n\t\t\tput_byte((w >>> 8) & 0xff);\n\t\t}\n\n\t\tfunction putShortMSB(b) {\n\t\t\tput_byte((b >> 8) & 0xff);\n\t\t\tput_byte((b & 0xff) & 0xff);\n\t\t}\n\n\t\tfunction send_bits(value, length) {\n\t\t\tvar val, len = length;\n\t\t\tif (bi_valid > Buf_size - len) {\n\t\t\t\tval = value;\n\t\t\t\t// bi_buf |= (val << bi_valid);\n\t\t\t\tbi_buf |= ((val << bi_valid) & 0xffff);\n\t\t\t\tput_short(bi_buf);\n\t\t\t\tbi_buf = val >>> (Buf_size - bi_valid);\n\t\t\t\tbi_valid += len - Buf_size;\n\t\t\t} else {\n\t\t\t\t// bi_buf |= (value) << bi_valid;\n\t\t\t\tbi_buf |= (((value) << bi_valid) & 0xffff);\n\t\t\t\tbi_valid += len;\n\t\t\t}\n\t\t}\n\n\t\tfunction send_code(c, tree) {\n\t\t\tvar c2 = c * 2;\n\t\t\tsend_bits(tree[c2] & 0xffff, tree[c2 + 1] & 0xffff);\n\t\t}\n\n\t\t// Send a literal or distance tree in compressed form, using the codes in\n\t\t// bl_tree.\n\t\tfunction send_tree(tree,// the tree to be sent\n\t\tmax_code // and its largest code of non zero frequency\n\t\t) {\n\t\t\tvar n; // iterates over all tree elements\n\t\t\tvar prevlen = -1; // last emitted length\n\t\t\tvar curlen; // length of current code\n\t\t\tvar nextlen = tree[0 * 2 + 1]; // length of next code\n\t\t\tvar count = 0; // repeat count of the current code\n\t\t\tvar max_count = 7; // max repeat count\n\t\t\tvar min_count = 4; // min repeat count\n\n\t\t\tif (nextlen === 0) {\n\t\t\t\tmax_count = 138;\n\t\t\t\tmin_count = 3;\n\t\t\t}\n\n\t\t\tfor (n = 0; n <= max_code; n++) {\n\t\t\t\tcurlen = nextlen;\n\t\t\t\tnextlen = tree[(n + 1) * 2 + 1];\n\t\t\t\tif (++count < max_count && curlen == nextlen) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (count < min_count) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tsend_code(curlen, bl_tree);\n\t\t\t\t\t} while (--count !== 0);\n\t\t\t\t} else if (curlen !== 0) {\n\t\t\t\t\tif (curlen != prevlen) {\n\t\t\t\t\t\tsend_code(curlen, bl_tree);\n\t\t\t\t\t\tcount--;\n\t\t\t\t\t}\n\t\t\t\t\tsend_code(REP_3_6, bl_tree);\n\t\t\t\t\tsend_bits(count - 3, 2);\n\t\t\t\t} else if (count <= 10) {\n\t\t\t\t\tsend_code(REPZ_3_10, bl_tree);\n\t\t\t\t\tsend_bits(count - 3, 3);\n\t\t\t\t} else {\n\t\t\t\t\tsend_code(REPZ_11_138, bl_tree);\n\t\t\t\t\tsend_bits(count - 11, 7);\n\t\t\t\t}\n\t\t\t\tcount = 0;\n\t\t\t\tprevlen = curlen;\n\t\t\t\tif (nextlen === 0) {\n\t\t\t\t\tmax_count = 138;\n\t\t\t\t\tmin_count = 3;\n\t\t\t\t} else if (curlen == nextlen) {\n\t\t\t\t\tmax_count = 6;\n\t\t\t\t\tmin_count = 3;\n\t\t\t\t} else {\n\t\t\t\t\tmax_count = 7;\n\t\t\t\t\tmin_count = 4;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Send the header for a block using dynamic Huffman trees: the counts, the\n\t\t// lengths of the bit length codes, the literal tree and the distance tree.\n\t\t// IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n\t\tfunction send_all_trees(lcodes, dcodes, blcodes) {\n\t\t\tvar rank; // index in bl_order\n\n\t\t\tsend_bits(lcodes - 257, 5); // not +255 as stated in appnote.txt\n\t\t\tsend_bits(dcodes - 1, 5);\n\t\t\tsend_bits(blcodes - 4, 4); // not -3 as stated in appnote.txt\n\t\t\tfor (rank = 0; rank < blcodes; rank++) {\n\t\t\t\tsend_bits(bl_tree[Tree.bl_order[rank] * 2 + 1], 3);\n\t\t\t}\n\t\t\tsend_tree(dyn_ltree, lcodes - 1); // literal tree\n\t\t\tsend_tree(dyn_dtree, dcodes - 1); // distance tree\n\t\t}\n\n\t\t// Flush the bit buffer, keeping at most 7 bits in it.\n\t\tfunction bi_flush() {\n\t\t\tif (bi_valid == 16) {\n\t\t\t\tput_short(bi_buf);\n\t\t\t\tbi_buf = 0;\n\t\t\t\tbi_valid = 0;\n\t\t\t} else if (bi_valid >= 8) {\n\t\t\t\tput_byte(bi_buf & 0xff);\n\t\t\t\tbi_buf >>>= 8;\n\t\t\t\tbi_valid -= 8;\n\t\t\t}\n\t\t}\n\n\t\t// Send one empty static block to give enough lookahead for inflate.\n\t\t// This takes 10 bits, of which 7 may remain in the bit buffer.\n\t\t// The current inflate code requires 9 bits of lookahead. If the\n\t\t// last two codes for the previous block (real code plus EOB) were coded\n\t\t// on 5 bits or less, inflate may have only 5+3 bits of lookahead to decode\n\t\t// the last real code. In this case we send two empty static blocks instead\n\t\t// of one. (There are no problems if the previous block is stored or fixed.)\n\t\t// To simplify the code, we assume the worst case of last real code encoded\n\t\t// on one bit only.\n\t\tfunction _tr_align() {\n\t\t\tsend_bits(STATIC_TREES << 1, 3);\n\t\t\tsend_code(END_BLOCK, StaticTree.static_ltree);\n\n\t\t\tbi_flush();\n\n\t\t\t// Of the 10 bits for the empty block, we have already sent\n\t\t\t// (10 - bi_valid) bits. The lookahead for the last real code (before\n\t\t\t// the EOB of the previous block) was thus at least one plus the length\n\t\t\t// of the EOB plus what we have just sent of the empty static block.\n\t\t\tif (1 + last_eob_len + 10 - bi_valid < 9) {\n\t\t\t\tsend_bits(STATIC_TREES << 1, 3);\n\t\t\t\tsend_code(END_BLOCK, StaticTree.static_ltree);\n\t\t\t\tbi_flush();\n\t\t\t}\n\t\t\tlast_eob_len = 7;\n\t\t}\n\n\t\t// Save the match info and tally the frequency counts. Return true if\n\t\t// the current block must be flushed.\n\t\tfunction _tr_tally(dist, // distance of matched string\n\t\tlc // match length-MIN_MATCH or unmatched char (if dist==0)\n\t\t) {\n\t\t\tvar out_length, in_length, dcode;\n\t\t\tthat.pending_buf[d_buf + last_lit * 2] = (dist >>> 8) & 0xff;\n\t\t\tthat.pending_buf[d_buf + last_lit * 2 + 1] = dist & 0xff;\n\n\t\t\tthat.pending_buf[l_buf + last_lit] = lc & 0xff;\n\t\t\tlast_lit++;\n\n\t\t\tif (dist === 0) {\n\t\t\t\t// lc is the unmatched char\n\t\t\t\tdyn_ltree[lc * 2]++;\n\t\t\t} else {\n\t\t\t\tmatches++;\n\t\t\t\t// Here, lc is the match length - MIN_MATCH\n\t\t\t\tdist--; // dist = match distance - 1\n\t\t\t\tdyn_ltree[(Tree._length_code[lc] + LITERALS + 1) * 2]++;\n\t\t\t\tdyn_dtree[Tree.d_code(dist) * 2]++;\n\t\t\t}\n\n\t\t\tif ((last_lit & 0x1fff) === 0 && level > 2) {\n\t\t\t\t// Compute an upper bound for the compressed length\n\t\t\t\tout_length = last_lit * 8;\n\t\t\t\tin_length = strstart - block_start;\n\t\t\t\tfor (dcode = 0; dcode < D_CODES; dcode++) {\n\t\t\t\t\tout_length += dyn_dtree[dcode * 2] * (5 + Tree.extra_dbits[dcode]);\n\t\t\t\t}\n\t\t\t\tout_length >>>= 3;\n\t\t\t\tif ((matches < Math.floor(last_lit / 2)) && out_length < Math.floor(in_length / 2))\n\t\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn (last_lit == lit_bufsize - 1);\n\t\t\t// We avoid equality with lit_bufsize because of wraparound at 64K\n\t\t\t// on 16 bit machines and because stored blocks are restricted to\n\t\t\t// 64K-1 bytes.\n\t\t}\n\n\t\t// Send the block data compressed using the given Huffman trees\n\t\tfunction compress_block(ltree, dtree) {\n\t\t\tvar dist; // distance of matched string\n\t\t\tvar lc; // match length or unmatched char (if dist === 0)\n\t\t\tvar lx = 0; // running index in l_buf\n\t\t\tvar code; // the code to send\n\t\t\tvar extra; // number of extra bits to send\n\n\t\t\tif (last_lit !== 0) {\n\t\t\t\tdo {\n\t\t\t\t\tdist = ((that.pending_buf[d_buf + lx * 2] << 8) & 0xff00) | (that.pending_buf[d_buf + lx * 2 + 1] & 0xff);\n\t\t\t\t\tlc = (that.pending_buf[l_buf + lx]) & 0xff;\n\t\t\t\t\tlx++;\n\n\t\t\t\t\tif (dist === 0) {\n\t\t\t\t\t\tsend_code(lc, ltree); // send a literal byte\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Here, lc is the match length - MIN_MATCH\n\t\t\t\t\t\tcode = Tree._length_code[lc];\n\n\t\t\t\t\t\tsend_code(code + LITERALS + 1, ltree); // send the length\n\t\t\t\t\t\t// code\n\t\t\t\t\t\textra = Tree.extra_lbits[code];\n\t\t\t\t\t\tif (extra !== 0) {\n\t\t\t\t\t\t\tlc -= Tree.base_length[code];\n\t\t\t\t\t\t\tsend_bits(lc, extra); // send the extra length bits\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdist--; // dist is now the match distance - 1\n\t\t\t\t\t\tcode = Tree.d_code(dist);\n\n\t\t\t\t\t\tsend_code(code, dtree); // send the distance code\n\t\t\t\t\t\textra = Tree.extra_dbits[code];\n\t\t\t\t\t\tif (extra !== 0) {\n\t\t\t\t\t\t\tdist -= Tree.base_dist[code];\n\t\t\t\t\t\t\tsend_bits(dist, extra); // send the extra distance bits\n\t\t\t\t\t\t}\n\t\t\t\t\t} // literal or match pair ?\n\n\t\t\t\t\t// Check that the overlay between pending_buf and d_buf+l_buf is\n\t\t\t\t\t// ok:\n\t\t\t\t} while (lx < last_lit);\n\t\t\t}\n\n\t\t\tsend_code(END_BLOCK, ltree);\n\t\t\tlast_eob_len = ltree[END_BLOCK * 2 + 1];\n\t\t}\n\n\t\t// Flush the bit buffer and align the output on a byte boundary\n\t\tfunction bi_windup() {\n\t\t\tif (bi_valid > 8) {\n\t\t\t\tput_short(bi_buf);\n\t\t\t} else if (bi_valid > 0) {\n\t\t\t\tput_byte(bi_buf & 0xff);\n\t\t\t}\n\t\t\tbi_buf = 0;\n\t\t\tbi_valid = 0;\n\t\t}\n\n\t\t// Copy a stored block, storing first the length and its\n\t\t// one\'s complement if requested.\n\t\tfunction copy_block(buf, // the input data\n\t\tlen, // its length\n\t\theader // true if block header must be written\n\t\t) {\n\t\t\tbi_windup(); // align on byte boundary\n\t\t\tlast_eob_len = 8; // enough lookahead for inflate\n\n\t\t\tif (header) {\n\t\t\t\tput_short(len);\n\t\t\t\tput_short(~len);\n\t\t\t}\n\n\t\t\tthat.pending_buf.set(window.subarray(buf, buf + len), that.pending);\n\t\t\tthat.pending += len;\n\t\t}\n\n\t\t// Send a stored block\n\t\tfunction _tr_stored_block(buf, // input block\n\t\tstored_len, // length of input block\n\t\teof // true if this is the last block for a file\n\t\t) {\n\t\t\tsend_bits((STORED_BLOCK << 1) + (eof ? 1 : 0), 3); // send block type\n\t\t\tcopy_block(buf, stored_len, true); // with header\n\t\t}\n\n\t\t// Determine the best encoding for the current block: dynamic trees, static\n\t\t// trees or store, and output the encoded block to the zip file.\n\t\tfunction _tr_flush_block(buf, // input block, or NULL if too old\n\t\tstored_len, // length of input block\n\t\teof // true if this is the last block for a file\n\t\t) {\n\t\t\tvar opt_lenb, static_lenb;// opt_len and static_len in bytes\n\t\t\tvar max_blindex = 0; // index of last bit length code of non zero freq\n\n\t\t\t// Build the Huffman trees unless a stored block is forced\n\t\t\tif (level > 0) {\n\t\t\t\t// Construct the literal and distance trees\n\t\t\t\tl_desc.build_tree(that);\n\n\t\t\t\td_desc.build_tree(that);\n\n\t\t\t\t// At this point, opt_len and static_len are the total bit lengths\n\t\t\t\t// of\n\t\t\t\t// the compressed block data, excluding the tree representations.\n\n\t\t\t\t// Build the bit length tree for the above two trees, and get the\n\t\t\t\t// index\n\t\t\t\t// in bl_order of the last bit length code to send.\n\t\t\t\tmax_blindex = build_bl_tree();\n\n\t\t\t\t// Determine the best encoding. Compute first the block length in\n\t\t\t\t// bytes\n\t\t\t\topt_lenb = (that.opt_len + 3 + 7) >>> 3;\n\t\t\t\tstatic_lenb = (that.static_len + 3 + 7) >>> 3;\n\n\t\t\t\tif (static_lenb <= opt_lenb)\n\t\t\t\t\topt_lenb = static_lenb;\n\t\t\t} else {\n\t\t\t\topt_lenb = static_lenb = stored_len + 5; // force a stored block\n\t\t\t}\n\n\t\t\tif ((stored_len + 4 <= opt_lenb) && buf != -1) {\n\t\t\t\t// 4: two words for the lengths\n\t\t\t\t// The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n\t\t\t\t// Otherwise we can\'t have processed more than WSIZE input bytes\n\t\t\t\t// since\n\t\t\t\t// the last block flush, because compression would have been\n\t\t\t\t// successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n\t\t\t\t// transform a block into a stored block.\n\t\t\t\t_tr_stored_block(buf, stored_len, eof);\n\t\t\t} else if (static_lenb == opt_lenb) {\n\t\t\t\tsend_bits((STATIC_TREES << 1) + (eof ? 1 : 0), 3);\n\t\t\t\tcompress_block(StaticTree.static_ltree, StaticTree.static_dtree);\n\t\t\t} else {\n\t\t\t\tsend_bits((DYN_TREES << 1) + (eof ? 1 : 0), 3);\n\t\t\t\tsend_all_trees(l_desc.max_code + 1, d_desc.max_code + 1, max_blindex + 1);\n\t\t\t\tcompress_block(dyn_ltree, dyn_dtree);\n\t\t\t}\n\n\t\t\t// The above check is made mod 2^32, for files larger than 512 MB\n\t\t\t// and uLong implemented on 32 bits.\n\n\t\t\tinit_block();\n\n\t\t\tif (eof) {\n\t\t\t\tbi_windup();\n\t\t\t}\n\t\t}\n\n\t\tfunction flush_block_only(eof) {\n\t\t\t_tr_flush_block(block_start >= 0 ? block_start : -1, strstart - block_start, eof);\n\t\t\tblock_start = strstart;\n\t\t\tstrm.flush_pending();\n\t\t}\n\n\t\t// Fill the window when the lookahead becomes insufficient.\n\t\t// Updates strstart and lookahead.\n\t\t//\n\t\t// IN assertion: lookahead < MIN_LOOKAHEAD\n\t\t// OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n\t\t// At least one byte has been read, or avail_in === 0; reads are\n\t\t// performed for at least two bytes (required for the zip translate_eol\n\t\t// option -- not supported here).\n\t\tfunction fill_window() {\n\t\t\tvar n, m;\n\t\t\tvar p;\n\t\t\tvar more; // Amount of free space at the end of the window.\n\n\t\t\tdo {\n\t\t\t\tmore = (window_size - lookahead - strstart);\n\n\t\t\t\t// Deal with !@#$% 64K limit:\n\t\t\t\tif (more === 0 && strstart === 0 && lookahead === 0) {\n\t\t\t\t\tmore = w_size;\n\t\t\t\t} else if (more == -1) {\n\t\t\t\t\t// Very unlikely, but possible on 16 bit machine if strstart ==\n\t\t\t\t\t// 0\n\t\t\t\t\t// and lookahead == 1 (input done one byte at time)\n\t\t\t\t\tmore--;\n\n\t\t\t\t\t// If the window is almost full and there is insufficient\n\t\t\t\t\t// lookahead,\n\t\t\t\t\t// move the upper half to the lower one to make room in the\n\t\t\t\t\t// upper half.\n\t\t\t\t} else if (strstart >= w_size + w_size - MIN_LOOKAHEAD) {\n\t\t\t\t\twindow.set(window.subarray(w_size, w_size + w_size), 0);\n\n\t\t\t\t\tmatch_start -= w_size;\n\t\t\t\t\tstrstart -= w_size; // we now have strstart >= MAX_DIST\n\t\t\t\t\tblock_start -= w_size;\n\n\t\t\t\t\t// Slide the hash table (could be avoided with 32 bit values\n\t\t\t\t\t// at the expense of memory usage). We slide even when level ==\n\t\t\t\t\t// 0\n\t\t\t\t\t// to keep the hash table consistent if we switch back to level\n\t\t\t\t\t// > 0\n\t\t\t\t\t// later. (Using level 0 permanently is not an optimal usage of\n\t\t\t\t\t// zlib, so we don\'t care about this pathological case.)\n\n\t\t\t\t\tn = hash_size;\n\t\t\t\t\tp = n;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tm = (head[--p] & 0xffff);\n\t\t\t\t\t\thead[p] = (m >= w_size ? m - w_size : 0);\n\t\t\t\t\t} while (--n !== 0);\n\n\t\t\t\t\tn = w_size;\n\t\t\t\t\tp = n;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tm = (prev[--p] & 0xffff);\n\t\t\t\t\t\tprev[p] = (m >= w_size ? m - w_size : 0);\n\t\t\t\t\t\t// If n is not on any hash chain, prev[n] is garbage but\n\t\t\t\t\t\t// its value will never be used.\n\t\t\t\t\t} while (--n !== 0);\n\t\t\t\t\tmore += w_size;\n\t\t\t\t}\n\n\t\t\t\tif (strm.avail_in === 0)\n\t\t\t\t\treturn;\n\n\t\t\t\t// If there was no sliding:\n\t\t\t\t// strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n\t\t\t\t// more == window_size - lookahead - strstart\n\t\t\t\t// => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n\t\t\t\t// => more >= window_size - 2*WSIZE + 2\n\t\t\t\t// In the BIG_MEM or MMAP case (not yet supported),\n\t\t\t\t// window_size == input_size + MIN_LOOKAHEAD &&\n\t\t\t\t// strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n\t\t\t\t// Otherwise, window_size == 2*WSIZE so more >= 2.\n\t\t\t\t// If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n\n\t\t\t\tn = strm.read_buf(window, strstart + lookahead, more);\n\t\t\t\tlookahead += n;\n\n\t\t\t\t// Initialize the hash value now that we have some input:\n\t\t\t\tif (lookahead >= MIN_MATCH) {\n\t\t\t\t\tins_h = window[strstart] & 0xff;\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[strstart + 1] & 0xff)) & hash_mask;\n\t\t\t\t}\n\t\t\t\t// If the whole input has less than MIN_MATCH bytes, ins_h is\n\t\t\t\t// garbage,\n\t\t\t\t// but this is not important since only literal bytes will be\n\t\t\t\t// emitted.\n\t\t\t} while (lookahead < MIN_LOOKAHEAD && strm.avail_in !== 0);\n\t\t}\n\n\t\t// Copy without compression as much as possible from the input stream,\n\t\t// return\n\t\t// the current block state.\n\t\t// This function does not insert new strings in the dictionary since\n\t\t// uncompressible data is probably not useful. This function is used\n\t\t// only for the level=0 compression option.\n\t\t// NOTE: this function should be optimized to avoid extra copying from\n\t\t// window to pending_buf.\n\t\tfunction deflate_stored(flush) {\n\t\t\t// Stored blocks are limited to 0xffff bytes, pending_buf is limited\n\t\t\t// to pending_buf_size, and each stored block has a 5 byte header:\n\n\t\t\tvar max_block_size = 0xffff;\n\t\t\tvar max_start;\n\n\t\t\tif (max_block_size > pending_buf_size - 5) {\n\t\t\t\tmax_block_size = pending_buf_size - 5;\n\t\t\t}\n\n\t\t\t// Copy as much as possible from input to output:\n\t\t\twhile (true) {\n\t\t\t\t// Fill the window as much as possible:\n\t\t\t\tif (lookahead <= 1) {\n\t\t\t\t\tfill_window();\n\t\t\t\t\tif (lookahead === 0 && flush == Z_NO_FLUSH)\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t\tif (lookahead === 0)\n\t\t\t\t\t\tbreak; // flush the current block\n\t\t\t\t}\n\n\t\t\t\tstrstart += lookahead;\n\t\t\t\tlookahead = 0;\n\n\t\t\t\t// Emit a stored block if pending_buf will be full:\n\t\t\t\tmax_start = block_start + max_block_size;\n\t\t\t\tif (strstart === 0 || strstart >= max_start) {\n\t\t\t\t\t// strstart === 0 is possible when wraparound on 16-bit machine\n\t\t\t\t\tlookahead = (strstart - max_start);\n\t\t\t\t\tstrstart = max_start;\n\n\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\treturn NeedMore;\n\n\t\t\t\t}\n\n\t\t\t\t// Flush if we may have to slide, otherwise block_start may become\n\t\t\t\t// negative and the data will be gone:\n\t\t\t\tif (strstart - block_start >= w_size - MIN_LOOKAHEAD) {\n\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tflush_block_only(flush == Z_FINISH);\n\t\t\tif (strm.avail_out === 0)\n\t\t\t\treturn (flush == Z_FINISH) ? FinishStarted : NeedMore;\n\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\n\t\t}\n\n\t\tfunction longest_match(cur_match) {\n\t\t\tvar chain_length = max_chain_length; // max hash chain length\n\t\t\tvar scan = strstart; // current string\n\t\t\tvar match; // matched string\n\t\t\tvar len; // length of current match\n\t\t\tvar best_len = prev_length; // best match length so far\n\t\t\tvar limit = strstart > (w_size - MIN_LOOKAHEAD) ? strstart - (w_size - MIN_LOOKAHEAD) : 0;\n\t\t\tvar _nice_match = nice_match;\n\n\t\t\t// Stop when cur_match becomes <= limit. To simplify the code,\n\t\t\t// we prevent matches with the string of window index 0.\n\n\t\t\tvar wmask = w_mask;\n\n\t\t\tvar strend = strstart + MAX_MATCH;\n\t\t\tvar scan_end1 = window[scan + best_len - 1];\n\t\t\tvar scan_end = window[scan + best_len];\n\n\t\t\t// The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of\n\t\t\t// 16.\n\t\t\t// It is easy to get rid of this optimization if necessary.\n\n\t\t\t// Do not waste too much time if we already have a good match:\n\t\t\tif (prev_length >= good_match) {\n\t\t\t\tchain_length >>= 2;\n\t\t\t}\n\n\t\t\t// Do not look for matches beyond the end of the input. This is\n\t\t\t// necessary\n\t\t\t// to make deflate deterministic.\n\t\t\tif (_nice_match > lookahead)\n\t\t\t\t_nice_match = lookahead;\n\n\t\t\tdo {\n\t\t\t\tmatch = cur_match;\n\n\t\t\t\t// Skip to next match if the match length cannot increase\n\t\t\t\t// or if the match length is less than 2:\n\t\t\t\tif (window[match + best_len] != scan_end || window[match + best_len - 1] != scan_end1 || window[match] != window[scan]\n\t\t\t\t\t\t|| window[++match] != window[scan + 1])\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// The check at best_len-1 can be removed because it will be made\n\t\t\t\t// again later. (This heuristic is not always a win.)\n\t\t\t\t// It is not necessary to compare scan[2] and match[2] since they\n\t\t\t\t// are always equal when the other bytes match, given that\n\t\t\t\t// the hash keys are equal and that HASH_BITS >= 8.\n\t\t\t\tscan += 2;\n\t\t\t\tmatch++;\n\n\t\t\t\t// We check for insufficient lookahead only every 8th comparison;\n\t\t\t\t// the 256th check will be made at strstart+258.\n\t\t\t\tdo {\n\t\t\t\t} while (window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match]\n\t\t\t\t\t\t&& window[++scan] == window[++match] && window[++scan] == window[++match] && window[++scan] == window[++match]\n\t\t\t\t\t\t&& window[++scan] == window[++match] && window[++scan] == window[++match] && scan < strend);\n\n\t\t\t\tlen = MAX_MATCH - (strend - scan);\n\t\t\t\tscan = strend - MAX_MATCH;\n\n\t\t\t\tif (len > best_len) {\n\t\t\t\t\tmatch_start = cur_match;\n\t\t\t\t\tbest_len = len;\n\t\t\t\t\tif (len >= _nice_match)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tscan_end1 = window[scan + best_len - 1];\n\t\t\t\t\tscan_end = window[scan + best_len];\n\t\t\t\t}\n\n\t\t\t} while ((cur_match = (prev[cur_match & wmask] & 0xffff)) > limit && --chain_length !== 0);\n\n\t\t\tif (best_len <= lookahead)\n\t\t\t\treturn best_len;\n\t\t\treturn lookahead;\n\t\t}\n\n\t\t// Compress as much as possible from the input stream, return the current\n\t\t// block state.\n\t\t// This function does not perform lazy evaluation of matches and inserts\n\t\t// new strings in the dictionary only for unmatched strings or for short\n\t\t// matches. It is used only for the fast compression options.\n\t\tfunction deflate_fast(flush) {\n\t\t\t// short hash_head = 0; // head of the hash chain\n\t\t\tvar hash_head = 0; // head of the hash chain\n\t\t\tvar bflush; // set if current block must be flushed\n\n\t\t\twhile (true) {\n\t\t\t\t// Make sure that we always have enough lookahead, except\n\t\t\t\t// at the end of the input file. We need MAX_MATCH bytes\n\t\t\t\t// for the next match, plus MIN_MATCH bytes to insert the\n\t\t\t\t// string following the next match.\n\t\t\t\tif (lookahead < MIN_LOOKAHEAD) {\n\t\t\t\t\tfill_window();\n\t\t\t\t\tif (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t\t}\n\t\t\t\t\tif (lookahead === 0)\n\t\t\t\t\t\tbreak; // flush the current block\n\t\t\t\t}\n\n\t\t\t\t// Insert the string window[strstart .. strstart+2] in the\n\t\t\t\t// dictionary, and set hash_head to the head of the hash chain:\n\t\t\t\tif (lookahead >= MIN_MATCH) {\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\n\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\t\thead[ins_h] = strstart;\n\t\t\t\t}\n\n\t\t\t\t// Find the longest match, discarding those <= prev_length.\n\t\t\t\t// At this point we have always match_length < MIN_MATCH\n\n\t\t\t\tif (hash_head !== 0 && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {\n\t\t\t\t\t// To simplify the code, we prevent matches with the string\n\t\t\t\t\t// of window index 0 (in particular we have to avoid a match\n\t\t\t\t\t// of the string with itself at the start of the input file).\n\t\t\t\t\tif (strategy != Z_HUFFMAN_ONLY) {\n\t\t\t\t\t\tmatch_length = longest_match(hash_head);\n\t\t\t\t\t}\n\t\t\t\t\t// longest_match() sets match_start\n\t\t\t\t}\n\t\t\t\tif (match_length >= MIN_MATCH) {\n\t\t\t\t\t// check_match(strstart, match_start, match_length);\n\n\t\t\t\t\tbflush = _tr_tally(strstart - match_start, match_length - MIN_MATCH);\n\n\t\t\t\t\tlookahead -= match_length;\n\n\t\t\t\t\t// Insert new strings in the hash table only if the match length\n\t\t\t\t\t// is not too large. This saves time but degrades compression.\n\t\t\t\t\tif (match_length <= max_lazy_match && lookahead >= MIN_MATCH) {\n\t\t\t\t\t\tmatch_length--; // string at strstart already in hash table\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tstrstart++;\n\n\t\t\t\t\t\t\tins_h = ((ins_h << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\t\t\t\thead[ins_h] = strstart;\n\n\t\t\t\t\t\t\t// strstart never exceeds WSIZE-MAX_MATCH, so there are\n\t\t\t\t\t\t\t// always MIN_MATCH bytes ahead.\n\t\t\t\t\t\t} while (--match_length !== 0);\n\t\t\t\t\t\tstrstart++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstrstart += match_length;\n\t\t\t\t\t\tmatch_length = 0;\n\t\t\t\t\t\tins_h = window[strstart] & 0xff;\n\n\t\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[strstart + 1] & 0xff)) & hash_mask;\n\t\t\t\t\t\t// If lookahead < MIN_MATCH, ins_h is garbage, but it does\n\t\t\t\t\t\t// not\n\t\t\t\t\t\t// matter since it will be recomputed at next deflate call.\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// No match, output a literal byte\n\n\t\t\t\t\tbflush = _tr_tally(0, window[strstart] & 0xff);\n\t\t\t\t\tlookahead--;\n\t\t\t\t\tstrstart++;\n\t\t\t\t}\n\t\t\t\tif (bflush) {\n\n\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tflush_block_only(flush == Z_FINISH);\n\t\t\tif (strm.avail_out === 0) {\n\t\t\t\tif (flush == Z_FINISH)\n\t\t\t\t\treturn FinishStarted;\n\t\t\t\telse\n\t\t\t\t\treturn NeedMore;\n\t\t\t}\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\n\t\t}\n\n\t\t// Same as above, but achieves better compression. We use a lazy\n\t\t// evaluation for matches: a match is finally adopted only if there is\n\t\t// no better match at the next window position.\n\t\tfunction deflate_slow(flush) {\n\t\t\t// short hash_head = 0; // head of hash chain\n\t\t\tvar hash_head = 0; // head of hash chain\n\t\t\tvar bflush; // set if current block must be flushed\n\t\t\tvar max_insert;\n\n\t\t\t// Process the input block.\n\t\t\twhile (true) {\n\t\t\t\t// Make sure that we always have enough lookahead, except\n\t\t\t\t// at the end of the input file. We need MAX_MATCH bytes\n\t\t\t\t// for the next match, plus MIN_MATCH bytes to insert the\n\t\t\t\t// string following the next match.\n\n\t\t\t\tif (lookahead < MIN_LOOKAHEAD) {\n\t\t\t\t\tfill_window();\n\t\t\t\t\tif (lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t\t}\n\t\t\t\t\tif (lookahead === 0)\n\t\t\t\t\t\tbreak; // flush the current block\n\t\t\t\t}\n\n\t\t\t\t// Insert the string window[strstart .. strstart+2] in the\n\t\t\t\t// dictionary, and set hash_head to the head of the hash chain:\n\n\t\t\t\tif (lookahead >= MIN_MATCH) {\n\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\t\thead[ins_h] = strstart;\n\t\t\t\t}\n\n\t\t\t\t// Find the longest match, discarding those <= prev_length.\n\t\t\t\tprev_length = match_length;\n\t\t\t\tprev_match = match_start;\n\t\t\t\tmatch_length = MIN_MATCH - 1;\n\n\t\t\t\tif (hash_head !== 0 && prev_length < max_lazy_match && ((strstart - hash_head) & 0xffff) <= w_size - MIN_LOOKAHEAD) {\n\t\t\t\t\t// To simplify the code, we prevent matches with the string\n\t\t\t\t\t// of window index 0 (in particular we have to avoid a match\n\t\t\t\t\t// of the string with itself at the start of the input file).\n\n\t\t\t\t\tif (strategy != Z_HUFFMAN_ONLY) {\n\t\t\t\t\t\tmatch_length = longest_match(hash_head);\n\t\t\t\t\t}\n\t\t\t\t\t// longest_match() sets match_start\n\n\t\t\t\t\tif (match_length <= 5 && (strategy == Z_FILTERED || (match_length == MIN_MATCH && strstart - match_start > 4096))) {\n\n\t\t\t\t\t\t// If prev_match is also MIN_MATCH, match_start is garbage\n\t\t\t\t\t\t// but we will ignore the current match anyway.\n\t\t\t\t\t\tmatch_length = MIN_MATCH - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// If there was a match at the previous step and the current\n\t\t\t\t// match is not better, output the previous match:\n\t\t\t\tif (prev_length >= MIN_MATCH && match_length <= prev_length) {\n\t\t\t\t\tmax_insert = strstart + lookahead - MIN_MATCH;\n\t\t\t\t\t// Do not insert strings in hash table beyond this.\n\n\t\t\t\t\t// check_match(strstart-1, prev_match, prev_length);\n\n\t\t\t\t\tbflush = _tr_tally(strstart - 1 - prev_match, prev_length - MIN_MATCH);\n\n\t\t\t\t\t// Insert in hash table all strings up to the end of the match.\n\t\t\t\t\t// strstart-1 and strstart are already inserted. If there is not\n\t\t\t\t\t// enough lookahead, the last two strings are not inserted in\n\t\t\t\t\t// the hash table.\n\t\t\t\t\tlookahead -= prev_length - 1;\n\t\t\t\t\tprev_length -= 2;\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (++strstart <= max_insert) {\n\t\t\t\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(strstart) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\t\t\t\t// prev[strstart&w_mask]=hash_head=head[ins_h];\n\t\t\t\t\t\t\thash_head = (head[ins_h] & 0xffff);\n\t\t\t\t\t\t\tprev[strstart & w_mask] = head[ins_h];\n\t\t\t\t\t\t\thead[ins_h] = strstart;\n\t\t\t\t\t\t}\n\t\t\t\t\t} while (--prev_length !== 0);\n\t\t\t\t\tmatch_available = 0;\n\t\t\t\t\tmatch_length = MIN_MATCH - 1;\n\t\t\t\t\tstrstart++;\n\n\t\t\t\t\tif (bflush) {\n\t\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t\t}\n\t\t\t\t} else if (match_available !== 0) {\n\n\t\t\t\t\t// If there was no match at the previous position, output a\n\t\t\t\t\t// single literal. If there was a match but the current match\n\t\t\t\t\t// is longer, truncate the previous match to a single literal.\n\n\t\t\t\t\tbflush = _tr_tally(0, window[strstart - 1] & 0xff);\n\n\t\t\t\t\tif (bflush) {\n\t\t\t\t\t\tflush_block_only(false);\n\t\t\t\t\t}\n\t\t\t\t\tstrstart++;\n\t\t\t\t\tlookahead--;\n\t\t\t\t\tif (strm.avail_out === 0)\n\t\t\t\t\t\treturn NeedMore;\n\t\t\t\t} else {\n\t\t\t\t\t// There is no previous match to compare with, wait for\n\t\t\t\t\t// the next step to decide.\n\n\t\t\t\t\tmatch_available = 1;\n\t\t\t\t\tstrstart++;\n\t\t\t\t\tlookahead--;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (match_available !== 0) {\n\t\t\t\tbflush = _tr_tally(0, window[strstart - 1] & 0xff);\n\t\t\t\tmatch_available = 0;\n\t\t\t}\n\t\t\tflush_block_only(flush == Z_FINISH);\n\n\t\t\tif (strm.avail_out === 0) {\n\t\t\t\tif (flush == Z_FINISH)\n\t\t\t\t\treturn FinishStarted;\n\t\t\t\telse\n\t\t\t\t\treturn NeedMore;\n\t\t\t}\n\n\t\t\treturn flush == Z_FINISH ? FinishDone : BlockDone;\n\t\t}\n\n\t\tfunction deflateReset(strm) {\n\t\t\tstrm.total_in = strm.total_out = 0;\n\t\t\tstrm.msg = null; //\n\t\t\t\n\t\t\tthat.pending = 0;\n\t\t\tthat.pending_out = 0;\n\n\t\t\tstatus = BUSY_STATE;\n\n\t\t\tlast_flush = Z_NO_FLUSH;\n\n\t\t\ttr_init();\n\t\t\tlm_init();\n\t\t\treturn Z_OK;\n\t\t}\n\n\t\tthat.deflateInit = function(strm, _level, bits, _method, memLevel, _strategy) {\n\t\t\tif (!_method)\n\t\t\t\t_method = Z_DEFLATED;\n\t\t\tif (!memLevel)\n\t\t\t\tmemLevel = DEF_MEM_LEVEL;\n\t\t\tif (!_strategy)\n\t\t\t\t_strategy = Z_DEFAULT_STRATEGY;\n\n\t\t\t// byte[] my_version=ZLIB_VERSION;\n\n\t\t\t//\n\t\t\t// if (!version || version[0] != my_version[0]\n\t\t\t// || stream_size != sizeof(z_stream)) {\n\t\t\t// return Z_VERSION_ERROR;\n\t\t\t// }\n\n\t\t\tstrm.msg = null;\n\n\t\t\tif (_level == Z_DEFAULT_COMPRESSION)\n\t\t\t\t_level = 6;\n\n\t\t\tif (memLevel < 1 || memLevel > MAX_MEM_LEVEL || _method != Z_DEFLATED || bits < 9 || bits > 15 || _level < 0 || _level > 9 || _strategy < 0\n\t\t\t\t\t|| _strategy > Z_HUFFMAN_ONLY) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\n\t\t\tstrm.dstate = that;\n\n\t\t\tw_bits = bits;\n\t\t\tw_size = 1 << w_bits;\n\t\t\tw_mask = w_size - 1;\n\n\t\t\thash_bits = memLevel + 7;\n\t\t\thash_size = 1 << hash_bits;\n\t\t\thash_mask = hash_size - 1;\n\t\t\thash_shift = Math.floor((hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n\t\t\twindow = new Uint8Array(w_size * 2);\n\t\t\tprev = [];\n\t\t\thead = [];\n\n\t\t\tlit_bufsize = 1 << (memLevel + 6); // 16K elements by default\n\n\t\t\t// We overlay pending_buf and d_buf+l_buf. This works since the average\n\t\t\t// output size for (length,distance) codes is <= 24 bits.\n\t\t\tthat.pending_buf = new Uint8Array(lit_bufsize * 4);\n\t\t\tpending_buf_size = lit_bufsize * 4;\n\n\t\t\td_buf = Math.floor(lit_bufsize / 2);\n\t\t\tl_buf = (1 + 2) * lit_bufsize;\n\n\t\t\tlevel = _level;\n\n\t\t\tstrategy = _strategy;\n\t\t\tmethod = _method & 0xff;\n\n\t\t\treturn deflateReset(strm);\n\t\t};\n\n\t\tthat.deflateEnd = function() {\n\t\t\tif (status != INIT_STATE && status != BUSY_STATE && status != FINISH_STATE) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\t\t\t// Deallocate in reverse order of allocations:\n\t\t\tthat.pending_buf = null;\n\t\t\thead = null;\n\t\t\tprev = null;\n\t\t\twindow = null;\n\t\t\t// free\n\t\t\tthat.dstate = null;\n\t\t\treturn status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;\n\t\t};\n\n\t\tthat.deflateParams = function(strm, _level, _strategy) {\n\t\t\tvar err = Z_OK;\n\n\t\t\tif (_level == Z_DEFAULT_COMPRESSION) {\n\t\t\t\t_level = 6;\n\t\t\t}\n\t\t\tif (_level < 0 || _level > 9 || _strategy < 0 || _strategy > Z_HUFFMAN_ONLY) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\n\t\t\tif (config_table[level].func != config_table[_level].func && strm.total_in !== 0) {\n\t\t\t\t// Flush the last buffer:\n\t\t\t\terr = strm.deflate(Z_PARTIAL_FLUSH);\n\t\t\t}\n\n\t\t\tif (level != _level) {\n\t\t\t\tlevel = _level;\n\t\t\t\tmax_lazy_match = config_table[level].max_lazy;\n\t\t\t\tgood_match = config_table[level].good_length;\n\t\t\t\tnice_match = config_table[level].nice_length;\n\t\t\t\tmax_chain_length = config_table[level].max_chain;\n\t\t\t}\n\t\t\tstrategy = _strategy;\n\t\t\treturn err;\n\t\t};\n\n\t\tthat.deflateSetDictionary = function(strm, dictionary, dictLength) {\n\t\t\tvar length = dictLength;\n\t\t\tvar n, index = 0;\n\n\t\t\tif (!dictionary || status != INIT_STATE)\n\t\t\t\treturn Z_STREAM_ERROR;\n\n\t\t\tif (length < MIN_MATCH)\n\t\t\t\treturn Z_OK;\n\t\t\tif (length > w_size - MIN_LOOKAHEAD) {\n\t\t\t\tlength = w_size - MIN_LOOKAHEAD;\n\t\t\t\tindex = dictLength - length; // use the tail of the dictionary\n\t\t\t}\n\t\t\twindow.set(dictionary.subarray(index, index + length), 0);\n\n\t\t\tstrstart = length;\n\t\t\tblock_start = length;\n\n\t\t\t// Insert all strings in the hash table (except for the last two bytes).\n\t\t\t// s->lookahead stays null, so s->ins_h will be recomputed at the next\n\t\t\t// call of fill_window.\n\n\t\t\tins_h = window[0] & 0xff;\n\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[1] & 0xff)) & hash_mask;\n\n\t\t\tfor (n = 0; n <= length - MIN_MATCH; n++) {\n\t\t\t\tins_h = (((ins_h) << hash_shift) ^ (window[(n) + (MIN_MATCH - 1)] & 0xff)) & hash_mask;\n\t\t\t\tprev[n & w_mask] = head[ins_h];\n\t\t\t\thead[ins_h] = n;\n\t\t\t}\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\tthat.deflate = function(_strm, flush) {\n\t\t\tvar i, header, level_flags, old_flush, bstate;\n\n\t\t\tif (flush > Z_FINISH || flush < 0) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\n\t\t\tif (!_strm.next_out || (!_strm.next_in && _strm.avail_in !== 0) || (status == FINISH_STATE && flush != Z_FINISH)) {\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_STREAM_ERROR)];\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\t\t\tif (_strm.avail_out === 0) {\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\n\t\t\t\treturn Z_BUF_ERROR;\n\t\t\t}\n\n\t\t\tstrm = _strm; // just in case\n\t\t\told_flush = last_flush;\n\t\t\tlast_flush = flush;\n\n\t\t\t// Write the zlib header\n\t\t\tif (status == INIT_STATE) {\n\t\t\t\theader = (Z_DEFLATED + ((w_bits - 8) << 4)) << 8;\n\t\t\t\tlevel_flags = ((level - 1) & 0xff) >> 1;\n\n\t\t\t\tif (level_flags > 3)\n\t\t\t\t\tlevel_flags = 3;\n\t\t\t\theader |= (level_flags << 6);\n\t\t\t\tif (strstart !== 0)\n\t\t\t\t\theader |= PRESET_DICT;\n\t\t\t\theader += 31 - (header % 31);\n\n\t\t\t\tstatus = BUSY_STATE;\n\t\t\t\tputShortMSB(header);\n\t\t\t}\n\n\t\t\t// Flush as much pending output as possible\n\t\t\tif (that.pending !== 0) {\n\t\t\t\tstrm.flush_pending();\n\t\t\t\tif (strm.avail_out === 0) {\n\t\t\t\t\t// console.log(" avail_out==0");\n\t\t\t\t\t// Since avail_out is 0, deflate will be called again with\n\t\t\t\t\t// more output space, but possibly with both pending and\n\t\t\t\t\t// avail_in equal to zero. There won\'t be anything to do,\n\t\t\t\t\t// but this is not an error situation so make sure we\n\t\t\t\t\t// return OK instead of BUF_ERROR at next call of deflate:\n\t\t\t\t\tlast_flush = -1;\n\t\t\t\t\treturn Z_OK;\n\t\t\t\t}\n\n\t\t\t\t// Make sure there is something to do and avoid duplicate\n\t\t\t\t// consecutive\n\t\t\t\t// flushes. For repeated and useless calls with Z_FINISH, we keep\n\t\t\t\t// returning Z_STREAM_END instead of Z_BUFF_ERROR.\n\t\t\t} else if (strm.avail_in === 0 && flush <= old_flush && flush != Z_FINISH) {\n\t\t\t\tstrm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\n\t\t\t\treturn Z_BUF_ERROR;\n\t\t\t}\n\n\t\t\t// User must not provide more input after the first FINISH:\n\t\t\tif (status == FINISH_STATE && strm.avail_in !== 0) {\n\t\t\t\t_strm.msg = z_errmsg[Z_NEED_DICT - (Z_BUF_ERROR)];\n\t\t\t\treturn Z_BUF_ERROR;\n\t\t\t}\n\n\t\t\t// Start a new block or continue the current one.\n\t\t\tif (strm.avail_in !== 0 || lookahead !== 0 || (flush != Z_NO_FLUSH && status != FINISH_STATE)) {\n\t\t\t\tbstate = -1;\n\t\t\t\tswitch (config_table[level].func) {\n\t\t\t\tcase STORED:\n\t\t\t\t\tbstate = deflate_stored(flush);\n\t\t\t\t\tbreak;\n\t\t\t\tcase FAST:\n\t\t\t\t\tbstate = deflate_fast(flush);\n\t\t\t\t\tbreak;\n\t\t\t\tcase SLOW:\n\t\t\t\t\tbstate = deflate_slow(flush);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t}\n\n\t\t\t\tif (bstate == FinishStarted || bstate == FinishDone) {\n\t\t\t\t\tstatus = FINISH_STATE;\n\t\t\t\t}\n\t\t\t\tif (bstate == NeedMore || bstate == FinishStarted) {\n\t\t\t\t\tif (strm.avail_out === 0) {\n\t\t\t\t\t\tlast_flush = -1; // avoid BUF_ERROR next call, see above\n\t\t\t\t\t}\n\t\t\t\t\treturn Z_OK;\n\t\t\t\t\t// If flush != Z_NO_FLUSH && avail_out === 0, the next call\n\t\t\t\t\t// of deflate should use the same flush parameter to make sure\n\t\t\t\t\t// that the flush is complete. So we don\'t have to output an\n\t\t\t\t\t// empty block here, this will be done at next call. This also\n\t\t\t\t\t// ensures that for a very small output buffer, we emit at most\n\t\t\t\t\t// one empty block.\n\t\t\t\t}\n\n\t\t\t\tif (bstate == BlockDone) {\n\t\t\t\t\tif (flush == Z_PARTIAL_FLUSH) {\n\t\t\t\t\t\t_tr_align();\n\t\t\t\t\t} else { // FULL_FLUSH or SYNC_FLUSH\n\t\t\t\t\t\t_tr_stored_block(0, 0, false);\n\t\t\t\t\t\t// For a full flush, this empty block will be recognized\n\t\t\t\t\t\t// as a special marker by inflate_sync().\n\t\t\t\t\t\tif (flush == Z_FULL_FLUSH) {\n\t\t\t\t\t\t\t// state.head[s.hash_size-1]=0;\n\t\t\t\t\t\t\tfor (i = 0; i < hash_size/*-1*/; i++)\n\t\t\t\t\t\t\t\t// forget history\n\t\t\t\t\t\t\t\thead[i] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tstrm.flush_pending();\n\t\t\t\t\tif (strm.avail_out === 0) {\n\t\t\t\t\t\tlast_flush = -1; // avoid BUF_ERROR at next call, see above\n\t\t\t\t\t\treturn Z_OK;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (flush != Z_FINISH)\n\t\t\t\treturn Z_OK;\n\t\t\treturn Z_STREAM_END;\n\t\t};\n\t}\n\n\t// ZStream\n\n\tfunction ZStream() {\n\t\tvar that = this;\n\t\tthat.next_in_index = 0;\n\t\tthat.next_out_index = 0;\n\t\t// that.next_in; // next input byte\n\t\tthat.avail_in = 0; // number of bytes available at next_in\n\t\tthat.total_in = 0; // total nb of input bytes read so far\n\t\t// that.next_out; // next output byte should be put there\n\t\tthat.avail_out = 0; // remaining free space at next_out\n\t\tthat.total_out = 0; // total nb of bytes output so far\n\t\t// that.msg;\n\t\t// that.dstate;\n\t}\n\n\tZStream.prototype = {\n\t\tdeflateInit : function(level, bits) {\n\t\t\tvar that = this;\n\t\t\tthat.dstate = new Deflate();\n\t\t\tif (!bits)\n\t\t\t\tbits = MAX_BITS;\n\t\t\treturn that.dstate.deflateInit(that, level, bits);\n\t\t},\n\n\t\tdeflate : function(flush) {\n\t\t\tvar that = this;\n\t\t\tif (!that.dstate) {\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\t\t\treturn that.dstate.deflate(that, flush);\n\t\t},\n\n\t\tdeflateEnd : function() {\n\t\t\tvar that = this;\n\t\t\tif (!that.dstate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\tvar ret = that.dstate.deflateEnd();\n\t\t\tthat.dstate = null;\n\t\t\treturn ret;\n\t\t},\n\n\t\tdeflateParams : function(level, strategy) {\n\t\t\tvar that = this;\n\t\t\tif (!that.dstate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.dstate.deflateParams(that, level, strategy);\n\t\t},\n\n\t\tdeflateSetDictionary : function(dictionary, dictLength) {\n\t\t\tvar that = this;\n\t\t\tif (!that.dstate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.dstate.deflateSetDictionary(that, dictionary, dictLength);\n\t\t},\n\n\t\t// Read a new buffer from the current input stream, update the\n\t\t// total number of bytes read. All deflate() input goes through\n\t\t// this function so some applications may wish to modify it to avoid\n\t\t// allocating a large strm->next_in buffer and copying from it.\n\t\t// (See also flush_pending()).\n\t\tread_buf : function(buf, start, size) {\n\t\t\tvar that = this;\n\t\t\tvar len = that.avail_in;\n\t\t\tif (len > size)\n\t\t\t\tlen = size;\n\t\t\tif (len === 0)\n\t\t\t\treturn 0;\n\t\t\tthat.avail_in -= len;\n\t\t\tbuf.set(that.next_in.subarray(that.next_in_index, that.next_in_index + len), start);\n\t\t\tthat.next_in_index += len;\n\t\t\tthat.total_in += len;\n\t\t\treturn len;\n\t\t},\n\n\t\t// Flush as much pending output as possible. All deflate() output goes\n\t\t// through this function so some applications may wish to modify it\n\t\t// to avoid allocating a large strm->next_out buffer and copying into it.\n\t\t// (See also read_buf()).\n\t\tflush_pending : function() {\n\t\t\tvar that = this;\n\t\t\tvar len = that.dstate.pending;\n\n\t\t\tif (len > that.avail_out)\n\t\t\t\tlen = that.avail_out;\n\t\t\tif (len === 0)\n\t\t\t\treturn;\n\n\t\t\t// if (that.dstate.pending_buf.length <= that.dstate.pending_out || that.next_out.length <= that.next_out_index\n\t\t\t// || that.dstate.pending_buf.length < (that.dstate.pending_out + len) || that.next_out.length < (that.next_out_index +\n\t\t\t// len)) {\n\t\t\t// console.log(that.dstate.pending_buf.length + ", " + that.dstate.pending_out + ", " + that.next_out.length + ", " +\n\t\t\t// that.next_out_index + ", " + len);\n\t\t\t// console.log("avail_out=" + that.avail_out);\n\t\t\t// }\n\n\t\t\tthat.next_out.set(that.dstate.pending_buf.subarray(that.dstate.pending_out, that.dstate.pending_out + len), that.next_out_index);\n\n\t\t\tthat.next_out_index += len;\n\t\t\tthat.dstate.pending_out += len;\n\t\t\tthat.total_out += len;\n\t\t\tthat.avail_out -= len;\n\t\t\tthat.dstate.pending -= len;\n\t\t\tif (that.dstate.pending === 0) {\n\t\t\t\tthat.dstate.pending_out = 0;\n\t\t\t}\n\t\t}\n\t};\n\n\t// Deflater\n\n\tfunction Deflater(options) {\n\t\tvar that = this;\n\t\tvar z = new ZStream();\n\t\tvar bufsize = 512;\n\t\tvar flush = Z_NO_FLUSH;\n\t\tvar buf = new Uint8Array(bufsize);\n\t\tvar level = options ? options.level : Z_DEFAULT_COMPRESSION;\n\t\tif (typeof level == "undefined")\n\t\t\tlevel = Z_DEFAULT_COMPRESSION;\n\t\tz.deflateInit(level);\n\t\tz.next_out = buf;\n\n\t\tthat.append = function(data, onprogress) {\n\t\t\tvar err, buffers = [], lastIndex = 0, bufferIndex = 0, bufferSize = 0, array;\n\t\t\tif (!data.length)\n\t\t\t\treturn;\n\t\t\tz.next_in_index = 0;\n\t\t\tz.next_in = data;\n\t\t\tz.avail_in = data.length;\n\t\t\tdo {\n\t\t\t\tz.next_out_index = 0;\n\t\t\t\tz.avail_out = bufsize;\n\t\t\t\terr = z.deflate(flush);\n\t\t\t\tif (err != Z_OK)\n\t\t\t\t\tthrow new Error("deflating: " + z.msg);\n\t\t\t\tif (z.next_out_index)\n\t\t\t\t\tif (z.next_out_index == bufsize)\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\n\t\t\t\tbufferSize += z.next_out_index;\n\t\t\t\tif (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\n\t\t\t\t\tonprogress(z.next_in_index);\n\t\t\t\t\tlastIndex = z.next_in_index;\n\t\t\t\t}\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);\n\t\t\tarray = new Uint8Array(bufferSize);\n\t\t\tbuffers.forEach(function(chunk) {\n\t\t\t\tarray.set(chunk, bufferIndex);\n\t\t\t\tbufferIndex += chunk.length;\n\t\t\t});\n\t\t\treturn array;\n\t\t};\n\t\tthat.flush = function() {\n\t\t\tvar err, buffers = [], bufferIndex = 0, bufferSize = 0, array;\n\t\t\tdo {\n\t\t\t\tz.next_out_index = 0;\n\t\t\t\tz.avail_out = bufsize;\n\t\t\t\terr = z.deflate(Z_FINISH);\n\t\t\t\tif (err != Z_STREAM_END && err != Z_OK)\n\t\t\t\t\tthrow new Error("deflating: " + z.msg);\n\t\t\t\tif (bufsize - z.avail_out > 0)\n\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\n\t\t\t\tbufferSize += z.next_out_index;\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);\n\t\t\tz.deflateEnd();\n\t\t\tarray = new Uint8Array(bufferSize);\n\t\t\tbuffers.forEach(function(chunk) {\n\t\t\t\tarray.set(chunk, bufferIndex);\n\t\t\t\tbufferIndex += chunk.length;\n\t\t\t});\n\t\t\treturn array;\n\t\t};\n\t}\n\n\t// \'zip\' may not be defined in z-worker and some tests\n\tvar env = global.zip || global;\n\tenv.Deflater = env._jzlib_Deflater = Deflater;\n})(this);\n')],inflater:[a,i('/*\n Copyright (c) 2013 Gildas Lormeau. All rights reserved.\n\n Redistribution and use in source and binary forms, with or without\n modification, are permitted provided that the following conditions are met:\n\n 1. Redistributions of source code must retain the above copyright notice,\n this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright \n notice, this list of conditions and the following disclaimer in \n the documentation and/or other materials provided with the distribution.\n\n 3. The names of the authors may not be used to endorse or promote products\n derived from this software without specific prior written permission.\n\n THIS SOFTWARE IS PROVIDED ``AS IS\'\' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JCRAFT,\n INC. OR ANY CONTRIBUTORS TO THIS SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT,\n INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * This program is based on JZlib 1.0.2 ymnk, JCraft,Inc.\n * JZlib is based on zlib-1.1.3, so all credit should go authors\n * Jean-loup Gailly(jloup@gzip.org) and Mark Adler(madler@alumni.caltech.edu)\n * and contributors of zlib.\n */\n\n(function(global) {\n\t"use strict";\n\n\t// Global\n\tvar MAX_BITS = 15;\n\n\tvar Z_OK = 0;\n\tvar Z_STREAM_END = 1;\n\tvar Z_NEED_DICT = 2;\n\tvar Z_STREAM_ERROR = -2;\n\tvar Z_DATA_ERROR = -3;\n\tvar Z_MEM_ERROR = -4;\n\tvar Z_BUF_ERROR = -5;\n\n\tvar inflate_mask = [ 0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff,\n\t\t\t0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff ];\n\n\tvar MANY = 1440;\n\n\t// JZlib version : "1.0.2"\n\tvar Z_NO_FLUSH = 0;\n\tvar Z_FINISH = 4;\n\n\t// InfTree\n\tvar fixed_bl = 9;\n\tvar fixed_bd = 5;\n\n\tvar fixed_tl = [ 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9, 192, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 160, 0, 8, 0,\n\t\t\t0, 8, 128, 0, 8, 64, 0, 9, 224, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 144, 83, 7, 59, 0, 8, 120, 0, 8, 56, 0, 9, 208, 81, 7, 17, 0, 8, 104, 0, 8, 40,\n\t\t\t0, 9, 176, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 240, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8, 227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 200, 81, 7, 13,\n\t\t\t0, 8, 100, 0, 8, 36, 0, 9, 168, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 232, 80, 7, 8, 0, 8, 92, 0, 8, 28, 0, 9, 152, 84, 7, 83, 0, 8, 124, 0, 8, 60,\n\t\t\t0, 9, 216, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 184, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9, 248, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7,\n\t\t\t35, 0, 8, 114, 0, 8, 50, 0, 9, 196, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 164, 0, 8, 2, 0, 8, 130, 0, 8, 66, 0, 9, 228, 80, 7, 7, 0, 8, 90, 0, 8,\n\t\t\t26, 0, 9, 148, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 212, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9, 180, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 244, 80,\n\t\t\t7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 204, 81, 7, 15, 0, 8, 102, 0, 8, 38, 0, 9, 172, 0, 8, 6, 0, 8, 134, 0,\n\t\t\t8, 70, 0, 9, 236, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 156, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9, 220, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 188, 0,\n\t\t\t8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 252, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0, 8, 113, 0, 8, 49, 0, 9, 194, 80, 7, 10, 0, 8, 97,\n\t\t\t0, 8, 33, 0, 9, 162, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 226, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9, 146, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 210,\n\t\t\t81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 178, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 242, 80, 7, 4, 0, 8, 85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117,\n\t\t\t0, 8, 53, 0, 9, 202, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 170, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9, 234, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 154,\n\t\t\t84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 218, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 186, 0, 8, 13, 0, 8, 141, 0, 8, 77, 0, 9, 250, 80, 7, 3, 0, 8, 83,\n\t\t\t0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 198, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9, 166, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 230,\n\t\t\t80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 150, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 214, 82, 7, 19, 0, 8, 107, 0, 8, 43, 0, 9, 182, 0, 8, 11, 0, 8, 139,\n\t\t\t0, 8, 75, 0, 9, 246, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9, 206, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 174,\n\t\t\t0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 238, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 158, 84, 7, 99, 0, 8, 127, 0, 8, 63, 0, 9, 222, 82, 7, 27, 0, 8, 111,\n\t\t\t0, 8, 47, 0, 9, 190, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 254, 96, 7, 256, 0, 8, 80, 0, 8, 16, 84, 8, 115, 82, 7, 31, 0, 8, 112, 0, 8, 48, 0, 9,\n\t\t\t193, 80, 7, 10, 0, 8, 96, 0, 8, 32, 0, 9, 161, 0, 8, 0, 0, 8, 128, 0, 8, 64, 0, 9, 225, 80, 7, 6, 0, 8, 88, 0, 8, 24, 0, 9, 145, 83, 7, 59, 0, 8,\n\t\t\t120, 0, 8, 56, 0, 9, 209, 81, 7, 17, 0, 8, 104, 0, 8, 40, 0, 9, 177, 0, 8, 8, 0, 8, 136, 0, 8, 72, 0, 9, 241, 80, 7, 4, 0, 8, 84, 0, 8, 20, 85, 8,\n\t\t\t227, 83, 7, 43, 0, 8, 116, 0, 8, 52, 0, 9, 201, 81, 7, 13, 0, 8, 100, 0, 8, 36, 0, 9, 169, 0, 8, 4, 0, 8, 132, 0, 8, 68, 0, 9, 233, 80, 7, 8, 0, 8,\n\t\t\t92, 0, 8, 28, 0, 9, 153, 84, 7, 83, 0, 8, 124, 0, 8, 60, 0, 9, 217, 82, 7, 23, 0, 8, 108, 0, 8, 44, 0, 9, 185, 0, 8, 12, 0, 8, 140, 0, 8, 76, 0, 9,\n\t\t\t249, 80, 7, 3, 0, 8, 82, 0, 8, 18, 85, 8, 163, 83, 7, 35, 0, 8, 114, 0, 8, 50, 0, 9, 197, 81, 7, 11, 0, 8, 98, 0, 8, 34, 0, 9, 165, 0, 8, 2, 0, 8,\n\t\t\t130, 0, 8, 66, 0, 9, 229, 80, 7, 7, 0, 8, 90, 0, 8, 26, 0, 9, 149, 84, 7, 67, 0, 8, 122, 0, 8, 58, 0, 9, 213, 82, 7, 19, 0, 8, 106, 0, 8, 42, 0, 9,\n\t\t\t181, 0, 8, 10, 0, 8, 138, 0, 8, 74, 0, 9, 245, 80, 7, 5, 0, 8, 86, 0, 8, 22, 192, 8, 0, 83, 7, 51, 0, 8, 118, 0, 8, 54, 0, 9, 205, 81, 7, 15, 0, 8,\n\t\t\t102, 0, 8, 38, 0, 9, 173, 0, 8, 6, 0, 8, 134, 0, 8, 70, 0, 9, 237, 80, 7, 9, 0, 8, 94, 0, 8, 30, 0, 9, 157, 84, 7, 99, 0, 8, 126, 0, 8, 62, 0, 9,\n\t\t\t221, 82, 7, 27, 0, 8, 110, 0, 8, 46, 0, 9, 189, 0, 8, 14, 0, 8, 142, 0, 8, 78, 0, 9, 253, 96, 7, 256, 0, 8, 81, 0, 8, 17, 85, 8, 131, 82, 7, 31, 0,\n\t\t\t8, 113, 0, 8, 49, 0, 9, 195, 80, 7, 10, 0, 8, 97, 0, 8, 33, 0, 9, 163, 0, 8, 1, 0, 8, 129, 0, 8, 65, 0, 9, 227, 80, 7, 6, 0, 8, 89, 0, 8, 25, 0, 9,\n\t\t\t147, 83, 7, 59, 0, 8, 121, 0, 8, 57, 0, 9, 211, 81, 7, 17, 0, 8, 105, 0, 8, 41, 0, 9, 179, 0, 8, 9, 0, 8, 137, 0, 8, 73, 0, 9, 243, 80, 7, 4, 0, 8,\n\t\t\t85, 0, 8, 21, 80, 8, 258, 83, 7, 43, 0, 8, 117, 0, 8, 53, 0, 9, 203, 81, 7, 13, 0, 8, 101, 0, 8, 37, 0, 9, 171, 0, 8, 5, 0, 8, 133, 0, 8, 69, 0, 9,\n\t\t\t235, 80, 7, 8, 0, 8, 93, 0, 8, 29, 0, 9, 155, 84, 7, 83, 0, 8, 125, 0, 8, 61, 0, 9, 219, 82, 7, 23, 0, 8, 109, 0, 8, 45, 0, 9, 187, 0, 8, 13, 0, 8,\n\t\t\t141, 0, 8, 77, 0, 9, 251, 80, 7, 3, 0, 8, 83, 0, 8, 19, 85, 8, 195, 83, 7, 35, 0, 8, 115, 0, 8, 51, 0, 9, 199, 81, 7, 11, 0, 8, 99, 0, 8, 35, 0, 9,\n\t\t\t167, 0, 8, 3, 0, 8, 131, 0, 8, 67, 0, 9, 231, 80, 7, 7, 0, 8, 91, 0, 8, 27, 0, 9, 151, 84, 7, 67, 0, 8, 123, 0, 8, 59, 0, 9, 215, 82, 7, 19, 0, 8,\n\t\t\t107, 0, 8, 43, 0, 9, 183, 0, 8, 11, 0, 8, 139, 0, 8, 75, 0, 9, 247, 80, 7, 5, 0, 8, 87, 0, 8, 23, 192, 8, 0, 83, 7, 51, 0, 8, 119, 0, 8, 55, 0, 9,\n\t\t\t207, 81, 7, 15, 0, 8, 103, 0, 8, 39, 0, 9, 175, 0, 8, 7, 0, 8, 135, 0, 8, 71, 0, 9, 239, 80, 7, 9, 0, 8, 95, 0, 8, 31, 0, 9, 159, 84, 7, 99, 0, 8,\n\t\t\t127, 0, 8, 63, 0, 9, 223, 82, 7, 27, 0, 8, 111, 0, 8, 47, 0, 9, 191, 0, 8, 15, 0, 8, 143, 0, 8, 79, 0, 9, 255 ];\n\tvar fixed_td = [ 80, 5, 1, 87, 5, 257, 83, 5, 17, 91, 5, 4097, 81, 5, 5, 89, 5, 1025, 85, 5, 65, 93, 5, 16385, 80, 5, 3, 88, 5, 513, 84, 5, 33, 92, 5,\n\t\t\t8193, 82, 5, 9, 90, 5, 2049, 86, 5, 129, 192, 5, 24577, 80, 5, 2, 87, 5, 385, 83, 5, 25, 91, 5, 6145, 81, 5, 7, 89, 5, 1537, 85, 5, 97, 93, 5,\n\t\t\t24577, 80, 5, 4, 88, 5, 769, 84, 5, 49, 92, 5, 12289, 82, 5, 13, 90, 5, 3073, 86, 5, 193, 192, 5, 24577 ];\n\n\t// Tables for deflate from PKZIP\'s appnote.txt.\n\tvar cplens = [ // Copy lengths for literal codes 257..285\n\t3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0 ];\n\n\t// see note #13 above about 258\n\tvar cplext = [ // Extra bits for literal codes 257..285\n\t0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112 // 112==invalid\n\t];\n\n\tvar cpdist = [ // Copy offsets for distance codes 0..29\n\t1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 ];\n\n\tvar cpdext = [ // Extra bits for distance codes\n\t0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13 ];\n\n\t// If BMAX needs to be larger than 16, then h and x[] should be uLong.\n\tvar BMAX = 15; // maximum bit length of any code\n\n\tfunction InfTree() {\n\t\tvar that = this;\n\n\t\tvar hn; // hufts used in space\n\t\tvar v; // work area for huft_build\n\t\tvar c; // bit length count table\n\t\tvar r; // table entry for structure assignment\n\t\tvar u; // table stack\n\t\tvar x; // bit offsets, then code stack\n\n\t\tfunction huft_build(b, // code lengths in bits (all assumed <=\n\t\t// BMAX)\n\t\tbindex, n, // number of codes (assumed <= 288)\n\t\ts, // number of simple-valued codes (0..s-1)\n\t\td, // list of base values for non-simple codes\n\t\te, // list of extra bits for non-simple codes\n\t\tt, // result: starting table\n\t\tm, // maximum lookup bits, returns actual\n\t\thp,// space for trees\n\t\thn,// hufts used in space\n\t\tv // working area: values in order of bit length\n\t\t) {\n\t\t\t// Given a list of code lengths and a maximum table size, make a set of\n\t\t\t// tables to decode that set of codes. Return Z_OK on success,\n\t\t\t// Z_BUF_ERROR\n\t\t\t// if the given code set is incomplete (the tables are still built in\n\t\t\t// this\n\t\t\t// case), Z_DATA_ERROR if the input is invalid (an over-subscribed set\n\t\t\t// of\n\t\t\t// lengths), or Z_MEM_ERROR if not enough memory.\n\n\t\t\tvar a; // counter for codes of length k\n\t\t\tvar f; // i repeats in table every f entries\n\t\t\tvar g; // maximum code length\n\t\t\tvar h; // table level\n\t\t\tvar i; // counter, current code\n\t\t\tvar j; // counter\n\t\t\tvar k; // number of bits in current code\n\t\t\tvar l; // bits per table (returned in m)\n\t\t\tvar mask; // (1 << w) - 1, to avoid cc -O bug on HP\n\t\t\tvar p; // pointer into c[], b[], or v[]\n\t\t\tvar q; // points to current table\n\t\t\tvar w; // bits before this table == (l * h)\n\t\t\tvar xp; // pointer into x\n\t\t\tvar y; // number of dummy codes added\n\t\t\tvar z; // number of entries in current table\n\n\t\t\t// Generate counts for each bit length\n\n\t\t\tp = 0;\n\t\t\ti = n;\n\t\t\tdo {\n\t\t\t\tc[b[bindex + p]]++;\n\t\t\t\tp++;\n\t\t\t\ti--; // assume all entries <= BMAX\n\t\t\t} while (i !== 0);\n\n\t\t\tif (c[0] == n) { // null input--all zero length codes\n\t\t\t\tt[0] = -1;\n\t\t\t\tm[0] = 0;\n\t\t\t\treturn Z_OK;\n\t\t\t}\n\n\t\t\t// Find minimum and maximum length, bound *m by those\n\t\t\tl = m[0];\n\t\t\tfor (j = 1; j <= BMAX; j++)\n\t\t\t\tif (c[j] !== 0)\n\t\t\t\t\tbreak;\n\t\t\tk = j; // minimum code length\n\t\t\tif (l < j) {\n\t\t\t\tl = j;\n\t\t\t}\n\t\t\tfor (i = BMAX; i !== 0; i--) {\n\t\t\t\tif (c[i] !== 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tg = i; // maximum code length\n\t\t\tif (l > i) {\n\t\t\t\tl = i;\n\t\t\t}\n\t\t\tm[0] = l;\n\n\t\t\t// Adjust last length count to fill out codes, if needed\n\t\t\tfor (y = 1 << j; j < i; j++, y <<= 1) {\n\t\t\t\tif ((y -= c[j]) < 0) {\n\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ((y -= c[i]) < 0) {\n\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t}\n\t\t\tc[i] += y;\n\n\t\t\t// Generate starting offsets into the value table for each length\n\t\t\tx[1] = j = 0;\n\t\t\tp = 1;\n\t\t\txp = 2;\n\t\t\twhile (--i !== 0) { // note that i == g from above\n\t\t\t\tx[xp] = (j += c[p]);\n\t\t\t\txp++;\n\t\t\t\tp++;\n\t\t\t}\n\n\t\t\t// Make a table of values in order of bit lengths\n\t\t\ti = 0;\n\t\t\tp = 0;\n\t\t\tdo {\n\t\t\t\tif ((j = b[bindex + p]) !== 0) {\n\t\t\t\t\tv[x[j]++] = i;\n\t\t\t\t}\n\t\t\t\tp++;\n\t\t\t} while (++i < n);\n\t\t\tn = x[g]; // set n to length of v\n\n\t\t\t// Generate the Huffman codes and for each, make the table entries\n\t\t\tx[0] = i = 0; // first Huffman code is zero\n\t\t\tp = 0; // grab values in bit order\n\t\t\th = -1; // no tables yet--level -1\n\t\t\tw = -l; // bits decoded == (l * h)\n\t\t\tu[0] = 0; // just to keep compilers happy\n\t\t\tq = 0; // ditto\n\t\t\tz = 0; // ditto\n\n\t\t\t// go through the bit lengths (k already is bits in shortest code)\n\t\t\tfor (; k <= g; k++) {\n\t\t\t\ta = c[k];\n\t\t\t\twhile (a-- !== 0) {\n\t\t\t\t\t// here i is the Huffman code of length k bits for value *p\n\t\t\t\t\t// make tables up to required level\n\t\t\t\t\twhile (k > w + l) {\n\t\t\t\t\t\th++;\n\t\t\t\t\t\tw += l; // previous table always l bits\n\t\t\t\t\t\t// compute minimum size table less than or equal to l bits\n\t\t\t\t\t\tz = g - w;\n\t\t\t\t\t\tz = (z > l) ? l : z; // table size upper limit\n\t\t\t\t\t\tif ((f = 1 << (j = k - w)) > a + 1) { // try a k-w bit table\n\t\t\t\t\t\t\t// too few codes for\n\t\t\t\t\t\t\t// k-w bit table\n\t\t\t\t\t\t\tf -= a + 1; // deduct codes from patterns left\n\t\t\t\t\t\t\txp = k;\n\t\t\t\t\t\t\tif (j < z) {\n\t\t\t\t\t\t\t\twhile (++j < z) { // try smaller tables up to z bits\n\t\t\t\t\t\t\t\t\tif ((f <<= 1) <= c[++xp])\n\t\t\t\t\t\t\t\t\t\tbreak; // enough codes to use up j bits\n\t\t\t\t\t\t\t\t\tf -= c[xp]; // else deduct codes from patterns\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tz = 1 << j; // table entries for j-bit table\n\n\t\t\t\t\t\t// allocate new table\n\t\t\t\t\t\tif (hn[0] + z > MANY) { // (note: doesn\'t matter for fixed)\n\t\t\t\t\t\t\treturn Z_DATA_ERROR; // overflow of MANY\n\t\t\t\t\t\t}\n\t\t\t\t\t\tu[h] = q = /* hp+ */hn[0]; // DEBUG\n\t\t\t\t\t\thn[0] += z;\n\n\t\t\t\t\t\t// connect to last table, if there is one\n\t\t\t\t\t\tif (h !== 0) {\n\t\t\t\t\t\t\tx[h] = i; // save pattern for backing up\n\t\t\t\t\t\t\tr[0] = /* (byte) */j; // bits in this table\n\t\t\t\t\t\t\tr[1] = /* (byte) */l; // bits to dump before this table\n\t\t\t\t\t\t\tj = i >>> (w - l);\n\t\t\t\t\t\t\tr[2] = /* (int) */(q - u[h - 1] - j); // offset to this table\n\t\t\t\t\t\t\thp.set(r, (u[h - 1] + j) * 3);\n\t\t\t\t\t\t\t// to\n\t\t\t\t\t\t\t// last\n\t\t\t\t\t\t\t// table\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tt[0] = q; // first table is returned result\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// set up table entry in r\n\t\t\t\t\tr[1] = /* (byte) */(k - w);\n\t\t\t\t\tif (p >= n) {\n\t\t\t\t\t\tr[0] = 128 + 64; // out of values--invalid code\n\t\t\t\t\t} else if (v[p] < s) {\n\t\t\t\t\t\tr[0] = /* (byte) */(v[p] < 256 ? 0 : 32 + 64); // 256 is\n\t\t\t\t\t\t// end-of-block\n\t\t\t\t\t\tr[2] = v[p++]; // simple code is just the value\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr[0] = /* (byte) */(e[v[p] - s] + 16 + 64); // non-simple--look\n\t\t\t\t\t\t// up in lists\n\t\t\t\t\t\tr[2] = d[v[p++] - s];\n\t\t\t\t\t}\n\n\t\t\t\t\t// fill code-like entries with r\n\t\t\t\t\tf = 1 << (k - w);\n\t\t\t\t\tfor (j = i >>> w; j < z; j += f) {\n\t\t\t\t\t\thp.set(r, (q + j) * 3);\n\t\t\t\t\t}\n\n\t\t\t\t\t// backwards increment the k-bit code i\n\t\t\t\t\tfor (j = 1 << (k - 1); (i & j) !== 0; j >>>= 1) {\n\t\t\t\t\t\ti ^= j;\n\t\t\t\t\t}\n\t\t\t\t\ti ^= j;\n\n\t\t\t\t\t// backup over finished tables\n\t\t\t\t\tmask = (1 << w) - 1; // needed on HP, cc -O bug\n\t\t\t\t\twhile ((i & mask) != x[h]) {\n\t\t\t\t\t\th--; // don\'t need to update q\n\t\t\t\t\t\tw -= l;\n\t\t\t\t\t\tmask = (1 << w) - 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Return Z_BUF_ERROR if we were given an incomplete table\n\t\t\treturn y !== 0 && g != 1 ? Z_BUF_ERROR : Z_OK;\n\t\t}\n\n\t\tfunction initWorkArea(vsize) {\n\t\t\tvar i;\n\t\t\tif (!hn) {\n\t\t\t\thn = []; // []; //new Array(1);\n\t\t\t\tv = []; // new Array(vsize);\n\t\t\t\tc = new Int32Array(BMAX + 1); // new Array(BMAX + 1);\n\t\t\t\tr = []; // new Array(3);\n\t\t\t\tu = new Int32Array(BMAX); // new Array(BMAX);\n\t\t\t\tx = new Int32Array(BMAX + 1); // new Array(BMAX + 1);\n\t\t\t}\n\t\t\tif (v.length < vsize) {\n\t\t\t\tv = []; // new Array(vsize);\n\t\t\t}\n\t\t\tfor (i = 0; i < vsize; i++) {\n\t\t\t\tv[i] = 0;\n\t\t\t}\n\t\t\tfor (i = 0; i < BMAX + 1; i++) {\n\t\t\t\tc[i] = 0;\n\t\t\t}\n\t\t\tfor (i = 0; i < 3; i++) {\n\t\t\t\tr[i] = 0;\n\t\t\t}\n\t\t\t// for(int i=0; i<BMAX; i++){u[i]=0;}\n\t\t\tu.set(c.subarray(0, BMAX), 0);\n\t\t\t// for(int i=0; i<BMAX+1; i++){x[i]=0;}\n\t\t\tx.set(c.subarray(0, BMAX + 1), 0);\n\t\t}\n\n\t\tthat.inflate_trees_bits = function(c, // 19 code lengths\n\t\tbb, // bits tree desired/actual depth\n\t\ttb, // bits tree result\n\t\thp, // space for trees\n\t\tz // for messages\n\t\t) {\n\t\t\tvar result;\n\t\t\tinitWorkArea(19);\n\t\t\thn[0] = 0;\n\t\t\tresult = huft_build(c, 0, 19, 19, null, null, tb, bb, hp, hn, v);\n\n\t\t\tif (result == Z_DATA_ERROR) {\n\t\t\t\tz.msg = "oversubscribed dynamic bit lengths tree";\n\t\t\t} else if (result == Z_BUF_ERROR || bb[0] === 0) {\n\t\t\t\tz.msg = "incomplete dynamic bit lengths tree";\n\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\tthat.inflate_trees_dynamic = function(nl, // number of literal/length codes\n\t\tnd, // number of distance codes\n\t\tc, // that many (total) code lengths\n\t\tbl, // literal desired/actual bit depth\n\t\tbd, // distance desired/actual bit depth\n\t\ttl, // literal/length tree result\n\t\ttd, // distance tree result\n\t\thp, // space for trees\n\t\tz // for messages\n\t\t) {\n\t\t\tvar result;\n\n\t\t\t// build literal/length tree\n\t\t\tinitWorkArea(288);\n\t\t\thn[0] = 0;\n\t\t\tresult = huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, hn, v);\n\t\t\tif (result != Z_OK || bl[0] === 0) {\n\t\t\t\tif (result == Z_DATA_ERROR) {\n\t\t\t\t\tz.msg = "oversubscribed literal/length tree";\n\t\t\t\t} else if (result != Z_MEM_ERROR) {\n\t\t\t\t\tz.msg = "incomplete literal/length tree";\n\t\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\t// build distance tree\n\t\t\tinitWorkArea(288);\n\t\t\tresult = huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, hn, v);\n\n\t\t\tif (result != Z_OK || (bd[0] === 0 && nl > 257)) {\n\t\t\t\tif (result == Z_DATA_ERROR) {\n\t\t\t\t\tz.msg = "oversubscribed distance tree";\n\t\t\t\t} else if (result == Z_BUF_ERROR) {\n\t\t\t\t\tz.msg = "incomplete distance tree";\n\t\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t\t} else if (result != Z_MEM_ERROR) {\n\t\t\t\t\tz.msg = "empty distance tree with lengths";\n\t\t\t\t\tresult = Z_DATA_ERROR;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\treturn Z_OK;\n\t\t};\n\n\t}\n\n\tInfTree.inflate_trees_fixed = function(bl, // literal desired/actual bit depth\n\tbd, // distance desired/actual bit depth\n\ttl,// literal/length tree result\n\ttd// distance tree result\n\t) {\n\t\tbl[0] = fixed_bl;\n\t\tbd[0] = fixed_bd;\n\t\ttl[0] = fixed_tl;\n\t\ttd[0] = fixed_td;\n\t\treturn Z_OK;\n\t};\n\n\t// InfCodes\n\n\t// waiting for "i:"=input,\n\t// "o:"=output,\n\t// "x:"=nothing\n\tvar START = 0; // x: set up for LEN\n\tvar LEN = 1; // i: get length/literal/eob next\n\tvar LENEXT = 2; // i: getting length extra (have base)\n\tvar DIST = 3; // i: get distance next\n\tvar DISTEXT = 4;// i: getting distance extra\n\tvar COPY = 5; // o: copying bytes in window, waiting\n\t// for space\n\tvar LIT = 6; // o: got literal, waiting for output\n\t// space\n\tvar WASH = 7; // o: got eob, possibly still output\n\t// waiting\n\tvar END = 8; // x: got eob and all data flushed\n\tvar BADCODE = 9;// x: got error\n\n\tfunction InfCodes() {\n\t\tvar that = this;\n\n\t\tvar mode; // current inflate_codes mode\n\n\t\t// mode dependent information\n\t\tvar len = 0;\n\n\t\tvar tree; // pointer into tree\n\t\tvar tree_index = 0;\n\t\tvar need = 0; // bits needed\n\n\t\tvar lit = 0;\n\n\t\t// if EXT or COPY, where and how much\n\t\tvar get = 0; // bits to get for extra\n\t\tvar dist = 0; // distance back to copy from\n\n\t\tvar lbits = 0; // ltree bits decoded per branch\n\t\tvar dbits = 0; // dtree bits decoder per branch\n\t\tvar ltree; // literal/length/eob tree\n\t\tvar ltree_index = 0; // literal/length/eob tree\n\t\tvar dtree; // distance tree\n\t\tvar dtree_index = 0; // distance tree\n\n\t\t// Called with number of bytes left to write in window at least 258\n\t\t// (the maximum string length) and number of input bytes available\n\t\t// at least ten. The ten bytes are six bytes for the longest length/\n\t\t// distance pair plus four bytes for overloading the bit buffer.\n\n\t\tfunction inflate_fast(bl, bd, tl, tl_index, td, td_index, s, z) {\n\t\t\tvar t; // temporary pointer\n\t\t\tvar tp; // temporary pointer\n\t\t\tvar tp_index; // temporary pointer\n\t\t\tvar e; // extra bits or operation\n\t\t\tvar b; // bit buffer\n\t\t\tvar k; // bits in bit buffer\n\t\t\tvar p; // input data pointer\n\t\t\tvar n; // bytes available there\n\t\t\tvar q; // output window write pointer\n\t\t\tvar m; // bytes to end of window or read pointer\n\t\t\tvar ml; // mask for literal/length tree\n\t\t\tvar md; // mask for distance tree\n\t\t\tvar c; // bytes to copy\n\t\t\tvar d; // distance back to copy from\n\t\t\tvar r; // copy source pointer\n\n\t\t\tvar tp_index_t_3; // (tp_index+t)*3\n\n\t\t\t// load input, output, bit values\n\t\t\tp = z.next_in_index;\n\t\t\tn = z.avail_in;\n\t\t\tb = s.bitb;\n\t\t\tk = s.bitk;\n\t\t\tq = s.write;\n\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t// initialize masks\n\t\t\tml = inflate_mask[bl];\n\t\t\tmd = inflate_mask[bd];\n\n\t\t\t// do until not enough input or output space for fast loop\n\t\t\tdo { // assume called with m >= 258 && n >= 10\n\t\t\t\t// get literal/length code\n\t\t\t\twhile (k < (20)) { // max bits for literal/length code\n\t\t\t\t\tn--;\n\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\tk += 8;\n\t\t\t\t}\n\n\t\t\t\tt = b & ml;\n\t\t\t\ttp = tl;\n\t\t\t\ttp_index = tl_index;\n\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\tif ((e = tp[tp_index_t_3]) === 0) {\n\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\t\ts.window[q++] = /* (byte) */tp[tp_index_t_3 + 2];\n\t\t\t\t\tm--;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tdo {\n\n\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\t\tif ((e & 16) !== 0) {\n\t\t\t\t\t\te &= 15;\n\t\t\t\t\t\tc = tp[tp_index_t_3 + 2] + (/* (int) */b & inflate_mask[e]);\n\n\t\t\t\t\t\tb >>= e;\n\t\t\t\t\t\tk -= e;\n\n\t\t\t\t\t\t// decode distance base of block to copy\n\t\t\t\t\t\twhile (k < (15)) { // max bits for distance code\n\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tt = b & md;\n\t\t\t\t\t\ttp = td;\n\t\t\t\t\t\ttp_index = td_index;\n\t\t\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\t\t\te = tp[tp_index_t_3];\n\n\t\t\t\t\t\tdo {\n\n\t\t\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\t\t\t\tif ((e & 16) !== 0) {\n\t\t\t\t\t\t\t\t// get extra bits to add to distance base\n\t\t\t\t\t\t\t\te &= 15;\n\t\t\t\t\t\t\t\twhile (k < (e)) { // get extra bits (up to 13)\n\t\t\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\td = tp[tp_index_t_3 + 2] + (b & inflate_mask[e]);\n\n\t\t\t\t\t\t\t\tb >>= (e);\n\t\t\t\t\t\t\t\tk -= (e);\n\n\t\t\t\t\t\t\t\t// do the copy\n\t\t\t\t\t\t\t\tm -= c;\n\t\t\t\t\t\t\t\tif (q >= d) { // offset before dest\n\t\t\t\t\t\t\t\t\t// just copy\n\t\t\t\t\t\t\t\t\tr = q - d;\n\t\t\t\t\t\t\t\t\tif (q - r > 0 && 2 > (q - r)) {\n\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++]; // minimum\n\t\t\t\t\t\t\t\t\t\t// count is\n\t\t\t\t\t\t\t\t\t\t// three,\n\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++]; // so unroll\n\t\t\t\t\t\t\t\t\t\t// loop a\n\t\t\t\t\t\t\t\t\t\t// little\n\t\t\t\t\t\t\t\t\t\tc -= 2;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\ts.window.set(s.window.subarray(r, r + 2), q);\n\t\t\t\t\t\t\t\t\t\tq += 2;\n\t\t\t\t\t\t\t\t\t\tr += 2;\n\t\t\t\t\t\t\t\t\t\tc -= 2;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else { // else offset after destination\n\t\t\t\t\t\t\t\t\tr = q - d;\n\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\tr += s.end; // force pointer in window\n\t\t\t\t\t\t\t\t\t} while (r < 0); // covers invalid distances\n\t\t\t\t\t\t\t\t\te = s.end - r;\n\t\t\t\t\t\t\t\t\tif (c > e) { // if source crosses,\n\t\t\t\t\t\t\t\t\t\tc -= e; // wrapped copy\n\t\t\t\t\t\t\t\t\t\tif (q - r > 0 && e > (q - r)) {\n\t\t\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++];\n\t\t\t\t\t\t\t\t\t\t\t} while (--e !== 0);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\ts.window.set(s.window.subarray(r, r + e), q);\n\t\t\t\t\t\t\t\t\t\t\tq += e;\n\t\t\t\t\t\t\t\t\t\t\tr += e;\n\t\t\t\t\t\t\t\t\t\t\te = 0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tr = 0; // copy rest from start of window\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// copy all or what\'s left\n\t\t\t\t\t\t\t\tif (q - r > 0 && c > (q - r)) {\n\t\t\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t\t\ts.window[q++] = s.window[r++];\n\t\t\t\t\t\t\t\t\t} while (--c !== 0);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ts.window.set(s.window.subarray(r, r + c), q);\n\t\t\t\t\t\t\t\t\tq += c;\n\t\t\t\t\t\t\t\t\tr += c;\n\t\t\t\t\t\t\t\t\tc = 0;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t} else if ((e & 64) === 0) {\n\t\t\t\t\t\t\t\tt += tp[tp_index_t_3 + 2];\n\t\t\t\t\t\t\t\tt += (b & inflate_mask[e]);\n\t\t\t\t\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\t\t\t\t\te = tp[tp_index_t_3];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tz.msg = "invalid distance code";\n\n\t\t\t\t\t\t\t\tc = z.avail_in - n;\n\t\t\t\t\t\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\t\t\t\t\t\tn += c;\n\t\t\t\t\t\t\t\tp -= c;\n\t\t\t\t\t\t\t\tk -= c << 3;\n\n\t\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\ts.write = q;\n\n\t\t\t\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} while (true);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((e & 64) === 0) {\n\t\t\t\t\t\tt += tp[tp_index_t_3 + 2];\n\t\t\t\t\t\tt += (b & inflate_mask[e]);\n\t\t\t\t\t\ttp_index_t_3 = (tp_index + t) * 3;\n\t\t\t\t\t\tif ((e = tp[tp_index_t_3]) === 0) {\n\n\t\t\t\t\t\t\tb >>= (tp[tp_index_t_3 + 1]);\n\t\t\t\t\t\t\tk -= (tp[tp_index_t_3 + 1]);\n\n\t\t\t\t\t\t\ts.window[q++] = /* (byte) */tp[tp_index_t_3 + 2];\n\t\t\t\t\t\t\tm--;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if ((e & 32) !== 0) {\n\n\t\t\t\t\t\tc = z.avail_in - n;\n\t\t\t\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\t\t\t\tn += c;\n\t\t\t\t\t\tp -= c;\n\t\t\t\t\t\tk -= c << 3;\n\n\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\ts.write = q;\n\n\t\t\t\t\t\treturn Z_STREAM_END;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz.msg = "invalid literal/length code";\n\n\t\t\t\t\t\tc = z.avail_in - n;\n\t\t\t\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\t\t\t\tn += c;\n\t\t\t\t\t\tp -= c;\n\t\t\t\t\t\tk -= c << 3;\n\n\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\ts.write = q;\n\n\t\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\t\t}\n\t\t\t\t} while (true);\n\t\t\t} while (m >= 258 && n >= 10);\n\n\t\t\t// not enough input or output--restore pointers and return\n\t\t\tc = z.avail_in - n;\n\t\t\tc = (k >> 3) < c ? k >> 3 : c;\n\t\t\tn += c;\n\t\t\tp -= c;\n\t\t\tk -= c << 3;\n\n\t\t\ts.bitb = b;\n\t\t\ts.bitk = k;\n\t\t\tz.avail_in = n;\n\t\t\tz.total_in += p - z.next_in_index;\n\t\t\tz.next_in_index = p;\n\t\t\ts.write = q;\n\n\t\t\treturn Z_OK;\n\t\t}\n\n\t\tthat.init = function(bl, bd, tl, tl_index, td, td_index) {\n\t\t\tmode = START;\n\t\t\tlbits = /* (byte) */bl;\n\t\t\tdbits = /* (byte) */bd;\n\t\t\tltree = tl;\n\t\t\tltree_index = tl_index;\n\t\t\tdtree = td;\n\t\t\tdtree_index = td_index;\n\t\t\ttree = null;\n\t\t};\n\n\t\tthat.proc = function(s, z, r) {\n\t\t\tvar j; // temporary storage\n\t\t\tvar tindex; // temporary pointer\n\t\t\tvar e; // extra bits or operation\n\t\t\tvar b = 0; // bit buffer\n\t\t\tvar k = 0; // bits in bit buffer\n\t\t\tvar p = 0; // input data pointer\n\t\t\tvar n; // bytes available there\n\t\t\tvar q; // output window write pointer\n\t\t\tvar m; // bytes to end of window or read pointer\n\t\t\tvar f; // pointer to copy strings from\n\n\t\t\t// copy input/output information to locals (UPDATE macro restores)\n\t\t\tp = z.next_in_index;\n\t\t\tn = z.avail_in;\n\t\t\tb = s.bitb;\n\t\t\tk = s.bitk;\n\t\t\tq = s.write;\n\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t// process input and output based on current state\n\t\t\twhile (true) {\n\t\t\t\tswitch (mode) {\n\t\t\t\t// waiting for "i:"=input, "o:"=output, "x:"=nothing\n\t\t\t\tcase START: // x: set up for LEN\n\t\t\t\t\tif (m >= 258 && n >= 10) {\n\n\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\tr = inflate_fast(lbits, dbits, ltree, ltree_index, dtree, dtree_index, s, z);\n\n\t\t\t\t\t\tp = z.next_in_index;\n\t\t\t\t\t\tn = z.avail_in;\n\t\t\t\t\t\tb = s.bitb;\n\t\t\t\t\t\tk = s.bitk;\n\t\t\t\t\t\tq = s.write;\n\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\t\tif (r != Z_OK) {\n\t\t\t\t\t\t\tmode = r == Z_STREAM_END ? WASH : BADCODE;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tneed = lbits;\n\t\t\t\t\ttree = ltree;\n\t\t\t\t\ttree_index = ltree_index;\n\n\t\t\t\t\tmode = LEN;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase LEN: // i: get length/literal/eob next\n\t\t\t\t\tj = need;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\ttindex = (tree_index + (b & inflate_mask[j])) * 3;\n\n\t\t\t\t\tb >>>= (tree[tindex + 1]);\n\t\t\t\t\tk -= (tree[tindex + 1]);\n\n\t\t\t\t\te = tree[tindex];\n\n\t\t\t\t\tif (e === 0) { // literal\n\t\t\t\t\t\tlit = tree[tindex + 2];\n\t\t\t\t\t\tmode = LIT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 16) !== 0) { // length\n\t\t\t\t\t\tget = e & 15;\n\t\t\t\t\t\tlen = tree[tindex + 2];\n\t\t\t\t\t\tmode = LENEXT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 64) === 0) { // next table\n\t\t\t\t\t\tneed = e;\n\t\t\t\t\t\ttree_index = tindex / 3 + tree[tindex + 2];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 32) !== 0) { // end of block\n\t\t\t\t\t\tmode = WASH;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmode = BADCODE; // invalid code\n\t\t\t\t\tz.msg = "invalid literal/length code";\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tcase LENEXT: // i: getting length extra (have base)\n\t\t\t\t\tj = get;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\tlen += (b & inflate_mask[j]);\n\n\t\t\t\t\tb >>= j;\n\t\t\t\t\tk -= j;\n\n\t\t\t\t\tneed = dbits;\n\t\t\t\t\ttree = dtree;\n\t\t\t\t\ttree_index = dtree_index;\n\t\t\t\t\tmode = DIST;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DIST: // i: get distance next\n\t\t\t\t\tj = need;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\ttindex = (tree_index + (b & inflate_mask[j])) * 3;\n\n\t\t\t\t\tb >>= tree[tindex + 1];\n\t\t\t\t\tk -= tree[tindex + 1];\n\n\t\t\t\t\te = (tree[tindex]);\n\t\t\t\t\tif ((e & 16) !== 0) { // distance\n\t\t\t\t\t\tget = e & 15;\n\t\t\t\t\t\tdist = tree[tindex + 2];\n\t\t\t\t\t\tmode = DISTEXT;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((e & 64) === 0) { // next table\n\t\t\t\t\t\tneed = e;\n\t\t\t\t\t\ttree_index = tindex / 3 + tree[tindex + 2];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmode = BADCODE; // invalid code\n\t\t\t\t\tz.msg = "invalid distance code";\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tcase DISTEXT: // i: getting distance extra\n\t\t\t\t\tj = get;\n\n\t\t\t\t\twhile (k < (j)) {\n\t\t\t\t\t\tif (n !== 0)\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\telse {\n\n\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\tdist += (b & inflate_mask[j]);\n\n\t\t\t\t\tb >>= j;\n\t\t\t\t\tk -= j;\n\n\t\t\t\t\tmode = COPY;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase COPY: // o: copying bytes in window, waiting for space\n\t\t\t\t\tf = q - dist;\n\t\t\t\t\twhile (f < 0) { // modulo window size-"while" instead\n\t\t\t\t\t\tf += s.end; // of "if" handles invalid distances\n\t\t\t\t\t}\n\t\t\t\t\twhile (len !== 0) {\n\n\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\t\tr = s.inflate_flush(z, r);\n\t\t\t\t\t\t\t\tq = s.write;\n\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ts.window[q++] = s.window[f++];\n\t\t\t\t\t\tm--;\n\n\t\t\t\t\t\tif (f == s.end)\n\t\t\t\t\t\t\tf = 0;\n\t\t\t\t\t\tlen--;\n\t\t\t\t\t}\n\t\t\t\t\tmode = START;\n\t\t\t\t\tbreak;\n\t\t\t\tcase LIT: // o: got literal, waiting for output space\n\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\tr = s.inflate_flush(z, r);\n\t\t\t\t\t\t\tq = s.write;\n\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\t\t\tif (q == s.end && s.read !== 0) {\n\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tr = Z_OK;\n\n\t\t\t\t\ts.window[q++] = /* (byte) */lit;\n\t\t\t\t\tm--;\n\n\t\t\t\t\tmode = START;\n\t\t\t\t\tbreak;\n\t\t\t\tcase WASH: // o: got eob, possibly more output\n\t\t\t\t\tif (k > 7) { // return unused byte, if any\n\t\t\t\t\t\tk -= 8;\n\t\t\t\t\t\tn++;\n\t\t\t\t\t\tp--; // can always return one\n\t\t\t\t\t}\n\n\t\t\t\t\ts.write = q;\n\t\t\t\t\tr = s.inflate_flush(z, r);\n\t\t\t\t\tq = s.write;\n\t\t\t\t\tm = q < s.read ? s.read - q - 1 : s.end - q;\n\n\t\t\t\t\tif (s.read != s.write) {\n\t\t\t\t\t\ts.bitb = b;\n\t\t\t\t\t\ts.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\ts.write = q;\n\t\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tmode = END;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase END:\n\t\t\t\t\tr = Z_STREAM_END;\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tcase BADCODE: // x: got error\n\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\n\t\t\t\tdefault:\n\t\t\t\t\tr = Z_STREAM_ERROR;\n\n\t\t\t\t\ts.bitb = b;\n\t\t\t\t\ts.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\ts.write = q;\n\t\t\t\t\treturn s.inflate_flush(z, r);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthat.free = function() {\n\t\t\t// ZFREE(z, c);\n\t\t};\n\n\t}\n\n\t// InfBlocks\n\n\t// Table for deflate from PKZIP\'s appnote.txt.\n\tvar border = [ // Order of the bit length code lengths\n\t16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\tvar TYPE = 0; // get type bits (3, including end bit)\n\tvar LENS = 1; // get lengths for stored\n\tvar STORED = 2;// processing stored block\n\tvar TABLE = 3; // get table lengths\n\tvar BTREE = 4; // get bit lengths tree for a dynamic\n\t// block\n\tvar DTREE = 5; // get length, distance trees for a\n\t// dynamic block\n\tvar CODES = 6; // processing fixed or dynamic block\n\tvar DRY = 7; // output remaining window bytes\n\tvar DONELOCKS = 8; // finished last block, done\n\tvar BADBLOCKS = 9; // ot a data error--stuck here\n\n\tfunction InfBlocks(z, w) {\n\t\tvar that = this;\n\n\t\tvar mode = TYPE; // current inflate_block mode\n\n\t\tvar left = 0; // if STORED, bytes left to copy\n\n\t\tvar table = 0; // table lengths (14 bits)\n\t\tvar index = 0; // index into blens (or border)\n\t\tvar blens; // bit lengths of codes\n\t\tvar bb = [ 0 ]; // bit length tree depth\n\t\tvar tb = [ 0 ]; // bit length decoding tree\n\n\t\tvar codes = new InfCodes(); // if CODES, current state\n\n\t\tvar last = 0; // true if this block is the last block\n\n\t\tvar hufts = new Int32Array(MANY * 3); // single malloc for tree space\n\t\tvar check = 0; // check on output\n\t\tvar inftree = new InfTree();\n\n\t\tthat.bitk = 0; // bits in bit buffer\n\t\tthat.bitb = 0; // bit buffer\n\t\tthat.window = new Uint8Array(w); // sliding window\n\t\tthat.end = w; // one byte after sliding window\n\t\tthat.read = 0; // window read pointer\n\t\tthat.write = 0; // window write pointer\n\n\t\tthat.reset = function(z, c) {\n\t\t\tif (c)\n\t\t\t\tc[0] = check;\n\t\t\t// if (mode == BTREE || mode == DTREE) {\n\t\t\t// }\n\t\t\tif (mode == CODES) {\n\t\t\t\tcodes.free(z);\n\t\t\t}\n\t\t\tmode = TYPE;\n\t\t\tthat.bitk = 0;\n\t\t\tthat.bitb = 0;\n\t\t\tthat.read = that.write = 0;\n\t\t};\n\n\t\tthat.reset(z, null);\n\n\t\t// copy as much as possible from the sliding window to the output area\n\t\tthat.inflate_flush = function(z, r) {\n\t\t\tvar n;\n\t\t\tvar p;\n\t\t\tvar q;\n\n\t\t\t// local copies of source and destination pointers\n\t\t\tp = z.next_out_index;\n\t\t\tq = that.read;\n\n\t\t\t// compute number of bytes to copy as far as end of window\n\t\t\tn = /* (int) */((q <= that.write ? that.write : that.end) - q);\n\t\t\tif (n > z.avail_out)\n\t\t\t\tn = z.avail_out;\n\t\t\tif (n !== 0 && r == Z_BUF_ERROR)\n\t\t\t\tr = Z_OK;\n\n\t\t\t// update counters\n\t\t\tz.avail_out -= n;\n\t\t\tz.total_out += n;\n\n\t\t\t// copy as far as end of window\n\t\t\tz.next_out.set(that.window.subarray(q, q + n), p);\n\t\t\tp += n;\n\t\t\tq += n;\n\n\t\t\t// see if more to copy at beginning of window\n\t\t\tif (q == that.end) {\n\t\t\t\t// wrap pointers\n\t\t\t\tq = 0;\n\t\t\t\tif (that.write == that.end)\n\t\t\t\t\tthat.write = 0;\n\n\t\t\t\t// compute bytes to copy\n\t\t\t\tn = that.write - q;\n\t\t\t\tif (n > z.avail_out)\n\t\t\t\t\tn = z.avail_out;\n\t\t\t\tif (n !== 0 && r == Z_BUF_ERROR)\n\t\t\t\t\tr = Z_OK;\n\n\t\t\t\t// update counters\n\t\t\t\tz.avail_out -= n;\n\t\t\t\tz.total_out += n;\n\n\t\t\t\t// copy\n\t\t\t\tz.next_out.set(that.window.subarray(q, q + n), p);\n\t\t\t\tp += n;\n\t\t\t\tq += n;\n\t\t\t}\n\n\t\t\t// update pointers\n\t\t\tz.next_out_index = p;\n\t\t\tthat.read = q;\n\n\t\t\t// done\n\t\t\treturn r;\n\t\t};\n\n\t\tthat.proc = function(z, r) {\n\t\t\tvar t; // temporary storage\n\t\t\tvar b; // bit buffer\n\t\t\tvar k; // bits in bit buffer\n\t\t\tvar p; // input data pointer\n\t\t\tvar n; // bytes available there\n\t\t\tvar q; // output window write pointer\n\t\t\tvar m; // bytes to end of window or read pointer\n\n\t\t\tvar i;\n\n\t\t\t// copy input/output information to locals (UPDATE macro restores)\n\t\t\t// {\n\t\t\tp = z.next_in_index;\n\t\t\tn = z.avail_in;\n\t\t\tb = that.bitb;\n\t\t\tk = that.bitk;\n\t\t\t// }\n\t\t\t// {\n\t\t\tq = that.write;\n\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t// }\n\n\t\t\t// process input based on current state\n\t\t\t// DEBUG dtree\n\t\t\twhile (true) {\n\t\t\t\tswitch (mode) {\n\t\t\t\tcase TYPE:\n\n\t\t\t\t\twhile (k < (3)) {\n\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\t\t\t\t\tt = /* (int) */(b & 7);\n\t\t\t\t\tlast = t & 1;\n\n\t\t\t\t\tswitch (t >>> 1) {\n\t\t\t\t\tcase 0: // stored\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tt = k & 7; // go to byte boundary\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (t);\n\t\t\t\t\t\tk -= (t);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tmode = LENS; // get length of stored block\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1: // fixed\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tvar bl = []; // new Array(1);\n\t\t\t\t\t\tvar bd = []; // new Array(1);\n\t\t\t\t\t\tvar tl = [ [] ]; // new Array(1);\n\t\t\t\t\t\tvar td = [ [] ]; // new Array(1);\n\n\t\t\t\t\t\tInfTree.inflate_trees_fixed(bl, bd, tl, td);\n\t\t\t\t\t\tcodes.init(bl[0], bd[0], tl[0], 0, td[0], 0);\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\tmode = CODES;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2: // dynamic\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\tmode = TABLE;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3: // illegal\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\tz.msg = "invalid block type";\n\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase LENS:\n\n\t\t\t\t\twhile (k < (32)) {\n\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((((~b) >>> 16) & 0xffff) != (b & 0xffff)) {\n\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\tz.msg = "invalid stored block lengths";\n\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tleft = (b & 0xffff);\n\t\t\t\t\tb = k = 0; // dump bits\n\t\t\t\t\tmode = left !== 0 ? STORED : (last !== 0 ? DRY : TYPE);\n\t\t\t\t\tbreak;\n\t\t\t\tcase STORED:\n\t\t\t\t\tif (n === 0) {\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\tif (q == that.end && that.read !== 0) {\n\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\tr = that.inflate_flush(z, r);\n\t\t\t\t\t\t\tq = that.write;\n\t\t\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\t\t\tif (q == that.end && that.read !== 0) {\n\t\t\t\t\t\t\t\tq = 0;\n\t\t\t\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (m === 0) {\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tr = Z_OK;\n\n\t\t\t\t\tt = left;\n\t\t\t\t\tif (t > n)\n\t\t\t\t\t\tt = n;\n\t\t\t\t\tif (t > m)\n\t\t\t\t\t\tt = m;\n\t\t\t\t\tthat.window.set(z.read_buf(p, t), q);\n\t\t\t\t\tp += t;\n\t\t\t\t\tn -= t;\n\t\t\t\t\tq += t;\n\t\t\t\t\tm -= t;\n\t\t\t\t\tif ((left -= t) !== 0)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tmode = last !== 0 ? DRY : TYPE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase TABLE:\n\n\t\t\t\t\twhile (k < (14)) {\n\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tn--;\n\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\tk += 8;\n\t\t\t\t\t}\n\n\t\t\t\t\ttable = t = (b & 0x3fff);\n\t\t\t\t\tif ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29) {\n\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\tz.msg = "too many length or distance symbols";\n\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tt = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);\n\t\t\t\t\tif (!blens || blens.length < t) {\n\t\t\t\t\t\tblens = []; // new Array(t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (i = 0; i < t; i++) {\n\t\t\t\t\t\t\tblens[i] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// {\n\t\t\t\t\tb >>>= (14);\n\t\t\t\t\tk -= (14);\n\t\t\t\t\t// }\n\n\t\t\t\t\tindex = 0;\n\t\t\t\t\tmode = BTREE;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase BTREE:\n\t\t\t\t\twhile (index < 4 + (table >>> 10)) {\n\t\t\t\t\t\twhile (k < (3)) {\n\t\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tblens[border[index++]] = b & 7;\n\n\t\t\t\t\t\t// {\n\t\t\t\t\t\tb >>>= (3);\n\t\t\t\t\t\tk -= (3);\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\n\t\t\t\t\twhile (index < 19) {\n\t\t\t\t\t\tblens[border[index++]] = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbb[0] = 7;\n\t\t\t\t\tt = inftree.inflate_trees_bits(blens, bb, tb, hufts, z);\n\t\t\t\t\tif (t != Z_OK) {\n\t\t\t\t\t\tr = t;\n\t\t\t\t\t\tif (r == Z_DATA_ERROR) {\n\t\t\t\t\t\t\tblens = null;\n\t\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\n\t\t\t\t\tindex = 0;\n\t\t\t\t\tmode = DTREE;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DTREE:\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tt = table;\n\t\t\t\t\t\tif (index >= 258 + (t & 0x1f) + ((t >> 5) & 0x1f)) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar j, c;\n\n\t\t\t\t\t\tt = bb[0];\n\n\t\t\t\t\t\twhile (k < (t)) {\n\t\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if (tb[0] == -1) {\n\t\t\t\t\t\t// System.err.println("null...");\n\t\t\t\t\t\t// }\n\n\t\t\t\t\t\tt = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 1];\n\t\t\t\t\t\tc = hufts[(tb[0] + (b & inflate_mask[t])) * 3 + 2];\n\n\t\t\t\t\t\tif (c < 16) {\n\t\t\t\t\t\t\tb >>>= (t);\n\t\t\t\t\t\t\tk -= (t);\n\t\t\t\t\t\t\tblens[index++] = c;\n\t\t\t\t\t\t} else { // c == 16..18\n\t\t\t\t\t\t\ti = c == 18 ? 7 : c - 14;\n\t\t\t\t\t\t\tj = c == 18 ? 11 : 3;\n\n\t\t\t\t\t\t\twhile (k < (t + i)) {\n\t\t\t\t\t\t\t\tif (n !== 0) {\n\t\t\t\t\t\t\t\t\tr = Z_OK;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tn--;\n\t\t\t\t\t\t\t\tb |= (z.read_byte(p++) & 0xff) << k;\n\t\t\t\t\t\t\t\tk += 8;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tb >>>= (t);\n\t\t\t\t\t\t\tk -= (t);\n\n\t\t\t\t\t\t\tj += (b & inflate_mask[i]);\n\n\t\t\t\t\t\t\tb >>>= (i);\n\t\t\t\t\t\t\tk -= (i);\n\n\t\t\t\t\t\t\ti = index;\n\t\t\t\t\t\t\tt = table;\n\t\t\t\t\t\t\tif (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) || (c == 16 && i < 1)) {\n\t\t\t\t\t\t\t\tblens = null;\n\t\t\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\t\t\tz.msg = "invalid bit length repeat";\n\t\t\t\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tc = c == 16 ? blens[i - 1] : 0;\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\tblens[i++] = c;\n\t\t\t\t\t\t\t} while (--j !== 0);\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\ttb[0] = -1;\n\t\t\t\t\t// {\n\t\t\t\t\tvar bl_ = []; // new Array(1);\n\t\t\t\t\tvar bd_ = []; // new Array(1);\n\t\t\t\t\tvar tl_ = []; // new Array(1);\n\t\t\t\t\tvar td_ = []; // new Array(1);\n\t\t\t\t\tbl_[0] = 9; // must be <= 9 for lookahead assumptions\n\t\t\t\t\tbd_[0] = 6; // must be <= 9 for lookahead assumptions\n\n\t\t\t\t\tt = table;\n\t\t\t\t\tt = inftree.inflate_trees_dynamic(257 + (t & 0x1f), 1 + ((t >> 5) & 0x1f), blens, bl_, bd_, tl_, td_, hufts, z);\n\n\t\t\t\t\tif (t != Z_OK) {\n\t\t\t\t\t\tif (t == Z_DATA_ERROR) {\n\t\t\t\t\t\t\tblens = null;\n\t\t\t\t\t\t\tmode = BADBLOCKS;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr = t;\n\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tcodes.init(bl_[0], bd_[0], hufts, tl_[0], hufts, td_[0]);\n\t\t\t\t\t// }\n\t\t\t\t\tmode = CODES;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase CODES:\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\n\t\t\t\t\tif ((r = codes.proc(that, z, r)) != Z_STREAM_END) {\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tr = Z_OK;\n\t\t\t\t\tcodes.free(z);\n\n\t\t\t\t\tp = z.next_in_index;\n\t\t\t\t\tn = z.avail_in;\n\t\t\t\t\tb = that.bitb;\n\t\t\t\t\tk = that.bitk;\n\t\t\t\t\tq = that.write;\n\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\n\t\t\t\t\tif (last === 0) {\n\t\t\t\t\t\tmode = TYPE;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tmode = DRY;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DRY:\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\tr = that.inflate_flush(z, r);\n\t\t\t\t\tq = that.write;\n\t\t\t\t\tm = /* (int) */(q < that.read ? that.read - q - 1 : that.end - q);\n\t\t\t\t\tif (that.read != that.write) {\n\t\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\t\tthat.write = q;\n\t\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t\t}\n\t\t\t\t\tmode = DONELOCKS;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DONELOCKS:\n\t\t\t\t\tr = Z_STREAM_END;\n\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\tcase BADBLOCKS:\n\t\t\t\t\tr = Z_DATA_ERROR;\n\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\treturn that.inflate_flush(z, r);\n\n\t\t\t\tdefault:\n\t\t\t\t\tr = Z_STREAM_ERROR;\n\n\t\t\t\t\tthat.bitb = b;\n\t\t\t\t\tthat.bitk = k;\n\t\t\t\t\tz.avail_in = n;\n\t\t\t\t\tz.total_in += p - z.next_in_index;\n\t\t\t\t\tz.next_in_index = p;\n\t\t\t\t\tthat.write = q;\n\t\t\t\t\treturn that.inflate_flush(z, r);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthat.free = function(z) {\n\t\t\tthat.reset(z, null);\n\t\t\tthat.window = null;\n\t\t\thufts = null;\n\t\t\t// ZFREE(z, s);\n\t\t};\n\n\t\tthat.set_dictionary = function(d, start, n) {\n\t\t\tthat.window.set(d.subarray(start, start + n), 0);\n\t\t\tthat.read = that.write = n;\n\t\t};\n\n\t\t// Returns true if inflate is currently at the end of a block generated\n\t\t// by Z_SYNC_FLUSH or Z_FULL_FLUSH.\n\t\tthat.sync_point = function() {\n\t\t\treturn mode == LENS ? 1 : 0;\n\t\t};\n\n\t}\n\n\t// Inflate\n\n\t// preset dictionary flag in zlib header\n\tvar PRESET_DICT = 0x20;\n\n\tvar Z_DEFLATED = 8;\n\n\tvar METHOD = 0; // waiting for method byte\n\tvar FLAG = 1; // waiting for flag byte\n\tvar DICT4 = 2; // four dictionary check bytes to go\n\tvar DICT3 = 3; // three dictionary check bytes to go\n\tvar DICT2 = 4; // two dictionary check bytes to go\n\tvar DICT1 = 5; // one dictionary check byte to go\n\tvar DICT0 = 6; // waiting for inflateSetDictionary\n\tvar BLOCKS = 7; // decompressing blocks\n\tvar DONE = 12; // finished check, done\n\tvar BAD = 13; // got an error--stay here\n\n\tvar mark = [ 0, 0, 0xff, 0xff ];\n\n\tfunction Inflate() {\n\t\tvar that = this;\n\n\t\tthat.mode = 0; // current inflate mode\n\n\t\t// mode dependent information\n\t\tthat.method = 0; // if FLAGS, method byte\n\n\t\t// if CHECK, check values to compare\n\t\tthat.was = [ 0 ]; // new Array(1); // computed check value\n\t\tthat.need = 0; // stream check value\n\n\t\t// if BAD, inflateSync\'s marker bytes count\n\t\tthat.marker = 0;\n\n\t\t// mode independent information\n\t\tthat.wbits = 0; // log2(window size) (8..15, defaults to 15)\n\n\t\t// this.blocks; // current inflate_blocks state\n\n\t\tfunction inflateReset(z) {\n\t\t\tif (!z || !z.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\n\t\t\tz.total_in = z.total_out = 0;\n\t\t\tz.msg = null;\n\t\t\tz.istate.mode = BLOCKS;\n\t\t\tz.istate.blocks.reset(z, null);\n\t\t\treturn Z_OK;\n\t\t}\n\n\t\tthat.inflateEnd = function(z) {\n\t\t\tif (that.blocks)\n\t\t\t\tthat.blocks.free(z);\n\t\t\tthat.blocks = null;\n\t\t\t// ZFREE(z, z->state);\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\tthat.inflateInit = function(z, w) {\n\t\t\tz.msg = null;\n\t\t\tthat.blocks = null;\n\n\t\t\t// set window size\n\t\t\tif (w < 8 || w > 15) {\n\t\t\t\tthat.inflateEnd(z);\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t}\n\t\t\tthat.wbits = w;\n\n\t\t\tz.istate.blocks = new InfBlocks(z, 1 << w);\n\n\t\t\t// reset state\n\t\t\tinflateReset(z);\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\tthat.inflate = function(z, f) {\n\t\t\tvar r;\n\t\t\tvar b;\n\n\t\t\tif (!z || !z.istate || !z.next_in)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\tf = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;\n\t\t\tr = Z_BUF_ERROR;\n\t\t\twhile (true) {\n\t\t\t\t// System.out.println("mode: "+z.istate.mode);\n\t\t\t\tswitch (z.istate.mode) {\n\t\t\t\tcase METHOD:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tif (((z.istate.method = z.read_byte(z.next_in_index++)) & 0xf) != Z_DEFLATED) {\n\t\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\t\tz.msg = "unknown compression method";\n\t\t\t\t\t\tz.istate.marker = 5; // can\'t try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif ((z.istate.method >> 4) + 8 > z.istate.wbits) {\n\t\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\t\tz.msg = "invalid window size";\n\t\t\t\t\t\tz.istate.marker = 5; // can\'t try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tz.istate.mode = FLAG;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase FLAG:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tb = (z.read_byte(z.next_in_index++)) & 0xff;\n\n\t\t\t\t\tif ((((z.istate.method << 8) + b) % 31) !== 0) {\n\t\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\t\tz.msg = "incorrect header check";\n\t\t\t\t\t\tz.istate.marker = 5; // can\'t try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ((b & PRESET_DICT) === 0) {\n\t\t\t\t\t\tz.istate.mode = BLOCKS;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tz.istate.mode = DICT4;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DICT4:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tz.istate.need = ((z.read_byte(z.next_in_index++) & 0xff) << 24) & 0xff000000;\n\t\t\t\t\tz.istate.mode = DICT3;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DICT3:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tz.istate.need += ((z.read_byte(z.next_in_index++) & 0xff) << 16) & 0xff0000;\n\t\t\t\t\tz.istate.mode = DICT2;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DICT2:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tz.istate.need += ((z.read_byte(z.next_in_index++) & 0xff) << 8) & 0xff00;\n\t\t\t\t\tz.istate.mode = DICT1;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DICT1:\n\n\t\t\t\t\tif (z.avail_in === 0)\n\t\t\t\t\t\treturn r;\n\t\t\t\t\tr = f;\n\n\t\t\t\t\tz.avail_in--;\n\t\t\t\t\tz.total_in++;\n\t\t\t\t\tz.istate.need += (z.read_byte(z.next_in_index++) & 0xff);\n\t\t\t\t\tz.istate.mode = DICT0;\n\t\t\t\t\treturn Z_NEED_DICT;\n\t\t\t\tcase DICT0:\n\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\tz.msg = "need dictionary";\n\t\t\t\t\tz.istate.marker = 0; // can try inflateSync\n\t\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t\tcase BLOCKS:\n\n\t\t\t\t\tr = z.istate.blocks.proc(z, r);\n\t\t\t\t\tif (r == Z_DATA_ERROR) {\n\t\t\t\t\t\tz.istate.mode = BAD;\n\t\t\t\t\t\tz.istate.marker = 0; // can try inflateSync\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (r == Z_OK) {\n\t\t\t\t\t\tr = f;\n\t\t\t\t\t}\n\t\t\t\t\tif (r != Z_STREAM_END) {\n\t\t\t\t\t\treturn r;\n\t\t\t\t\t}\n\t\t\t\t\tr = f;\n\t\t\t\t\tz.istate.blocks.reset(z, z.istate.was);\n\t\t\t\t\tz.istate.mode = DONE;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase DONE:\n\t\t\t\t\treturn Z_STREAM_END;\n\t\t\t\tcase BAD:\n\t\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t\tdefault:\n\t\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthat.inflateSetDictionary = function(z, dictionary, dictLength) {\n\t\t\tvar index = 0;\n\t\t\tvar length = dictLength;\n\t\t\tif (!z || !z.istate || z.istate.mode != DICT0)\n\t\t\t\treturn Z_STREAM_ERROR;\n\n\t\t\tif (length >= (1 << z.istate.wbits)) {\n\t\t\t\tlength = (1 << z.istate.wbits) - 1;\n\t\t\t\tindex = dictLength - length;\n\t\t\t}\n\t\t\tz.istate.blocks.set_dictionary(dictionary, index, length);\n\t\t\tz.istate.mode = BLOCKS;\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\tthat.inflateSync = function(z) {\n\t\t\tvar n; // number of bytes to look at\n\t\t\tvar p; // pointer to bytes\n\t\t\tvar m; // number of marker bytes found in a row\n\t\t\tvar r, w; // temporaries to save total_in and total_out\n\n\t\t\t// set up\n\t\t\tif (!z || !z.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\tif (z.istate.mode != BAD) {\n\t\t\t\tz.istate.mode = BAD;\n\t\t\t\tz.istate.marker = 0;\n\t\t\t}\n\t\t\tif ((n = z.avail_in) === 0)\n\t\t\t\treturn Z_BUF_ERROR;\n\t\t\tp = z.next_in_index;\n\t\t\tm = z.istate.marker;\n\n\t\t\t// search\n\t\t\twhile (n !== 0 && m < 4) {\n\t\t\t\tif (z.read_byte(p) == mark[m]) {\n\t\t\t\t\tm++;\n\t\t\t\t} else if (z.read_byte(p) !== 0) {\n\t\t\t\t\tm = 0;\n\t\t\t\t} else {\n\t\t\t\t\tm = 4 - m;\n\t\t\t\t}\n\t\t\t\tp++;\n\t\t\t\tn--;\n\t\t\t}\n\n\t\t\t// restore\n\t\t\tz.total_in += p - z.next_in_index;\n\t\t\tz.next_in_index = p;\n\t\t\tz.avail_in = n;\n\t\t\tz.istate.marker = m;\n\n\t\t\t// return no joy or set up to restart on a new block\n\t\t\tif (m != 4) {\n\t\t\t\treturn Z_DATA_ERROR;\n\t\t\t}\n\t\t\tr = z.total_in;\n\t\t\tw = z.total_out;\n\t\t\tinflateReset(z);\n\t\t\tz.total_in = r;\n\t\t\tz.total_out = w;\n\t\t\tz.istate.mode = BLOCKS;\n\t\t\treturn Z_OK;\n\t\t};\n\n\t\t// Returns true if inflate is currently at the end of a block generated\n\t\t// by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\n\t\t// implementation to provide an additional safety check. PPP uses\n\t\t// Z_SYNC_FLUSH\n\t\t// but removes the length bytes of the resulting empty stored block. When\n\t\t// decompressing, PPP checks that at the end of input packet, inflate is\n\t\t// waiting for these length bytes.\n\t\tthat.inflateSyncPoint = function(z) {\n\t\t\tif (!z || !z.istate || !z.istate.blocks)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn z.istate.blocks.sync_point();\n\t\t};\n\t}\n\n\t// ZStream\n\n\tfunction ZStream() {\n\t}\n\n\tZStream.prototype = {\n\t\tinflateInit : function(bits) {\n\t\t\tvar that = this;\n\t\t\tthat.istate = new Inflate();\n\t\t\tif (!bits)\n\t\t\t\tbits = MAX_BITS;\n\t\t\treturn that.istate.inflateInit(that, bits);\n\t\t},\n\n\t\tinflate : function(f) {\n\t\t\tvar that = this;\n\t\t\tif (!that.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.istate.inflate(that, f);\n\t\t},\n\n\t\tinflateEnd : function() {\n\t\t\tvar that = this;\n\t\t\tif (!that.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\tvar ret = that.istate.inflateEnd(that);\n\t\t\tthat.istate = null;\n\t\t\treturn ret;\n\t\t},\n\n\t\tinflateSync : function() {\n\t\t\tvar that = this;\n\t\t\tif (!that.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.istate.inflateSync(that);\n\t\t},\n\t\tinflateSetDictionary : function(dictionary, dictLength) {\n\t\t\tvar that = this;\n\t\t\tif (!that.istate)\n\t\t\t\treturn Z_STREAM_ERROR;\n\t\t\treturn that.istate.inflateSetDictionary(that, dictionary, dictLength);\n\t\t},\n\t\tread_byte : function(start) {\n\t\t\tvar that = this;\n\t\t\treturn that.next_in.subarray(start, start + 1)[0];\n\t\t},\n\t\tread_buf : function(start, size) {\n\t\t\tvar that = this;\n\t\t\treturn that.next_in.subarray(start, start + size);\n\t\t}\n\t};\n\n\t// Inflater\n\n\tfunction Inflater() {\n\t\tvar that = this;\n\t\tvar z = new ZStream();\n\t\tvar bufsize = 512;\n\t\tvar flush = Z_NO_FLUSH;\n\t\tvar buf = new Uint8Array(bufsize);\n\t\tvar nomoreinput = false;\n\n\t\tz.inflateInit();\n\t\tz.next_out = buf;\n\n\t\tthat.append = function(data, onprogress) {\n\t\t\tvar err, buffers = [], lastIndex = 0, bufferIndex = 0, bufferSize = 0, array;\n\t\t\tif (data.length === 0)\n\t\t\t\treturn;\n\t\t\tz.next_in_index = 0;\n\t\t\tz.next_in = data;\n\t\t\tz.avail_in = data.length;\n\t\t\tdo {\n\t\t\t\tz.next_out_index = 0;\n\t\t\t\tz.avail_out = bufsize;\n\t\t\t\tif ((z.avail_in === 0) && (!nomoreinput)) { // if buffer is empty and more input is available, refill it\n\t\t\t\t\tz.next_in_index = 0;\n\t\t\t\t\tnomoreinput = true;\n\t\t\t\t}\n\t\t\t\terr = z.inflate(flush);\n\t\t\t\tif (nomoreinput && (err === Z_BUF_ERROR)) {\n\t\t\t\t\tif (z.avail_in !== 0)\n\t\t\t\t\t\tthrow new Error("inflating: bad input");\n\t\t\t\t} else if (err !== Z_OK && err !== Z_STREAM_END)\n\t\t\t\t\tthrow new Error("inflating: " + z.msg);\n\t\t\t\tif ((nomoreinput || err === Z_STREAM_END) && (z.avail_in === data.length))\n\t\t\t\t\tthrow new Error("inflating: bad input");\n\t\t\t\tif (z.next_out_index)\n\t\t\t\t\tif (z.next_out_index === bufsize)\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf));\n\t\t\t\t\telse\n\t\t\t\t\t\tbuffers.push(new Uint8Array(buf.subarray(0, z.next_out_index)));\n\t\t\t\tbufferSize += z.next_out_index;\n\t\t\t\tif (onprogress && z.next_in_index > 0 && z.next_in_index != lastIndex) {\n\t\t\t\t\tonprogress(z.next_in_index);\n\t\t\t\t\tlastIndex = z.next_in_index;\n\t\t\t\t}\n\t\t\t} while (z.avail_in > 0 || z.avail_out === 0);\n\t\t\tarray = new Uint8Array(bufferSize);\n\t\t\tbuffers.forEach(function(chunk) {\n\t\t\t\tarray.set(chunk, bufferIndex);\n\t\t\t\tbufferIndex += chunk.length;\n\t\t\t});\n\t\t\treturn array;\n\t\t};\n\t\tthat.flush = function() {\n\t\t\tz.inflateEnd();\n\t\t};\n\t}\n\n\t// \'zip\' may not be defined in z-worker and some tests\n\tvar env = global.zip || global;\n\tenv.Inflater = env._jzlib_Inflater = Inflater;\n})(this);\n')]},n.exports=r},{zip:4}],4:[function(t,e,r){(function(t){(function(t,n,e,r,i){!function(t){"use strict";var n,e="File format is not recognized.",r="CRC failed.",i="File contains encrypted entry.",a="File is using Zip64 (4gb+ file size).",o="Error while reading zip file.",s="Error while writing zip file.",l="Error while writing file data.",u="Error while reading file data.",c="File already exists.",f=524288,h="text/plain";try{n=0===new Blob([new DataView(new ArrayBuffer(0))]).size}catch(t){}function d(){this.crc=-1}function _(){}function b(t,n){var e,r;return e=new ArrayBuffer(t),r=new Uint8Array(e),n&&r.set(n,0),{buffer:e,array:r,view:new DataView(e)}}function m(){}function p(t){var n,e=this;e.size=0,e.init=function(r,i){var a=new Blob([t],{type:h});(n=new g(a)).init(function(){e.size=n.size,r()},i)},e.readUint8Array=function(t,e,r,i){n.readUint8Array(t,e,r,i)}}function v(n){var e,r=this;r.size=0,r.init=function(t){for(var i=n.length;"="==n.charAt(i-1);)i--;e=n.indexOf(",")+1,r.size=Math.floor(.75*(i-e)),t()},r.readUint8Array=function(r,i,a){var o,s=b(i),l=4*Math.floor(r/3),u=4*Math.ceil((r+i)/3),c=t.atob(n.substring(l+e,u+e)),f=r-3*Math.floor(l/4);for(o=f;o<f+i;o++)s.array[o-f]=c.charCodeAt(o);a(s.array)}}function g(t){var n=this;n.size=0,n.init=function(e){n.size=t.size,e()},n.readUint8Array=function(n,e,r,i){var a=new FileReader;a.onload=function(t){r(new Uint8Array(t.target.result))},a.onerror=i;try{a.readAsArrayBuffer(function(t,n,e){if(n<0||e<0||n+e>t.size)throw new RangeError("offset:"+n+", length:"+e+", size:"+t.size);return t.slice?t.slice(n,n+e):t.webkitSlice?t.webkitSlice(n,n+e):t.mozSlice?t.mozSlice(n,n+e):t.msSlice?t.msSlice(n,n+e):void 0}(t,n,e))}catch(t){i(t)}}}function w(){}function x(t){var e;this.init=function(t){e=new Blob([],{type:h}),t()},this.writeUint8Array=function(t,r){e=new Blob([e,n?t:t.buffer],{type:h}),r()},this.getData=function(n,r){var i=new FileReader;i.onload=function(t){n(t.target.result)},i.onerror=r,i.readAsText(e,t)}}function y(n){var e="",r="";this.init=function(t){e+="data:"+(n||"")+";base64,",t()},this.writeUint8Array=function(n,i){var a,o=r.length,s=r;for(r="",a=0;a<3*Math.floor((o+n.length)/3)-o;a++)s+=String.fromCharCode(n[a]);for(;a<n.length;a++)r+=String.fromCharCode(n[a]);s.length>2?e+=t.btoa(s):r=s,i()},this.getData=function(n){n(e+t.btoa(r))}}function M(t){var e;this.init=function(n){e=new Blob([],{type:t}),n()},this.writeUint8Array=function(r,i){e=new Blob([e,n?r:r.buffer],{type:t}),i()},this.getData=function(t){t(e)}}function E(t,n,e,r,i,a,o,s,l,u){var c,h,d,_=0,b=n.sn;function m(){t.removeEventListener("message",p,!1),s(h,d)}function p(n){var e=n.data,i=e.data,s=e.error;if(s)return s.toString=function(){return"Error: "+this.message},void l(s);if(e.sn===b)switch("number"==typeof e.codecTime&&(t.codecTime+=e.codecTime),"number"==typeof e.crcTime&&(t.crcTime+=e.crcTime),e.type){case"append":i?(h+=i.length,r.writeUint8Array(i,function(){v()},u)):v();break;case"flush":d=e.crc,i?(h+=i.length,r.writeUint8Array(i,function(){m()},u)):m();break;case"progress":o&&o(c+e.loaded,a);break;case"importScripts":case"newTask":case"echo":break;default:console.warn("zip.js:launchWorkerProcess: unknown message: ",e)}}function v(){(c=_*f)<=a?e.readUint8Array(i+c,Math.min(f,a-c),function(e){o&&o(c,a);var r=0===c?n:{sn:b};r.type="append",r.data=e;try{t.postMessage(r,[e.buffer])}catch(n){t.postMessage(r)}_++},l):t.postMessage({sn:b,type:"flush"})}h=0,t.addEventListener("message",p,!1),v()}function T(t,n,e,r,i,a,o,s,l,u){var c,h=0,_=0,b="input"===a,m="output"===a,p=new d;!function a(){var d;if((c=h*f)<i)n.readUint8Array(r+c,Math.min(f,i-c),function(n){var r;try{r=t.append(n,function(t){o&&o(c+t,i)})}catch(t){return void l(t)}r?(_+=r.length,e.writeUint8Array(r,function(){h++,setTimeout(a,1)},u),m&&p.append(r)):(h++,setTimeout(a,1)),b&&p.append(n),o&&o(c,i)},l);else{try{d=t.flush()}catch(t){return void l(t)}d?(m&&p.append(d),_+=d.length,e.writeUint8Array(d,function(){s(_,p.get())},u)):s(_,p.get())}}()}function A(n,e,r,i,a,o,s,l,u,c,f){if(t.zip.useWebWorkers&&s){var h={sn:e,codecClass:"NOOP",crcType:"input"};E(n,h,r,i,a,o,u,l,c,f)}else T(new _,r,i,a,o,"input",u,l,c,f)}function z(t){var n,e,r="",i=["Ç","ü","é","â","ä","à","å","ç","ê","ë","è","ï","î","ì","Ä","Å","É","æ","Æ","ô","ö","ò","û","ù","ÿ","Ö","Ü","ø","£","Ø","×","ƒ","á","í","ó","ú","ñ","Ñ","ª","º","¿","®","¬","½","¼","¡","«","»","_","_","_","¦","¦","Á","Â","À","©","¦","¦","+","+","¢","¥","+","+","-","-","+","-","+","ã","Ã","+","+","-","-","¦","-","+","¤","ð","Ð","Ê","Ë","È","i","Í","Î","Ï","+","+","_","_","¦","Ì","_","Ó","ß","Ô","Ò","õ","Õ","µ","þ","Þ","Ú","Û","Ù","ý","Ý","¯","´","­","±","_","¾","¶","§","÷","¸","°","¨","·","¹","³","²","_"," "];for(n=0;n<t.length;n++)e=255&t.charCodeAt(n),r+=e>127?i[e-128]:String.fromCharCode(e);return r}function S(t){return decodeURIComponent(escape(t))}function R(t){var n,e="";for(n=0;n<t.length;n++)e+=String.fromCharCode(t[n]);return e}function k(t,n,e,r,o){t.version=n.view.getUint16(e,!0),t.bitFlag=n.view.getUint16(e+2,!0),t.compressionMethod=n.view.getUint16(e+4,!0),t.lastModDateRaw=n.view.getUint32(e+6,!0),t.lastModDate=function(t){var n=(4294901760&t)>>16,e=65535&t;try{return new Date(1980+((65024&n)>>9),((480&n)>>5)-1,31&n,(63488&e)>>11,(2016&e)>>5,2*(31&e),0)}catch(t){}}(t.lastModDateRaw),1!=(1&t.bitFlag)?((r||8!=(8&t.bitFlag))&&(t.crc32=n.view.getUint32(e+10,!0),t.compressedSize=n.view.getUint32(e+14,!0),t.uncompressedSize=n.view.getUint32(e+18,!0)),4294967295!==t.compressedSize&&4294967295!==t.uncompressedSize?(t.filenameLength=n.view.getUint16(e+22,!0),t.extraFieldLength=n.view.getUint16(e+24,!0)):o(a)):o(i)}function I(n,i,a){var s=0;function c(){}c.prototype.getData=function(i,o,c,f){var h=this;function d(t,n){f&&!function(t){var n=b(4);return n.view.setUint32(0,t),h.crc32==n.view.getUint32(0)}(n)?a(r):i.getData(function(t){o(t)})}function _(t){a(t||u)}function m(t){a(t||l)}n.readUint8Array(h.offset,30,function(r){var o,l=b(r.length,r);1347093252==l.view.getUint32(0)?(k(h,l,4,!1,a),o=h.offset+30+h.filenameLength+h.extraFieldLength,i.init(function(){0===h.compressionMethod?A(h._worker,s++,n,i,o,h.compressedSize,f,d,c,_,m):function(n,e,r,i,a,o,s,l,u,c,f){var h=s?"output":"none";if(t.zip.useWebWorkers){var d={sn:e,codecClass:"Inflater",crcType:h};E(n,d,r,i,a,o,u,l,c,f)}else T(new t.zip.Inflater,r,i,a,o,h,u,l,c,f)}(h._worker,s++,n,i,o,h.compressedSize,f,d,c,_,m)},m)):a(e)},_)};var f={getEntries:function(t){var r=this._worker;!function(t){var r=22;if(n.size<r)a(e);else{var i=r+65536;s(r,function(){s(Math.min(i,n.size),function(){a(e)})})}function s(e,i){n.readUint8Array(n.size-e,e,function(n){for(var e=n.length-r;e>=0;e--)if(80===n[e]&&75===n[e+1]&&5===n[e+2]&&6===n[e+3])return void t(new DataView(n.buffer,e,r));i()},function(){a(o)})}}(function(i){var s,l;s=i.getUint32(16,!0),l=i.getUint16(8,!0),s<0||s>=n.size?a(e):n.readUint8Array(s,n.size-s,function(n){var i,o,s,u,f=0,h=[],d=b(n.length,n);for(i=0;i<l;i++){if((o=new c)._worker=r,1347092738!=d.view.getUint32(f))return void a(e);k(o,d,f+6,!0,a),o.commentLength=d.view.getUint16(f+32,!0),o.directory=16==(16&d.view.getUint8(f+38)),o.offset=d.view.getUint32(f+42,!0),s=R(d.array.subarray(f+46,f+46+o.filenameLength)),o.filename=2048==(2048&o.bitFlag)?S(s):z(s),o.directory||"/"!=o.filename.charAt(o.filename.length-1)||(o.directory=!0),u=R(d.array.subarray(f+46+o.filenameLength+o.extraFieldLength,f+46+o.filenameLength+o.extraFieldLength+o.commentLength)),o.comment=2048==(2048&o.bitFlag)?S(u):z(u),h.push(o),f+=46+o.filenameLength+o.extraFieldLength+o.commentLength}t(h)},function(){a(o)})})},close:function(t){this._worker&&(this._worker.terminate(),this._worker=null),t&&t()},_worker:null};t.zip.useWebWorkers?C("inflater",function(t){f._worker=t,i(f)},function(t){a(t)}):i(f)}function O(t){return unescape(encodeURIComponent(t))}function D(t){var n,e=[];for(n=0;n<t.length;n++)e.push(t.charCodeAt(n));return e}function L(n,e,r,i){var a={},o=[],l=0,f=0;function h(t){r(t||s)}function d(t){r(t||u)}var _={add:function(e,s,u,_,m){var p,v,g,w=this._worker;function x(t,e){var r=b(16);l+=t||0,r.view.setUint32(0,1347094280),void 0!==e&&(p.view.setUint32(10,e,!0),r.view.setUint32(4,e,!0)),s&&(r.view.setUint32(8,t,!0),p.view.setUint32(14,t,!0),r.view.setUint32(12,s.size,!0),p.view.setUint32(18,s.size,!0)),n.writeUint8Array(r.array,function(){l+=16,u()},h)}function y(){var u,y;m=m||{},e=e.trim(),m.directory&&"/"!=e.charAt(e.length-1)&&(e+="/"),a.hasOwnProperty(e)?r(c):(v=D(O(e)),o.push(e),u=function(){s?i||0===m.level?A(w,f++,s,n,0,s.size,!0,x,_,d,h):function(n,e,r,i,a,o,s,l,u){if(t.zip.useWebWorkers){var c={sn:e,options:{level:a},codecClass:"Deflater",crcType:"input"};E(n,c,r,i,0,r.size,s,o,l,u)}else T(new t.zip.Deflater,r,i,0,r.size,"input",s,o,l,u)}(w,f++,s,n,m.level,x,_,d,h):x()},g=m.lastModDate||new Date,p=b(26),a[e]={headerArray:p.array,directory:m.directory,filename:v,offset:l,comment:D(O(m.comment||""))},p.view.setUint32(0,335546376),m.version&&p.view.setUint8(0,m.version),i||0===m.level||m.directory||p.view.setUint16(4,2048),p.view.setUint16(6,(g.getHours()<<6|g.getMinutes())<<5|g.getSeconds()/2,!0),p.view.setUint16(8,(g.getFullYear()-1980<<4|g.getMonth()+1)<<5|g.getDate(),!0),p.view.setUint16(22,v.length,!0),(y=b(30+v.length)).view.setUint32(0,1347093252),y.array.set(p.array,4),y.array.set(v,30),l+=y.array.length,n.writeUint8Array(y.array,u,h))}s?s.init(y,d):y()},close:function(t){this._worker&&(this._worker.terminate(),this._worker=null);var e,r,i,s=0,u=0;for(r=0;r<o.length;r++)i=a[o[r]],s+=46+i.filename.length+i.comment.length;for(e=b(s+22),r=0;r<o.length;r++)i=a[o[r]],e.view.setUint32(u,1347092738),e.view.setUint16(u+4,5120),e.array.set(i.headerArray,u+6),e.view.setUint16(u+32,i.comment.length,!0),i.directory&&e.view.setUint8(u+38,16),e.view.setUint32(u+42,i.offset,!0),e.array.set(i.filename,u+46),e.array.set(i.comment,u+46+i.filename.length),u+=46+i.filename.length+i.comment.length;e.view.setUint32(u,1347093766),e.view.setUint16(u+8,o.length,!0),e.view.setUint16(u+10,o.length,!0),e.view.setUint32(u+12,s,!0),e.view.setUint32(u+16,l,!0),n.writeUint8Array(e.array,function(){n.getData(t)},h)},_worker:null};t.zip.useWebWorkers?C("deflater",function(t){_._worker=t,e(_)},function(t){r(t)}):e(_)}d.prototype.append=function(t){for(var n=0|this.crc,e=this.table,r=0,i=0|t.length;r<i;r++)n=n>>>8^e[255&(n^t[r])];this.crc=n},d.prototype.get=function(){return~this.crc},d.prototype.table=function(){var t,n,e,r=[];for(t=0;t<256;t++){for(e=t,n=0;n<8;n++)1&e?e=e>>>1^3988292384:e>>>=1;r[t]=e}return r}(),_.prototype.append=function(t,n){return t},_.prototype.flush=function(){},p.prototype=new m,p.prototype.constructor=p,v.prototype=new m,v.prototype.constructor=v,g.prototype=new m,g.prototype.constructor=g,w.prototype.getData=function(t){t(this.data)},x.prototype=new w,x.prototype.constructor=x,y.prototype=new w,y.prototype.constructor=y,M.prototype=new w,M.prototype.constructor=M;var N={deflater:["z-worker.js","deflate.js"],inflater:["z-worker.js","inflate.js"]};function C(n,e,r){if(null===t.zip.workerScripts||null===t.zip.workerScriptsPath){var i,a,o;if(t.zip.workerScripts){if(i=t.zip.workerScripts[n],!Array.isArray(i))return void r(new Error("zip.workerScripts."+n+" is not an array!"));a=i,o=document.createElement("a"),i=a.map(function(t){return o.href=t,o.href})}else(i=N[n].slice(0))[0]=(t.zip.workerScriptsPath||"")+i[0];var s=new Worker(i[0]);s.codecTime=s.crcTime=0,s.postMessage({type:"importScripts",scripts:i.slice(1)}),s.addEventListener("message",function t(n){var i=n.data;if(i.error)return s.terminate(),void r(i.error);"importScripts"===i.type&&(s.removeEventListener("message",t),s.removeEventListener("error",l),e(s))}),s.addEventListener("error",l)}else r(new Error("Either zip.workerScripts or zip.workerScriptsPath may be set, not both."));function l(t){s.terminate(),r(t)}}function F(t){console.error(t)}t.zip={Reader:m,Writer:w,BlobReader:g,Data64URIReader:v,TextReader:p,BlobWriter:M,Data64URIWriter:y,TextWriter:x,createReader:function(t,n,e){e=e||F,t.init(function(){I(t,n,e)},e)},createWriter:function(t,n,e,r){e=e||F,r=!!r,t.init(function(){L(t,n,e,r)},e)},useWebWorkers:!0,workerScriptsPath:null,workerScripts:null}}(this),i("undefined"!=typeof zip?zip:window.zip)}).call(t,void 0,void 0,void 0,void 0,function(t){e.exports=t})}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}]},{},[1])(1)}).call(this,e(17))},function(t,n,e){"use strict";var r=this&&this.__awaiter||function(t,n,e,r){return new(e||(e=Promise))(function(i,a){function o(t){try{l(r.next(t))}catch(t){a(t)}}function s(t){try{l(r.throw(t))}catch(t){a(t)}}function l(t){t.done?i(t.value):new e(function(n){n(t.value)}).then(o,s)}l((r=r.apply(t,n||[])).next())})};Object.defineProperty(n,"__esModule",{value:!0});const i=e(6),a=e(18),o=e(0),s=e(16),l=e(9),u="https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/";function c(t,n,e,i="glTF"){return r(this,void 0,void 0,function*(){const a=yield(yield fetch(u+"model-index.json")).json(),o=document.getElementById("sample-select");for(const t of a){if(!t.variants[i])continue;const n=new Option;n.value=h(t,"/",i),n.text=t.name,t.name===e&&(n.selected=!0),o.options.add(n)}o.onchange=function(){return r(this,void 0,void 0,function*(){const e=this.selectedOptions[0];_(n,u+e.value,t),history.pushState(e.value,void 0,`?model=${e.text}&variant=${i}`)})},window.onpopstate=(e=>r(this,void 0,void 0,function*(){const r=e.state;_(n,u+r,t)})),window.cycleModels=(e=>r(this,void 0,void 0,function*(){const r=document.getElementById("sample-select");for(const i of Array.from(r.options)){console.log(i.text);try{yield _(n,u+i.value,t)}catch(t){console.error(t)}void 0!==e&&(yield f(e))}}))})}function f(t){return new Promise(n=>setTimeout(n,t))}function h(t,n="/",e="glTF"){return`${n}${t.name}/${e}/${t.variants[e]}`}function d(t,n){return r(this,void 0,void 0,function*(){console.time("asset.getScene");const e=yield new s.Asset(t,n.context).getScene();console.timeEnd("asset.getScene"),n.scene=e})}function _(t,n,e){return r(this,void 0,void 0,function*(){try{console.time("GltfLoader.load");const r=yield t.load(n);console.timeEnd("GltfLoader.load"),d(r,e)}catch(t){if(console.error(t),"string"==typeof t)alert(t);else{const n=t.status?` (${t.status} ${t.statusText} ${t.url})`:"";alert("Error loading glTF"+n)}}})}function b(t){const n=new RegExp(`${t}=([^&]+)`),e=document.location.search.match(n);if(e)return e[1]}function m(){return r(this,void 0,void 0,function*(){o.Context.CONTEXT_ATTRIBUTES.depth=!0;const t=new o.Canvas("example-canvas"),n=t.context,e=new l.GltfRenderer;t.renderer=e;const s=new i.GltfLoader;let f;const h=b("model");if(h){const t=b("variant")||"glTF";f=`${u}${h}/${t}/${h}.${"glTF-Binary"===t?"glb":"gltf"}`,c(e,s,h,t)}else f=u+"DamagedHelmet/glTF/DamagedHelmet.gltf",c(e,s,"DamagedHelmet");!function(t,n){const e=document.getElementById("example-canvas"),i=document.getElementById("file-input"),o=new a(e,i);o.on("drop",({files:e})=>r(this,void 0,void 0,function*(){d(yield t.loadFromFiles(e),n)})),o.on("droperror",({message:t})=>{alert(`Error: ${t}`)})}(s,e),_(s,f,e),t.element.addEventListener("dblclick",()=>o.viewer.Fullscreen.toggle(t.element)),t.element.addEventListener("touchstart",()=>o.viewer.Fullscreen.toggle(t.element)),window.canvas=t,window.context=n,window.renderer=e})}"complete"===window.document.readyState?m():window.onload=m},function(t,n,e){e(2),t.exports=e(19)}])});
//# sourceMappingURL=gltf.js.map