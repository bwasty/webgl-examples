{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external \"gloperate\"","webpack:///../node_modules/gl-matrix/src/gl-matrix/common.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/mat2.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/mat2d.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/mat3.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/mat4.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/vec3.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/vec4.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/quat.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/quat2.js","webpack:///../node_modules/gl-matrix/src/gl-matrix/vec2.js","webpack:///./sky-triangle/cube.ts","webpack:///./sky-triangle/cube.frag","webpack:///./sky-triangle/cube.vert","webpack:///./sky-triangle/skytriangle.frag","webpack:///./sky-triangle/skytriangle.vert","webpack:///./sky-triangle/skytriangle.ts","webpack:///./sky-triangle/skybox.frag","webpack:///./sky-triangle/skybox.vert","webpack:///./sky-triangle/skybox.ts","webpack:///./sky-triangle/splitrenderer.ts","webpack:///./sky-triangle/example.ts"],"names":["root","factory","exports","module","require","define","amd","a","i","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","equals","b","abs","max","create","out","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","sin","cos","mat2_scale","v","v0","v1","fromRotation","fromScaling","str","frob","sqrt","pow","LDU","L","D","U","add","subtract","exactEquals","mat2_equals","multiplyScalar","multiplyScalarAndAdd","scale","mul","sub","mat2d_create","mat2d_clone","mat2d_copy","mat2d_identity","mat2d_fromValues","tx","ty","mat2d_set","mat2d_invert","aa","ab","ac","ad","atx","aty","mat2d_determinant","mat2d_multiply","a4","a5","b4","b5","mat2d_rotate","mat2d_scale","translate","mat2d_fromRotation","mat2d_fromScaling","fromTranslation","mat2d_str","mat2d_frob","mat2d_add","mat2d_subtract","mat2d_multiplyScalar","mat2d_multiplyScalarAndAdd","mat2d_exactEquals","mat2d_equals","mat2d_mul","mat2d_sub","mat3_create","fromMat4","mat3_clone","mat3_copy","mat3_fromValues","m02","m12","m20","m21","m22","mat3_set","mat3_identity","mat3_transpose","a01","a02","a12","mat3_invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","mat3_adjoint","mat3_determinant","mat3_multiply","b00","b02","b10","b12","b20","b22","mat3_translate","x","y","mat3_rotate","mat3_scale","mat3_fromTranslation","mat3_fromRotation","mat3_fromScaling","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","mat3_str","mat3_frob","mat3_add","mat3_subtract","mat3_multiplyScalar","mat3_multiplyScalarAndAdd","mat3_exactEquals","mat3_equals","a6","a7","a8","b6","b7","b8","mat3_mul","mat3_sub","mat4_create","mat4_clone","mat4_copy","mat4_fromValues","m03","m13","m23","m30","m31","m32","m33","mat4_set","mat4_identity","mat4_transpose","mat4_invert","mat4_adjoint","mat4_determinant","mat4_multiply","mat4_translate","mat4_scale","mat4_rotate","axis","t","len","rotateX","rotateY","rotateZ","mat4_fromTranslation","mat4_fromScaling","mat4_fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","mat4_fromQuat","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","mat4_str","mat4_frob","mat4_add","mat4_subtract","mat4_multiplyScalar","mat4_multiplyScalarAndAdd","mat4_exactEquals","mat4_equals","a9","a14","a15","b9","b13","b14","b15","mat4_mul","mat4_sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","min","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","vec3_dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","forEach","vec","stride","offset","count","fn","arg","length","vec4_create","vec4_clone","vec4_fromValues","vec4_copy","vec4_set","vec4_add","vec4_subtract","vec4_multiply","vec4_divide","vec4_ceil","vec4_floor","vec4_min","vec4_max","vec4_round","vec4_scale","vec4_scaleAndAdd","vec4_distance","vec4_squaredDistance","vec4_length","vec4_squaredLength","vec4_negate","vec4_inverse","vec4_normalize","vec4_dot","vec4_lerp","vec4_random","vectorScale","v2","v3","v4","s1","s2","vec4_transformMat4","vec4_transformQuat","ix","iy","iz","iw","vec4_str","vec4_exactEquals","vec4_equals","vec4_sub","vec4_mul","vec4_div","vec4_dist","vec4_sqrDist","vec4_len","vec4_sqrLen","vec4_forEach","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_invert","dot","invDot","conjugate","fromMat3","fRoot","fTrace","j","k","fromEuler","halfToRad","cx","cy","cz","quat_str","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","view","quat2_create","dq","quat2_clone","quat2_fromValues","w1","fromRotationTranslationValues","quat2_fromRotationTranslation","quat2_fromTranslation","quat2_fromRotation","quat2_fromMat4","outer","quat2_copy","quat2_identity","quat2_set","getReal","getDual","setReal","setDual","quat2_getTranslation","quat2_translate","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","quat2_rotateX","quat2_rotateY","quat2_rotateZ","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","quat2_add","quat2_multiply","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","quat2_mul","quat2_scale","quat2_dot","quat2_lerp","mt","quat2_invert","sqlen","quat2_squaredLength","quat2_conjugate","quat2_length","quat2_len","quat2_sqrLen","quat2_normalize","quat2_str","quat2_exactEquals","quat2_equals","vec2_create","vec2_clone","vec2_fromValues","vec2_copy","vec2_set","vec2_add","vec2_subtract","vec2_multiply","vec2_divide","vec2_ceil","vec2_floor","vec2_min","vec2_max","vec2_round","vec2_scale","vec2_scaleAndAdd","vec2_distance","vec2_squaredDistance","vec2_length","vec2_squaredLength","vec2_negate","vec2_inverse","vec2_normalize","vec2_dot","vec2_cross","vec2_lerp","vec2_random","transformMat2","transformMat2d","vec2_transformMat3","vec2_transformMat4","vec2_rotate","p0","p1","sinC","cosC","vec2_angle","len1","len2","vec2_str","vec2_exactEquals","vec2_equals","vec2_len","vec2_sub","vec2_mul","vec2_div","vec2_dist","vec2_sqrDist","vec2_sqrLen","vec2_forEach","gloperate","Cube","Geometry","[object Object]","context","identifier","super","undefined","this","constructor","vertexVBO","Buffer","indexBuffer","_buffers","push","indices","attribEnable","gl","FLOAT","bind","attribDisable","unbind","aVertex","valid","initialize","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","auxiliaries","assert","WebGLBuffer","data","VERTICES","STATIC_DRAW","INDICES","drawElements","TRIANGLE_STRIP","UNSIGNED_BYTE","Uint8Array","webgl_operate_1","SkyTriangle","camera","texture","_context","_camera","_texture","vert","Shader","VERTEX_SHADER","frag","FRAGMENT_SHADER","_program","Program","_uInverseViewProjection","uniform","_uEye","_uBackground","_triangle","NdcFillingTriangle","attribute","uninitialize","enable","CULL_FACE","cullFace","BACK","DEPTH_TEST","depthMask","depthFunc","LEQUAL","uniformMatrix4fv","GL_FALSE","viewProjectionInverse","uniform3fv","uniform1i","draw","LESS","disable","cube_1","Skybox","_uTransform","_cube","FRONT","viewProjection","gl_matrix_1","skybox_1","skytriangle_1","SplitRenderer","Renderer","_extensions","_rotate","speed","radians","performance","now","vec3","_altered","frameSize","_intermediateFBO","resize","_frameSize","viewport","canvasSize","_canvasSize","clearColor","_clearColor","reset","frameNumber","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","_cubeProgram","_uViewProjection","_uModel","_cubeMatrix1","_cubeMatrix2","SCISSOR_TEST","scissor","_skyBox","frame","_skyTriangle","_blit","invalidate","_cubeMap","TextureCube","internalFormatAndType","Wizard","queryInternalTextureFormat","RGB","Precision","byte","load","positiveX","negativeX","positiveY","negativeY","positiveZ","negativeZ","then","callback","mouseEventProvider","gl2facade","loadImages","_aCubeVertex","mat4","translate1","scale2","translate2","Camera","_defaultFBO","DefaultFramebuffer","_colorRenderTexture","Texture2","isWebGL2","RGBA8","RGBA","_depthRenderbuffer","Renderbuffer","DEPTH_COMPONENT16","Framebuffer","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","BlitPass","framebuffer","readBuffer","drawBuffer","splitrenderer_1","onload","canvas","Canvas","fromHex","renderer","document","readyState"],"mappings":"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","file":"sky-triangle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"gloperate\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"gloperate\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"gloperate\")) : factory(root[\"gloperate\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 42);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n","import * as glMatrix from \"./common.js\"\n\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nexport function fromValues(m00, m01, m10, m11) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    let a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n\n  // Calculate the determinant\n  let det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] =  a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] =  a0 * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  let a0 = a[0];\n  out[0] =  a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] =  a0;\n\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n}\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix\n * @param {mat2} D the diagonal matrix\n * @param {mat2} U the upper triangular matrix\n * @param {mat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2]/a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2x3 Matrix\n * @module mat2d\n *\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nexport function fromValues(a, b, c, d, tx, ty) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function invert(out, a) {\n  let aa = a[0], ab = a[1], ac = a[2], ad = a[3];\n  let atx = a[4], aty = a[5];\n\n  let det = aa * ad - ab * ac;\n  if(!det){\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nexport function translate(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}\n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n}\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b00 = b[0], b01 = b[1], b02 = b[2];\n  let b10 = b[3], b11 = b[4], b12 = b[5];\n  let b20 = b[6], b21 = b[7], b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n    x = v[0], y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nexport function normalFromMat4(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a03 = a[3];\n    let a12 = a[6], a13 = a[7];\n    let a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0]  = a[0];\n    out[1]  = a[1];\n    out[2]  = a[2];\n    out[3]  = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4]  = a[4];\n    out[5]  = a[5];\n    out[6]  = a[6];\n    out[7]  = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8]  = a[8];\n    out[9]  = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = 1;\n  out[1]  = 0;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = 0;\n  out[2]  = -s;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = s;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {quat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  let translation = new glMatrix.ARRAY_TYPE(3);\n  let bx = -a[0], by = -a[1], bz = -a[2], bw = a[3],\n  ax = a[4], ay = a[5], az = a[6], aw = a[7];\n\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  let trace = mat[0] + mat[5] + mat[10];\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  let ox = o[0];\n  let oy = o[1];\n  let oz = o[2];\n\n  let out0 = (1 - (yy + zz)) * sx;\n  let out1 = (xy + wz) * sx;\n  let out2 = (xz - wy) * sx;\n  let out4 = (xy - wz) * sy;\n  let out5 = (1 - (xx + zz)) * sy;\n  let out6 = (yz + wx) * sy;\n  let out8 = (xz + wy) * sz;\n  let out9 = (yz - wx) * sz;\n  let out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2);\n  let nf = 1 / (near - far);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (2 * far * near) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye[0];\n  let eyey = eye[1];\n  let eyez = eye[2];\n  let upx = up[0];\n  let upy = up[1];\n  let upz = up[2];\n  let centerx = center[0];\n  let centery = center[1];\n  let centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n\n  let z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n\n  let len = z0*z0 + z1*z1 + z2*z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n\n  len = x0*x0 + x1*x1 + x2*x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x*x + y*y + z*z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2];\n  let bx = b[0], by = b[1], bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  let factorTimes2 = t * t;\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\n  let factor2 = factorTimes2 * (t - 2) + t;\n  let factor3 = factorTimes2 * (t - 1);\n  let factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  let inverseFactor = 1 - t;\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  let factorTimes2 = t * t;\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\n  let factor2 = 3 * t * inverseFactorTimesTwo;\n  let factor3 = 3 * factorTimes2 * inverseFactor;\n  let factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\n  let zScale = Math.sqrt(1.0-z*z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let x = a[0], y = a[1], z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    let uvx = qy * z - qz * y,\n        uvy = qz * x - qx * z,\n        uvz = qx * y - qy * x;\n    // var uuv = vec3.cross([], qvec, uv);\n    let uuvx = qy * uvz - qz * uvy,\n        uuvy = qz * uvx - qx * uvz,\n        uuvz = qx * uvy - qy * uvx;\n    // vec3.scale(uv, uv, 2 * w);\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let tempA = fromValues(a[0], a[1], a[2]);\n  let tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  let cosine = dot(tempA, tempB);\n\n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2];\n  let b0 = b[0], b1 = b[1], b2 = b[2];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 3;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x*x + y*y + z*z + w*w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, vectorScale) {\n  vectorScale = vectorScale || 1.0;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  var v1, v2, v3, v4;\n  var s1, s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  let x = a[0], y = a[1], z = a[2];\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 4;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\"\nimport * as mat3 from \"./mat3.js\"\nimport * as vec3 from \"./vec3.js\"\nimport * as vec4 from \"./vec4.js\"\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  let rad = Math.acos(q[3]) * 2.0;\n  let s = Math.sin(rad / 2.0);\n  if (s != 0.0) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let by = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  let x = a[0], y = a[1], z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if ( cosom < 0.0 ) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ( (1.0 - cosom) > 0.000001 ) {\n    // standard case (slerp)\n    omega  = Math.acos(cosom);\n    sinom  = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\n  let invDot = dot ? 1.0/dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0*invDot;\n  out[1] = -a1*invDot;\n  out[2] = -a2*invDot;\n  out[3] = a3*invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if ( fTrace > 0.0 ) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5/fRoot;  // 1/(4w)\n    out[0] = (m[5]-m[7])*fRoot;\n    out[1] = (m[6]-m[2])*fRoot;\n    out[2] = (m[1]-m[3])*fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if ( m[4] > m[0] )\n      i = 1;\n    if ( m[8] > m[i*3+i] )\n      i = 2;\n    let j = (i+1)%3;\n    let k = (i+2)%3;\n\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z) {\n    let halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    let sx = Math.sin(x);\n    let cx = Math.cos(x);\n    let sy = Math.sin(y);\n    let cy = Math.cos(y);\n    let sz = Math.sin(z);\n    let cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const equals = vec4.equals;\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function() {\n  let tmpvec3 = vec3.create();\n  let xUnitVec3 = vec3.fromValues(1,0,0);\n  let yUnitVec3 = vec3.fromValues(0,1,0);\n\n  return function(out, a, b) {\n    let dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001)\n        vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  let temp1 = create();\n  let temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function() {\n  let matr = mat3.create();\n\n  return function(out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\nexport function create() {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = 0;\n  dq[1] = 0;\n  dq[2] = 0;\n  dq[3] = 1;\n  dq[4] = 0;\n  dq[5] = 0;\n  dq[6] = 0;\n  dq[7] = 0;\n  return dq;\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function clone(a) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  let ax = x2 * 0.5,\n    ay = y2 * 0.5,\n    az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q quaternion\n * @param {vec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotationTranslation(out, q, t) {\n  let ax = t[0] * 0.5,\n    ay = t[1] * 0.5,\n    az = t[2] * 0.5,\n    bx = q[0],\n    by = q[1],\n    bz = q[2],\n    bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Creates a dual quat from a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {vec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {mat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  let outer = quat.create();\n  mat4.getRotation(outer, a);\n  let t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} real part\n */\nexport const getReal = quat.copy;\n\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} dual part\n */\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\nexport const setReal = quat.copy;\n\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {quat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\nexport function getTranslation(out, a) {\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to translate\n * @param {vec3} v vector to translate by\n * @returns {quat2} out\n */\nexport function translate(out, a, v) {\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3],\n    bx1 = v[0] * 0.5,\n    by1 = v[1] * 0.5,\n    bz1 = v[2] * 0.5,\n    ax2 = a[4],\n    ay2 = a[5],\n    az2 = a[6],\n    aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateX(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateY(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateZ(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {quat} q quaternion to rotate by\n * @returns {quat2} out\n */\nexport function rotateByQuatAppend(out, a, q) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat} q quaternion to rotate by\n * @param {quat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\nexport function rotateByQuatPrepend(out, q, a) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    bx = a[0],\n    by = a[1],\n    bz = a[2],\n    bw = a[3];\n\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {vec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n  let axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  let bx = s * axis[0] / axisLength;\n  let by = s * axis[1] / axisLength;\n  let bz = s * axis[2] / axisLength;\n  let bw = Math.cos(rad);\n\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n\n  return out;\n}\n\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n * @function\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n */\nexport function multiply(out, a, b) {\n  let ax0 = a[0],\n    ay0 = a[1],\n    az0 = a[2],\n    aw0 = a[3],\n    bx1 = b[4],\n    by1 = b[5],\n    bz1 = b[6],\n    bw1 = b[7],\n    ax1 = a[4],\n    ay1 = a[5],\n    az1 = a[6],\n    aw1 = a[7],\n    bx0 = b[0],\n    by0 = b[1],\n    bz0 = b[2],\n    bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = quat.dot;\n\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\nexport function lerp(out, a, b, t) {\n  let mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\nexport function invert(out, a) {\n  let sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Calculates the length of a dual quat\n *\n * @param {quat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\nexport const length = quat.length;\n\n/**\n * Alias for {@link quat2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {quat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = quat.squaredLength;\n\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\nexport function normalize(out, a) {\n  let magnitude = squaredLength(a);\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    out[0] = a[0] / magnitude;\n    out[1] = a[1] / magnitude;\n    out[2] = a[2] / magnitude;\n    out[3] = a[3] / magnitude;\n    out[4] = a[4] / magnitude;\n    out[5] = a[5] / magnitude;\n    out[6] = a[6] / magnitude;\n    out[7] = a[7] / magnitude;\n  }\n  return out;\n}\n\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {quat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat2} a the first dual quaternion.\n * @param {quat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n    a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {quat2} a the first dual quat.\n * @param {quat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3],\n    a4 = a[4],\n    a5 = a[5],\n    a6 = a[6],\n    a7 = a[7];\n  let b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)));\n}\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = 0;\n  out[1] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nexport function fromValues(x, y) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nexport function round (out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x*x + y*y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength (a) {\n  var x = a[0],\n    y = a[1];\n  return x*x + y*y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x*x + y*y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  let p0 = a[0] - b[0],\n  p1 = a[1] - b[1],\n  sinC = Math.sin(c),\n  cosC = Math.cos(c);\n  \n  //perform rotation and translate to correct position\n  out[0] = p0*cosC - p1*sinC + b[0];\n  out[1] = p0*sinC + p1*cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let x1 = a[0],\n    y1 = a[1],\n    x2 = b[0],\n    y2 = b[1];\n  \n  let len1 = x1*x1 + y1*y1;\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n  \n  let len2 = x2*x2 + y2*y2;\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n  \n  let cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n  \n  \n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1];\n  let b0 = b[0], b1 = b[1];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 2;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n","\nimport * as gloperate from 'webgl-operate';\n\n\nexport class Cube extends gloperate.Geometry {\n\n    protected static readonly VERTICES = new Float32Array([\n        -1.0, -1.0, +1.0,\n        +1.0, -1.0, +1.0,\n        -1.0, +1.0, +1.0,\n        +1.0, +1.0, +1.0,\n        -1.0, -1.0, -1.0,\n        +1.0, -1.0, -1.0,\n        -1.0, +1.0, -1.0,\n        +1.0, +1.0, -1.0,\n    ]);\n\n    protected static readonly INDICES = new Uint8Array([0, 1, 2, 3, 7, 1, 5, 4, 7, 6, 2, 4, 0, 1]);\n\n\n    /**\n     * Object constructor, requires a context and an identifier.\n     * @param context - Valid context to create the object for.\n     * @param identifier - Meaningful name for identification of this instance.\n     */\n    constructor(context: gloperate.Context, identifier?: string) {\n        super(context, identifier);\n\n        /* Generate identifier from constructor name if none given. */\n        identifier = identifier !== undefined && identifier !== `` ? identifier : this.constructor.name;\n\n        const vertexVBO = new gloperate.Buffer(context, identifier + 'VBO');\n        const indexBuffer = new gloperate.Buffer(context, identifier + 'IndexBuffer');\n        this._buffers.push(vertexVBO);\n        this._buffers.push(indexBuffer);\n    }\n\n\n    /**\n     * Binds the vertex buffer object (VBO) to an attribute binding point of a given, pre-defined index.\n     */\n    protected bindBuffers(indices: Array<GLuint>): void {\n        /* Please note the implicit bind in attribEnable */\n        this._buffers[0].attribEnable(indices[0], 3, this.context.gl.FLOAT, false, 0, 0, true, false);\n        this._buffers[1].bind();\n    }\n\n    /**\n     * Unbinds the vertex buffer object (VBO) and disables the binding point.\n     */\n    protected unbindBuffers(indices: Array<GLuint>): void {\n        /* Please note the implicit unbind in attribEnable is skipped */\n        this._buffers[0].attribDisable(indices[0], true, true);\n        this._buffers[1].unbind();\n    }\n\n\n    /**\n     * Creates the vertex buffer object (VBO) and creates and initializes the buffer's data store.\n     * @param aVertex - Attribute binding point for vertices.\n     */\n    initialize(aVertex: GLuint): boolean {\n        const gl = this.context.gl;\n\n        // TODO: do not bind index to location 4\n        const valid = super.initialize([gl.ARRAY_BUFFER, gl.ELEMENT_ARRAY_BUFFER], [aVertex, 8]);\n\n        gloperate.auxiliaries.assert(this._buffers[0] !== undefined && this._buffers[0].object instanceof WebGLBuffer,\n            `expected valid WebGLBuffer`);\n\n        gloperate.auxiliaries.assert(this._buffers[1] !== undefined && this._buffers[1].object instanceof WebGLBuffer,\n            `expected valid WebGLBuffer`);\n\n        this._buffers[0].data(Cube.VERTICES, gl.STATIC_DRAW);\n        this._buffers[1].data(Cube.INDICES, gl.STATIC_DRAW);\n\n        return valid;\n    }\n\n    /**\n     * Specifies/invokes the draw of this cube.\n     */\n    draw(): void {\n        const gl = this.context.gl;\n        gl.drawElements(gl.TRIANGLE_STRIP, Cube.INDICES.length, gl.UNSIGNED_BYTE, 0);\n    }\n\n}\n","module.exports = \"\\nprecision lowp float;\\n\\n\\n#if __VERSION__ == 100\\n    #define texture(sampler, coord) texture2D(sampler, coord)\\n#else \\n    #define varying in\\n#endif\\n\\n\\n\\n#if __VERSION__ == 100\\n    #define fragColor gl_FragColor\\n#else \\n    layout(location = 0) out vec4 fragColor;\\n#endif\\n\\n\\nvarying vec3 v_vertex;\\n\\n\\nvoid main(void)\\n{\\n    fragColor = vec4(v_vertex, 1.0);\\n}\\n\"","module.exports = \"\\nprecision lowp float;\\n\\n\\n#if __VERSION__ == 100\\n#else \\n    #define varying out\\n#endif\\n\\n\\n\\n#if __VERSION__ == 100\\n    attribute vec3 a_vertex;\\n#else \\n    layout(location = 0) in vec3 a_vertex;\\n#endif\\n\\nuniform mat4 u_viewProjection;\\nuniform mat4 u_model;\\n\\nvarying vec3 v_vertex;\\n\\n\\nvoid main()\\n{\\n    v_vertex = a_vertex;\\n    gl_Position = u_viewProjection * u_model * vec4(a_vertex, 1.0);\\n}\\n\"","module.exports = \"\\nprecision lowp float;\\n\\n\\n#if __VERSION__ == 100\\n    #define texture(sampler, coord) texture2D(sampler, coord)\\n#else \\n    #define varying in\\n#endif\\n\\n\\n\\n#if __VERSION__ == 100\\n    #define fragColor gl_FragColor\\n#else\\n    layout(location = 0) out vec4 fragColor;\\n#endif\\n\\n\\nuniform samplerCube u_background;\\n\\nvarying vec3 v_ray;\\n\\n\\nvoid main(void)\\n{\\n    vec3 stu = normalize(v_ray);\\n\\n#if __VERSION__ == 100\\n    vec3 color = textureCube(u_background, stu).rgb;\\n#else\\n    vec3 color = texture(u_background, stu).rgb;\\n#endif\\n\\n    fragColor = vec4(color, 1.0);\\n}\\n\"","module.exports = \"\\nprecision lowp float;\\n\\n\\n#if __VERSION__ == 100\\n#else \\n    #define varying out\\n#endif\\n\\n\\n\\n#if __VERSION__ == 100\\n    attribute vec2 a_vertex;\\n#else \\n    layout(location = 0) in vec2 a_vertex;\\n#endif\\n\\n\\nuniform mat4 u_inverseViewProjection;\\nuniform vec3 u_eye;\\n\\nvarying vec3 v_ray;\\n\\n\\nvoid main(void)\\n{\\n    vec4 ray = u_inverseViewProjection * vec4(a_vertex, 1.0, 1.0);\\n    v_ray = (ray.xyz / ray.w) - u_eye;\\n\\n    gl_Position = vec4(a_vertex, 1.0, 1.0);\\n}\\n\"","\nimport { Camera, Context, NdcFillingTriangle, Program, Shader, TextureCube } from 'webgl-operate';\n\nexport class SkyTriangle {\n\n    protected _context: Context;\n    protected _camera: Camera;\n\n    protected _triangle: NdcFillingTriangle;\n    protected _texture: TextureCube;\n\n    protected _program: Program;\n    protected _uInverseViewProjection: WebGLUniformLocation;\n    protected _uEye: WebGLUniformLocation;\n    protected _uBackground: WebGLUniformLocation;\n\n\n    initialize(context: Context, camera: Camera, texture: TextureCube): void {\n        this._context = context;\n        this._camera = camera;\n        this._texture = texture;\n\n        const gl = this._context.gl;\n\n        const vert = new Shader(this._context, gl.VERTEX_SHADER, 'skytriangle.vert');\n        vert.initialize(require('./skytriangle.vert'));\n        const frag = new Shader(this._context, gl.FRAGMENT_SHADER, 'skytriangle.frag');\n        frag.initialize(require('./skytriangle.frag'));\n\n        this._program = new Program(this._context);\n        this._program.initialize([vert, frag]);\n\n        this._uInverseViewProjection = this._program.uniform('u_inverseViewProjection');\n        this._uEye = this._program.uniform('u_eye');\n        this._uBackground = this._program.uniform('u_background');\n\n        this._triangle = new NdcFillingTriangle(this._context);\n        const aVertex = this._program.attribute('a_vertex', 0);\n        this._triangle.initialize(aVertex);\n    }\n\n    uninitialize(): void {\n        this._uInverseViewProjection = -1;\n        this._uEye = -1;\n        this._uBackground = -1;\n\n        this._program.uninitialize();\n        this._triangle.uninitialize();\n    }\n\n    frame(): void {\n        const gl = this._context.gl;\n\n        gl.enable(gl.CULL_FACE);\n        gl.cullFace(gl.BACK);\n        gl.enable(gl.DEPTH_TEST);\n        gl.depthMask(false);\n        gl.depthFunc(gl.LEQUAL);\n\n        this._program.bind();\n        gl.uniformMatrix4fv(this._uInverseViewProjection, gl.GL_FALSE, this._camera.viewProjectionInverse);\n        gl.uniform3fv(this._uEye, this._camera.eye);\n        gl.uniform1i(this._uBackground, 0);\n\n        this._texture.bind(0);\n        this._triangle.bind();\n        this._triangle.draw();\n        this._triangle.unbind();\n        this._texture.unbind();\n\n        this._program.unbind();\n\n        gl.depthFunc(gl.LESS);\n        gl.depthMask(true);\n        gl.cullFace(gl.BACK);\n        gl.disable(gl.CULL_FACE);\n    }\n\n}\n","module.exports = \"\\nprecision lowp float;\\n\\n\\n#if __VERSION__ == 100\\n    #define texture(sampler, coord) texture2D(sampler, coord)\\n#else \\n    #define varying in\\n#endif\\n\\n\\n\\n#if __VERSION__ == 100\\n    #define fragColor gl_FragColor\\n#else \\n    layout(location = 0) out vec4 fragColor;\\n#endif\\n\\n\\nuniform samplerCube u_background;\\n\\nvarying vec3 v_uv;\\n\\n\\nvoid main(void)\\n{\\n    vec3 uv = (v_uv);\\n    /*\\n    vec3 w3 = abs(fwidth(uv));\\n    float density = sqrt(w3.x * w3.x + w3.y * w3.y + w3.z * w3.z);\\n    density *= 100.0;\\n    vec3 color = texture(background, uv).rgb;\\n    out_color = vec4(mix(vec3(0,0,0), vec3(1,0,0), density), 1.0);\\n    */\\n\\n#if __VERSION__ == 100\\n    vec3 color = textureCube(u_background, normalize(v_uv)).rgb;\\n#else\\n    vec3 color = texture(u_background, normalize(v_uv)).rgb;\\n#endif\\n\\n    fragColor = vec4(color, 1.0);\\n}\\n\"","module.exports = \"\\nprecision lowp float;\\n\\n\\n#if __VERSION__ == 100\\n#else \\n    #define varying out\\n#endif\\n\\n\\n\\n#if __VERSION__ == 100\\n    attribute vec3 a_vertex;\\n#else \\n    layout(location = 0) in vec3 a_vertex;\\n#endif\\n\\n\\nuniform mat4 u_transform;\\nuniform vec3 u_eye;\\n\\nvarying vec3 v_uv;\\n\\n\\nvoid main(void)\\n{\\n    v_uv = a_vertex;\\n\\n    vec4 vertex = u_transform * vec4(a_vertex + u_eye, 1.0);\\n    gl_Position = vertex.xyww;    \\n}\\n\"","\nimport { Camera, Context, Program, Shader, TextureCube } from 'webgl-operate';\n\nimport { Cube } from './cube';\n\n\nexport class Skybox {\n\n    protected _context: Context;\n    protected _camera: Camera;\n\n    protected _cube: Cube;\n    protected _texture: TextureCube;\n\n    protected _program: Program;\n    protected _uTransform: WebGLUniformLocation;\n    protected _uEye: WebGLUniformLocation;\n    protected _uBackground: WebGLUniformLocation;\n\n\n    initialize(context: Context, camera: Camera, texture: TextureCube): void {\n        this._context = context;\n        this._camera = camera;\n        this._texture = texture;\n\n        const gl = this._context.gl;\n\n        const vert = new Shader(this._context, gl.VERTEX_SHADER, 'skybox.vert');\n        vert.initialize(require('./skybox.vert'));\n        const frag = new Shader(this._context, gl.FRAGMENT_SHADER, 'skybox.frag');\n        frag.initialize(require('./skybox.frag'));\n\n        this._program = new Program(context);\n        this._program.initialize([vert, frag]);\n\n        this._uTransform = this._program.uniform('u_transform');\n        this._uEye = this._program.uniform('u_eye');\n        this._uBackground = this._program.uniform('u_background');\n\n        this._cube = new Cube(this._context);\n        const aVertex = this._program.attribute('a_vertex', 0);\n        this._cube.initialize(aVertex);\n    }\n\n    uninitialize(): void {\n        this._uTransform = -1;\n        this._uEye = -1;\n        this._uBackground = -1;\n\n        this._program.uninitialize();\n        this._cube.uninitialize();\n    }\n\n    frame(): void {\n        const gl = this._context.gl;\n\n        gl.enable(gl.CULL_FACE);\n        gl.cullFace(gl.FRONT);\n        gl.enable(gl.DEPTH_TEST);\n        gl.depthMask(false);\n        gl.depthFunc(gl.LEQUAL);\n\n        this._program.bind();\n        gl.uniformMatrix4fv(this._uTransform, gl.GL_FALSE, this._camera.viewProjection);\n        gl.uniform3fv(this._uEye, this._camera.eye);\n        gl.uniform1i(this._uBackground, 0);\n\n        this._texture.bind(0);\n        this._cube.bind();\n        this._cube.draw();\n        this._cube.unbind();\n        this._texture.unbind();\n\n        this._program.unbind();\n\n        gl.depthFunc(gl.LESS);\n        gl.depthMask(true);\n        gl.cullFace(gl.BACK);\n        gl.disable(gl.CULL_FACE);\n    }\n\n}\n","\n\nimport {\n    BlitPass, Camera, Context, DefaultFramebuffer, Framebuffer, Invalidate, MouseEventProvider, Program, Renderbuffer,\n    Renderer, Shader, Texture2, TextureCube, Wizard,\n} from 'webgl-operate';\n\n\nimport { mat4, vec3 } from 'gl-matrix';\n\nimport { Cube } from './cube';\nimport { Skybox } from './skybox';\nimport { SkyTriangle } from './skytriangle';\n\n\nexport class SplitRenderer extends Renderer {\n\n    protected _extensions = false;\n\n    // FBO and Blit\n    protected _defaultFBO: DefaultFramebuffer;\n    protected _colorRenderTexture: Texture2;\n    protected _depthRenderbuffer: Renderbuffer;\n    protected _intermediateFBO: Framebuffer;\n    protected _blit: BlitPass;\n\n    // rotation\n    protected _camera: Camera;\n    protected _rotate = true;\n\n    // flying cubes\n    protected _cube: Cube;\n    protected _cubeProgram: Program;\n    protected _uViewProjection: WebGLUniformLocation;\n    protected _uModel: WebGLUniformLocation;\n    protected _aCubeVertex: GLuint;\n    protected _cubeMatrix1: mat4;\n    protected _cubeMatrix2: mat4;\n\n    // skyBox and skyTriangle use the same cubeMap\n    protected _cubeMap: TextureCube;\n    protected _skyBox: Skybox;\n    protected _skyTriangle: SkyTriangle;\n\n\n    protected onUpdate(): boolean {\n        return true;\n    }\n\n    protected onPrepare(): void {\n\n        // update camera angle\n        if (this._rotate) {\n            const speed = 0.002;\n            const angle = (window.performance.now() * speed) % 360;\n            const radians = angle * Math.PI / 180.0;\n            this._camera.eye = vec3.fromValues(4 * Math.sin(radians), 0.0, 4 * Math.cos(radians));\n        }\n\n        // resize\n        if (this._altered.frameSize) {\n            this._intermediateFBO.resize(this._frameSize[0], this._frameSize[1]);\n            this._camera.viewport = [this._frameSize[0], this._frameSize[1]];\n        }\n        if (this._altered.canvasSize) {\n            this._camera.aspect = this._canvasSize[0] / this._canvasSize[1];\n        }\n\n        // update clear color\n        if (this._altered.clearColor) {\n            this._intermediateFBO.clearColor(this._clearColor);\n        }\n\n        this._altered.reset();\n    }\n\n    protected onFrame(frameNumber: number): void {\n        const gl = this._context.gl;\n\n        // bind FBO\n        this._intermediateFBO.bind();\n        this._intermediateFBO.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT, false, false);\n\n        // render two flying cubes\n        gl.viewport(0, 0, this._frameSize[0], this._frameSize[1]);\n\n        gl.enable(gl.CULL_FACE);\n        gl.cullFace(gl.BACK);\n        gl.enable(gl.DEPTH_TEST);\n\n        this._cubeProgram.bind();\n\n        gl.uniformMatrix4fv(this._uViewProjection, gl.GL_FALSE, this._camera.viewProjection);\n        gl.uniformMatrix4fv(this._uModel, gl.GL_FALSE, this._cubeMatrix1);\n        this._cube.bind();\n        this._cube.draw();\n        gl.uniformMatrix4fv(this._uModel, gl.GL_FALSE, this._cubeMatrix2);\n        this._cube.draw();\n        this._cube.unbind();\n\n        this._cubeProgram.unbind();\n\n        gl.cullFace(gl.BACK);\n        gl.disable(gl.CULL_FACE);\n\n        // render split\n        gl.enable(gl.SCISSOR_TEST);\n        gl.scissor(0, 0, this._frameSize[0] / 2 - 1, this._frameSize[1]);\n        this._skyBox.frame();\n\n        gl.scissor(this._frameSize[0] / 2 + 1, 0, this._frameSize[0] / 2 - 1, this._frameSize[1]);\n        this._skyTriangle.frame();\n        gl.disable(gl.SCISSOR_TEST);\n\n        // unbind FBO\n        this._intermediateFBO.unbind();\n    }\n\n    protected onSwap(): void {\n        this._blit.frame();\n        this.invalidate();\n    }\n\n    protected loadImages(): void {\n        const gl = this._context.gl;\n\n        this._cubeMap = new TextureCube(this._context);\n        const internalFormatAndType = Wizard.queryInternalTextureFormat(this._context, gl.RGB, Wizard.Precision.byte);\n        this._cubeMap.initialize(512, internalFormatAndType[0], gl.RGB, internalFormatAndType[1]);\n        this._cubeMap.load({\n            positiveX: 'data/skybox.px.png', negativeX: 'data/skybox.nx.png',\n            positiveY: 'data/skybox.py.png', negativeY: 'data/skybox.ny.png',\n            positiveZ: 'data/skybox.pz.png', negativeZ: 'data/skybox.nz.png',\n        }).then(() => this.invalidate());\n    }\n\n    protected onInitialize(context: Context, callback: Invalidate, mouseEventProvider: MouseEventProvider): boolean {\n        const gl = this._context.gl;\n        const gl2facade = this._context.gl2facade;\n\n        this.loadImages();\n\n        // init program\n        const vert = new Shader(this._context, gl.VERTEX_SHADER, 'cube.vert');\n        vert.initialize(require('./cube.vert'));\n        const frag = new Shader(this._context, gl.FRAGMENT_SHADER, 'cube.frag');\n        frag.initialize(require('./cube.frag'));\n\n        this._cubeProgram = new Program(this._context);\n        this._cubeProgram.initialize([vert, frag]);\n\n        this._aCubeVertex = this._cubeProgram.attribute('a_vertex', 0);\n        this._uViewProjection = this._cubeProgram.uniform('u_viewProjection');\n        this._uModel = this._cubeProgram.uniform('u_model');\n\n        // init flying cubes\n        this._cube = new Cube(this._context, 'cube');\n        this._cube.initialize(this._aCubeVertex);\n        const scale1 = mat4.fromScaling(mat4.create(), vec3.fromValues(0.3, 0.3, 0.3));\n        const translate1 = mat4.fromTranslation(mat4.create(), vec3.fromValues(2.0, -0.5, 1.0));\n        this._cubeMatrix1 = mat4.multiply(mat4.create(), translate1, scale1);\n        const scale2 = mat4.fromScaling(mat4.create(), vec3.fromValues(0.4, 0.4, 0.4));\n        const translate2 = mat4.fromTranslation(mat4.create(), vec3.fromValues(-3.0, 0.5, -2.0));\n        this._cubeMatrix2 = mat4.multiply(mat4.create(), translate2, scale2);\n\n        // init camera\n        this._camera = new Camera();\n        this._camera.center = vec3.fromValues(0.0, 0.0, 0.0);\n        this._camera.up = vec3.fromValues(0.0, 1.0, 0.0);\n        this._camera.eye = vec3.fromValues(4.0, 0.0, 0.0);\n        this._camera.near = 0.1;\n        this._camera.far = 8.0;\n\n        // init FBO & BlitPass\n        this._defaultFBO = new DefaultFramebuffer(this._context, 'DefaultFBO');\n        this._defaultFBO.initialize();\n        this._colorRenderTexture = new Texture2(this._context, 'ColorRenderTexture');\n        this._colorRenderTexture.initialize(480, 270,\n            this._context.isWebGL2 ? gl.RGBA8 : gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE);\n        this._depthRenderbuffer = new Renderbuffer(this._context, 'DepthRenderbuffer');\n        this._depthRenderbuffer.initialize(480, 270, gl.DEPTH_COMPONENT16);\n        this._intermediateFBO = new Framebuffer(this._context, 'IntermediateFBO');\n        this._intermediateFBO.initialize([[gl2facade.COLOR_ATTACHMENT0, this._colorRenderTexture]\n            , [gl.DEPTH_ATTACHMENT, this._depthRenderbuffer]]);\n        this._blit = new BlitPass(this._context);\n        this._blit.initialize();\n        this._blit.framebuffer = this._intermediateFBO;\n        this._blit.readBuffer = gl2facade.COLOR_ATTACHMENT0;\n        this._blit.drawBuffer = gl.BACK;\n        this._blit.target = this._defaultFBO;\n\n        // init skyBox\n        this._skyBox = new Skybox();\n        this._skyBox.initialize(this._context, this._camera, this._cubeMap);\n\n        // init skyTriangle\n        this._skyTriangle = new SkyTriangle();\n        this._skyTriangle.initialize(this._context, this._camera, this._cubeMap);\n\n        return true;\n    }\n\n    protected onUninitialize(): void {\n        this._cube.uninitialize();\n\n        this._intermediateFBO.uninitialize();\n        this._defaultFBO.uninitialize();\n        this._colorRenderTexture.uninitialize();\n        this._depthRenderbuffer.uninitialize();\n        this._blit.uninitialize();\n\n        this._skyBox.uninitialize();\n        this._skyTriangle.uninitialize();\n    }\n\n}\n\n","\nimport { Canvas, Color } from 'webgl-operate';\n\nimport { Skybox } from './skybox';\nimport { SkyTriangle } from './skytriangle';\nimport { SplitRenderer } from './splitrenderer';\n\n\nfunction onload() {\n    const canvas = new Canvas('example-canvas');\n    const context = canvas.context;\n\n    canvas.clearColor.fromHex('d6d8db');\n\n    const renderer = new SplitRenderer();\n    canvas.renderer = renderer;\n\n    // export variables\n    (window as any)['canvas'] = canvas;\n    (window as any)['context'] = context;\n    (window as any)['renderer'] = renderer;\n}\n\nif (window.document.readyState === 'complete') {\n    onload();\n} else {\n    window.onload = onload;\n}\n"],"sourceRoot":""}